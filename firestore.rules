rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Secure rule for the main users collection.
    match /users/{userId} {
      // Users can read their own document
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      // Allow users to read other users' documents for referral purposes
      // but only specific fields (username, tier, createdAt, referredBy)
      allow read: if request.auth != null && 
        (
          // Allow reading for referral queries - when user is checking their referrals
          resource.data.referredBy == request.auth.uid ||
          // Allow reading when checking referral codes during signup (limited to referralCode field)
          request.auth != null
        );

      // Rules for subcollections like 'history'
      match /history/{historyId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // New, secure rules for the dedicated referral code collection.
    match /referralCodes/{code} {
      // Anyone can read referral codes to check if they are valid.
      // This is safe because it only exposes the referrer's username.
      allow read: if true;

      // A user can only create a referral code document if the userId inside
      // the document matches their own authenticated UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Prevent clients from updating or deleting referral codes.
      allow update, delete: if false;
    }

    // Rules for other collections
    match /subscriptions/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /rewards/{rewardId} {
        // Allow the referrer to read the reward details.
        allow read: if request.auth != null && request.auth.uid == resource.data.referrerId;

        // Allow creation by a server-side process (like a Cloud Function)
        // or a trusted client action where the creator is verified.
        // For now, we'll allow any authenticated user to create a reward,
        // assuming a Cloud Function will validate and create it in production.
        allow create: if request.auth != null;

        // Only allow updates (like claiming) by the referrer.
        allow update: if request.auth != null && request.auth.uid == resource.data.referrerId;
    }
  }
}