rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===== Helper Functions =====
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // ===== Users Collection =====
    match /users/{userId} {
      // CREATE: Allow new users to create their own document.
      // The `isNewUser` flag must be true on creation to prevent re-creation.
      allow create: if isOwner(userId) && request.resource.data.isNewUser == true;

      // READ:
      // 1. Authenticated users can read their own document.
      // 2. Authenticated users can read other users' profiles for features like referral name display.
      allow get: if isAuthenticated();

      // LIST (QUERY):
      // Allow querying for users based on referralCode (for signup validation).
      // Allow querying for users based on referredBy (for the referral page list).
      allow list: if isAuthenticated() &&
                    (request.query.keys.hasOnly(['referralCode']) || request.query.keys.hasOnly(['referredBy']));

      // UPDATE:
      // 1. Users can only update their own document.
      // 2. This combines the best of both rules: it allows specific fields to be changed,
      //    while also explicitly preventing tier/reward-related fields from being tampered with.
      allow update: if isOwner(userId)
                    && request.resource.data.diff(resource.data).affectedKeys()
                       .hasOnly(['username', 'photoURL', 'notifications', 'autoRenew', 'lastLogin', 'isNewUser', 'fcmTokens'])
                    && request.resource.data.tier == resource.data.tier
                    && request.resource.data.tierExpiry == resource.data.tierExpiry
                    && request.resource.data.referralCode == resource.data.referralCode;

      // DELETE: Users can delete their own account.
      allow delete: if isOwner(userId);

      // --- History Subcollection ---
      match /history/{historyId} {
        // Users can read/write their own history.
        // A referrer can also add a history item (e.g., "Your friend joined...").
        allow read, create: if isOwner(userId) || isOwner(request.resource.data.referrerId);
        allow update, delete: if false;
      }
    }

    // ===== Subscriptions Collection =====
    match /subscriptions/{userId} {
      // Users can read their own subscription document.
      // Writes are allowed for client-side transaction logging on the free tier.
      allow read, write: if isOwner(userId);
    }

    // ===== Rewards Collection =====
    match /rewards/{rewardId} {
      // CREATE: Allow an authenticated user to create a reward document for a referrer.
      // This is necessary for the free-tier client-side reward granting.
      // The rule ensures the user creating the reward correctly identifies themselves.
      allow create: if isAuthenticated()
                      && request.resource.data.grantedByUserId == request.auth.uid;

      // READ: Users can read rewards intended for them.
      allow get, list: if isAuthenticated() && resource.data.referrerId == request.auth.uid;

      // UPDATE: Users can claim their own rewards (setting `claimed` to true).
      // The rule ensures they can only change `claimed` from false to true.
      allow update: if isAuthenticated()
                      && resource.data.referrerId == request.auth.uid
                      && request.resource.data.claimed == true
                      && resource.data.claimed == false;

      // DELETE: Nobody can delete rewards from the client.
      allow delete: if false;
    }
  }
}