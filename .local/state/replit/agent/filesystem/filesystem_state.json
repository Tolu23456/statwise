{"file_contents":{"404.css":{"content":"/* /404.css */\n\n/* --- Global & Font --- */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n@font-face {\n    font-family: 'Optimistic';\n    src: url('./Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\n/* --- Body & Theme --- */\nbody {\n    font-family: \"Optimistic\", sans-serif;\n    background: #f4f5f7;\n    color: #1c1c1e;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    text-align: center;\n    padding: 20px;\n}\n\n/* --- Container --- */\n.error-container {\n    max-width: 450px;\n}\n\n.error-title {\n    font-size: 6rem;\n    font-weight: bold;\n    color: #0e639c;\n    margin: 0;\n}\n\n.error-subtitle {\n    font-size: 1.5rem;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n.error-message {\n    color: #666;\n    margin-bottom: 30px;\n}\n\n/* --- Button Style (from styles.css) --- */\n.button {\n    display: inline-block;\n    padding: 8px 16px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    text-decoration: none;\n    transition: background 0.3s ease;\n    border: none;\n    cursor: pointer;\n    text-align: center;\n}\n\n.button:hover {\n    background: #0b4f7a;\n}\n\n/* --- Dark Mode --- */\n@media (prefers-color-scheme: dark) {\n    body {\n        background: #1e1e1e;\n        color: #d4d4d4;\n    }\n}","size_bytes":1293},"README.md":{"content":"# StatWise - AI Sports Prediction PWA\n\nStatWise is a Progressive Web App (PWA) that provides users with AI-powered sports predictions. It features a multi-tiered subscription model, a referral program, and a comprehensive user profile management system, all built on a modern serverless stack with Firebase.\n\n## ‚ú® Features\n\n*   **Single Page Application (SPA):** A fast, seamless user experience with dynamic page loading and animated transitions.\n*   **User Authentication:** Secure login, signup, and password reset functionality.\n*   **Tiered Subscriptions:**\n    *   Multiple subscription levels (Free, Premium, VIP, VVIP).\n    *   Payment integration with **Flutterwave**.\n    *   Client-side subscription status checks and downgrades on expiry.\n    *   Tier-based access control for features and content.\n*   **AI Predictions Homepage:**\n    *   Displays a list of prediction cards with match details, pick, odds, and confidence levels.\n    *   **Advanced Search:** Filter matches by name and use commands (`/odds`, `/c75`) to sort and filter.\n    *   **Pull-to-Refresh:** Easily refresh the prediction list.\n*   **Comprehensive User Profile:**\n    *   Update username and profile picture (uploads to Firebase Storage).\n    *   Change password with re-authentication.\n    *   Dark mode toggle.\n    *   View user statistics (member since, total predictions, win rate).\n*   **History Tracking:**\n    *   Tabbed view for **Predictions**, **Account Activity**, and **Transactions**.\n    *   Tracks saved predictions and their outcomes (Win/Loss/Pending).\n    *   Logs important account actions like login, logout, and profile updates.\n*   **Referral System:**\n    *   Each user gets a unique referral code.\n    *   Share code via WhatsApp, Twitter, or the native Web Share API.\n    *   View a list of users you've referred.\n    *   Automatic reward claiming for successful referrals.\n*   **Push Notifications:**\n    *   Users can opt-in to receive push notifications via Firebase Cloud Messaging (FCM).\n    *   Handles foreground and background messages.\n*   **Progressive Web App (PWA):**\n    *   Installable on user devices.\n    *   **Offline Support:** A custom offline page is served via a Service Worker when the user has no network connection.\n*   **Security:**\n    *   Client-side deterrents to prevent basic inspection (disabling right-click, dev tools shortcuts).\n    *   Secure, multi-step account deletion process.\n\n## üõ†Ô∏è Tech Stack\n\n*   **Frontend:** Vanilla JavaScript (ES Modules), HTML5, CSS3\n*   **Backend (Serverless):**\n    *   **Firebase Authentication:** For user management.\n    *   **Firestore:** As the primary NoSQL database for user data, predictions, history, and subscriptions.\n    *   **Firebase Storage:** For user profile picture uploads.\n    *   **Firebase Cloud Messaging (FCM):** For push notifications.\n*   **Payments:** Flutterwave\n*   **UI/UX:**\n    *   Intro.js: For the new user welcome tour.\n\n## üìÇ Project Structure\n\n```\nstatwise/\n‚îú‚îÄ‚îÄ Auth/\n‚îÇ   ‚îú‚îÄ‚îÄ auth.js         # Handles login, signup, password reset logic\n‚îÇ   ‚îî‚îÄ‚îÄ login.html      # Login page\n‚îÇ   ‚îî‚îÄ‚îÄ signup.html     # Signup page\n‚îÇ   ‚îî‚îÄ‚îÄ forgot.html     # Forgot password page\n‚îú‚îÄ‚îÄ Offline/\n‚îÇ   ‚îú‚îÄ‚îÄ offline.html    # Offline fallback page\n‚îÇ   ‚îî‚îÄ‚îÄ offline.css\n‚îú‚îÄ‚îÄ Pages/              # Dynamically loaded page content\n‚îÇ   ‚îú‚îÄ‚îÄ home.html\n‚îÇ   ‚îú‚îÄ‚îÄ history.html\n‚îÇ   ‚îú‚îÄ‚îÄ profile.html\n‚îÇ   ‚îú‚îÄ‚îÄ referral.html\n‚îÇ   ‚îú‚îÄ‚îÄ subscriptions.html\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ Assets/\n‚îÇ   ‚îú‚îÄ‚îÄ Icons/\n‚îÇ   ‚îî‚îÄ‚îÄ Fonts/\n‚îú‚îÄ‚îÄ env.js              # Firebase & service keys (IMPORTANT: Should be gitignored)\n‚îú‚îÄ‚îÄ env.example.js      # Template for environment variables\n‚îú‚îÄ‚îÄ main.js             # Core application logic, router, state management\n‚îú‚îÄ‚îÄ utils.js            # Utility functions (timestamp formatting, etc.)\n‚îú‚îÄ‚îÄ index.html          # Main entry point of the app\n‚îú‚îÄ‚îÄ styles.css          # Global styles\n‚îú‚îÄ‚îÄ sw.js               # Service Worker for PWA features (offline, push)\n‚îî‚îÄ‚îÄ README.md           # This file\n```\n\n## üöÄ Getting Started\n\nFollow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\n*   A Firebase project.\n*   A Flutterwave account for payment processing.\n*   A local web server. You can use the `http-server` npm package for a quick setup:\n    ```bash\n    npm install -g http-server\n    ```\n\n### Installation & Setup\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/your-username/statwise.git\n    cd statwise\n    ```\n\n2.  **Configure Environment Variables:**\n    *   Copy `env.example.js` to a new file named `env.js`.\n    *   Open `env.js` and fill in your Firebase project configuration details in the `firebaseConfig` object.\n    *   Add your Flutterwave public key to the `FLWPUBK` constant.\n\n3.  **Update Service Worker Config:**\n    *   Open `sw.js` and replace the placeholder `firebaseConfig` object with your own Firebase project configuration.\n\n4.  **Update FCM VAPID Key:**\n    *   In `main.js`, find the `initFirebaseMessaging` function.\n    *   Replace the placeholder `'YOUR_VAPID_KEY_HERE'` with your actual VAPID key from the Firebase Console (*Project Settings > Cloud Messaging > Web configuration*).\n\n5.  **Run the local server:**\n    *   From the root of the project directory, run:\n        ```bash\n        http-server\n        ```\n    *   Open your browser and navigate to the local address provided by `http-server` (e.g., `http://127.0.0.1:8080`). You should start at the login page (`/Auth/login.html`).\n\n### Firebase Setup Notes\n\n*   **Authentication:** Enable \"Email/Password\" as a sign-in method in the Firebase Authentication console.\n*   **Firestore:** Your database structure will be created automatically as users sign up and interact with the app. You will need to configure Firestore Security Rules to ensure data is accessed securely.\n*   **Storage:** Ensure your Firebase Storage rules allow authenticated users to read and write to their own `profile_pictures/{userId}` path.\n\n### ‚ö†Ô∏è Security Warning\n\nThe payment verification logic in this project is designed to be handled by a **Firebase Cloud Function** (`verifyPaymentAndGrantReward`). The client-side code calls this function but does not perform the verification itself. This is the recommended secure approach for production.\n\nFor a production environment, you **must** implement this Cloud Function to securely communicate with the Flutterwave API, verify transactions, and grant subscriptions and referral rewards. Client-side verification is insecure and can be easily bypassed.\n\n---","size_bytes":6776},"env.example.js":{"content":"// env.example.js\n// ================================\n// This is a template file. Copy it to env.js and fill in your actual configuration.\n// env.js is ignored by Git to keep your keys secure.\n// ================================\n\n// Import Firebase SDK\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js\";\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js\";\nimport { getFunctions } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-functions.js\";\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\nimport { getMessaging } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging.js\";\nimport { getStorage } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js\";\n\n// Firebase config - It's safe for this to be in client-side code.\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_AUTH_DOMAIN\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_STORAGE_BUCKET\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\",\n};\n\n// Initialize Firebase app\nconst app = initializeApp(firebaseConfig);\n\n// Export services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const functions = getFunctions(app);\nexport const messaging = getMessaging(app);\nexport const storage = getStorage(app);\n\n// Flutterwave Public Key (Safe for frontend)\nexport const FLWPUBK = \"YOUR_FLUTTERWAVE_PUBLIC_KEY\";","size_bytes":1507},"env.js":{"content":"// env.js\n// ================================\n// This file contains the public configuration for Firebase and other services.\n// It is safe to commit this file to your repository.\n// ================================\n\n// Import Firebase SDK\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js\";\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js\";\nimport { getFunctions } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-functions.js\";\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\nimport { getMessaging } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging.js\";\nimport { getStorage } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js\";\n\n// Firebase config - It's safe for this to be in client-side code.\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpPTmDw7RpxTo2AXf8ZDTq4AG46xKB16g\",\n  authDomain: \"statwise-319a4.firebaseapp.com\",\n  projectId: \"statwise-319a4\",\n  storageBucket: \"statwise-319a4.firebasestorage.app\",\n  messagingSenderId: \"416700134653\",\n  appId: \"1:416700134653:web:f3a6f9766a2fafa8fdba94\",\n};\n\n// Initialize Firebase app\nconst app = initializeApp(firebaseConfig);\n\n// Export services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const functions = getFunctions(app);\nexport const messaging = getMessaging(app);\nexport const storage = getStorage(app);\n\n// Flutterwave Public Key (Safe for frontend)\nexport const FLWPUBK = \"FLWPUBK_TEST-8336183053a03e565edf2dd9d6ec3ffd-X\";","size_bytes":1587},"index.js":{"content":"// This file is intentionally left blank.\n// The application has been refactored to use client-side logic\n// instead of Firebase Cloud Functions to adhere to the free-tier-only requirement.\n// The original functions can be found in the project's version history if needed.","size_bytes":272},"main.js":{"content":"// main.js\nimport { auth, db, FLWPUBK, storage, functions, messaging } from './env.js';\nimport { showLoader, hideLoader, showSpinner, hideSpinner } from './Loader/loader.js';\nimport { initInteractiveBackground } from './ui.js';\nimport { initializeAppSecurity, manageInitialPageLoad } from './manager.js';\nimport { formatTimestamp, addHistoryUnique } from './utils.js';\nimport { onAuthStateChanged, signOut, updatePassword, EmailAuthProvider, reauthenticateWithCredential } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js\";\nimport {\n    ref, uploadBytes, getDownloadURL\n} from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js\";\nimport { httpsCallable } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-functions.js\";\nimport { \n    getToken, onMessage\n} from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging.js\"; // This is a client-side library\nimport {\n    doc, getDoc, setDoc, updateDoc,\n    collection, addDoc, query, where, orderBy, getDocs, serverTimestamp, limit, deleteDoc, onSnapshot, arrayUnion\n} from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\n\n// ===== DOM Elements =====\nconst main = document.querySelector(\"main\");\nconst navButtons = document.querySelectorAll(\".bottom-nav button\");\nconst defaultPage = \"home\";\nlet verifiedTier = \"Free Tier\"; // In-memory tier\n\ninitializeTheme(); // Apply theme on initial load\n\n// ===== Helper: Clear dynamic assets =====\nfunction clearDynamicAssets() {\n    document.querySelectorAll(\"script[data-dynamic], link[data-dynamic], style[data-dynamic]\").forEach(el => el.remove());\n}\n\n// ===== Modal System =====\nfunction showModal(options) {\n    const defaults = {\n        message: '',\n        confirmText: 'OK',\n        cancelText: 'Cancel',\n        onConfirm: () => {},\n        onCancel: () => {},\n        confirmClass: 'btn-primary',\n        showCancel: false,\n        inputType: null, // e.g., 'text' or 'password'\n        inputValue: '',\n        inputPlaceholder: ''\n    };\n    const config = { ...defaults, ...options };\n\n    let modal = document.getElementById(\"customModal\");\n    if (!modal) {\n        modal = document.createElement(\"div\");\n        modal.id = \"customModal\";\n        modal.className = \"modal\";\n        modal.innerHTML = `\n            <div class=\"modal-content\">\n                <p id=\"modalMessage\"></p>\n                <input type=\"text\" id=\"modalInput\" style=\"display: none;\" />\n                <div class=\"modal-actions\">\n                    <button id=\"modalCancel\"></button>\n                    <button id=\"modalConfirm\"></button>\n                </div>\n            </div>`;\n        document.body.appendChild(modal);\n    }\n\n    const modalMessage = modal.querySelector(\"#modalMessage\");\n    const confirmBtn = modal.querySelector(\"#modalConfirm\");\n    const cancelBtn = modal.querySelector(\"#modalCancel\");\n    const modalInput = modal.querySelector(\"#modalInput\");\n\n    modalMessage.textContent = config.message;\n    confirmBtn.textContent = config.confirmText;\n    confirmBtn.className = config.confirmClass;\n    cancelBtn.textContent = config.cancelText;\n    cancelBtn.className = 'btn-secondary';\n    cancelBtn.style.display = config.showCancel ? 'inline-block' : 'none';\n    modal.style.display = \"flex\";\n\n    // Handle input field\n    if (config.inputType) {\n        modalInput.style.display = 'block';\n        modalInput.type = config.inputType;\n        modalInput.value = config.inputValue;\n        modalInput.placeholder = config.inputPlaceholder;\n    } else {\n        modalInput.style.display = 'none';\n    }\n\n    const cleanup = () => { modal.style.display = \"none\"; confirmBtn.onclick = null; cancelBtn.onclick = null; modalInput.style.display = 'none'; };\n    confirmBtn.onclick = () => { cleanup(); config.onConfirm(modalInput.value); };\n    cancelBtn.onclick = () => { cleanup(); config.onCancel(); };\n}\n\n// ===== Theme Functions =====\nfunction applyTheme(isDark) {\n    document.documentElement.classList.toggle(\"dark-mode\", isDark);\n}\n\nfunction initializeTheme() {\n    const isDark = localStorage.getItem('darkMode') === 'true';\n    applyTheme(isDark);\n}\n\nlet cleanupAnimation = () => {}; // A function to stop the animation\n\nfunction toggleBackgroundAnimation(show) {\n    let animationArea = document.querySelector('.area');\n    cleanupAnimation(); // Always cleanup previous state\n\n    if (show) {\n        if (!animationArea) {\n            animationArea = document.createElement('div');\n            animationArea.className = 'area';\n            const list = document.createElement('ul');\n            list.className = 'circles';\n            for (let i = 0; i < 10; i++) {\n                const li = document.createElement('li');\n                list.appendChild(li);\n            }\n            animationArea.appendChild(list);\n            document.body.prepend(animationArea);\n        }\n        cleanupAnimation = initInteractiveBackground(animationArea); // Start new animation\n    } else {\n        if (animationArea) {\n            animationArea.remove();\n        }\n    }\n}\nconst CLASS_TO_TIER = { free: \"Free Tier\", premium: \"Premium Tier\", vip: \"VIP / Elite Tier\", vvip: \"VVIP / Pro Elite Tier\" };\nconst TIER_ORDER = [\"Free Tier\", \"Premium Tier\", \"VIP / Elite Tier\", \"VVIP / Pro Elite Tier\"];\n\nasync function updateCurrentTierDisplay(userId) {\n    const tierDisplay = document.getElementById(\"user-tier\");\n    if (!tierDisplay || !userId) return;\n \n    const snapshot = await getDoc(doc(db, \"users\", userId));\n    const userData = snapshot.exists() ? snapshot.data() : {};\n    const tier = userData.tier || \"Free Tier\";\n    const expiry = userData.tierExpiry;\n \n    tierDisplay.textContent = tier;\n \n    const expiryDisplay = document.getElementById(\"tier-expiry\");\n    if (expiryDisplay) {\n        if (expiry && tier !== 'Free Tier') {\n            expiryDisplay.textContent = `Expires on: ${new Date(expiry).toLocaleDateString()}`;\n            expiryDisplay.style.display = 'block';\n        } else {\n            expiryDisplay.style.display = 'none';\n        }\n    }\n    verifiedTier = tier; // update memory\n    enforceTierRestrictions();\n}\n\n// Flutterwave payment + trial/free handling\nasync function handlePayment(userId, tier, amount, period) {\n    let paymentCompleted = false; // Flag to prevent onclose modal after success\n\n    if (parseFloat(amount) === 0) {\n        await updateUserTier(userId, tier, period);\n        showModal({ message: `You have selected the ${tier}` });\n        return;\n    }\n\n    const txRef = `TX-${Date.now()}`;\n\n    FlutterwaveCheckout({\n        public_key: FLWPUBK,\n        tx_ref: txRef,\n        amount: amount,\n        currency: \"NGN\",\n        payment_options: \"card,ussd,qr,banktransfer\",\n        customer: {\n            email: auth.currentUser?.email || \"user@example.com\",\n            name: auth.currentUser?.displayName || \"User\",\n        },\n        customizations: {\n            title: \"Statwise Subscription\",\n            description: `${tier} (${period}) plan`,\n        },\n        callback: async function(data) {\n            paymentCompleted = true;\n            this.close(); // Close the modal immediately\n\n            if (data.status === \"successful\" || data.status === \"completed\") {\n                showLoader();\n                try {\n                    // Call a Cloud Function to securely verify the payment and update the user's tier.\n                    const verifyPayment = httpsCallable(functions, 'verifyPaymentAndGrantReward');\n                    const result = await verifyPayment({\n                        transaction_id: data.transaction_id,\n                        tx_ref: data.tx_ref,\n                        tier: tier,\n                        period: period\n                    });\n                    showModal({ message: result.data.message || \"Your subscription has been updated!\" });\n                } catch (error) {\n                    console.error(\"Error verifying payment:\", error);\n                    let errorMessage = \"Payment verification failed. Please contact support with your transaction details.\";\n                    \n                    if (error.code === 'functions/cancelled') {\n                        errorMessage = \"Payment verification was cancelled. Please try again.\";\n                    } else if (error.code === 'functions/deadline-exceeded') {\n                        errorMessage = \"Payment verification timed out. Your payment may still be processing.\";\n                    } else if (error.code === 'functions/unavailable') {\n                        errorMessage = \"Payment service is temporarily unavailable. Please try again later.\";\n                    } else if (error.message && error.message.includes('network')) {\n                        errorMessage = \"Network error during payment verification. Please check your connection and try again.\";\n                    }\n                    \n                    showModal({ \n                        message: errorMessage,\n                        confirmClass: 'btn-danger',\n                        confirmText: 'Contact Support',\n                        onConfirm: () => window.open('mailto:support@statwise.com?subject=Payment Issue')\n                    });\n                } finally {\n                    hideLoader();\n                }\n            } else {\n                showModal({ message: \"Payment was not completed.\", confirmClass: 'btn-danger' });\n            }\n        },\n        onclose: function () {\n            if (!paymentCompleted) {\n                showModal({ message: \"Payment window closed. Your transaction was not completed.\" });\n            }\n        }\n    });\n}\n\nasync function updateUserTier(userId, tier, period = null, expiry = null) {\n    if (!userId || !tier) {\n        console.error('updateUserTier called with invalid parameters');\n        throw new Error('Invalid user ID or tier specified');\n    }\n\n    const userRef = doc(db, \"users\", userId);\n    const updateData = {\n        tier: tier,\n        tierExpiry: expiry\n    };\n\n    if (tier === 'Free Tier' || !expiry) {\n        updateData.tierExpiry = null; // Reset expiry for free tier\n        updateData.autoRenew = false; // Disable auto-renew for free tier/cancellation\n    }\n\n    try {\n        await updateDoc(userRef, updateData);\n        verifiedTier = tier;\n        await updateCurrentTierDisplay(userId);\n        enforceTierRestrictions();\n    } catch (error) {\n        console.error('Failed to update user tier:', error);\n        let errorMessage = 'Failed to update subscription. Please try again.';\n        \n        if (error.code === 'firestore/permission-denied') {\n            errorMessage = 'Permission denied. Please contact support.';\n        } else if (error.code === 'firestore/unavailable') {\n            errorMessage = 'Service temporarily unavailable. Please try again later.';\n        } else if (error.message && error.message.includes('network')) {\n            errorMessage = 'Network error. Please check your connection and try again.';\n        }\n        \n        throw new Error(errorMessage);\n    }\n}\n\n// Attach subscription buttons with upgrade fully visible\nasync function attachSubscriptionButtons(userId) {\n    if (!userId) return;\n\n    const snapshot = await getDoc(doc(db, \"users\", userId));\n    const currentTier = snapshot.exists() ? snapshot.data().tier : \"Free Tier\";\n    const currentRank = TIER_ORDER.indexOf(currentTier);\n\n    document.querySelectorAll(\".subscription-card\").forEach((card) => {\n        const btn = card.querySelector(\".subscribe-btn\");\n        if (!btn) return;\n\n        const tierClass = Object.keys(CLASS_TO_TIER).find(cls => card.classList.contains(cls));\n        const cardTier = tierClass ? CLASS_TO_TIER[tierClass] : (card.querySelector(\"h2\")?.textContent.trim() || \"Free Tier\");\n        const cardRank = TIER_ORDER.indexOf(cardTier);\n\n        card.classList.remove('is-current-plan');\n        btn.style.display = 'inline-block';\n\n        if (cardRank < currentRank) {\n            btn.style.display = 'none'; // Hide downgrade options\n        } else if (cardRank === currentRank) {\n            card.classList.add('is-current-plan');\n            btn.textContent = 'Current Plan';\n            btn.disabled = true;\n        } else { // cardRank > currentRank\n            btn.textContent = 'Upgrade';\n            btn.disabled = false;\n            btn.onclick = function(e) { // Use a function to ensure 'this' refers to the button\n                e.preventDefault();\n                const amount = parseFloat(btn.dataset.amount) || 0;\n                const period = btn.dataset.period || \"monthly\";\n                \n                showModal({\n                    message: `Proceed to upgrade to ${cardTier} for ‚Ç¶${amount.toLocaleString()} (${period})?`,\n                    showCancel: true,\n                    confirmText: 'Proceed to Payment',\n                    onConfirm: () => handlePayment(userId, cardTier, amount, period)\n                });\n            };\n        }\n    });\n}\n\nasync function initManageSubscriptionPage(userId) {\n    if (!userId) return;\n\n    const planInfoCard = document.getElementById('plan-info-card');\n    const changePlanBtn = document.getElementById('changePlanBtn');\n    const cancelContainer = document.getElementById('cancel-subscription-container');\n    const cancelBtn = document.getElementById('cancelSubscriptionBtn');\n    const autoRenewContainer = document.getElementById('auto-renew-container');\n    const viewPaymentHistoryBtn = document.getElementById('viewPaymentHistoryBtn');\n    const toggleAutoRenewBtn = document.getElementById('toggleAutoRenewBtn');\n\n    if (!planInfoCard || !changePlanBtn || !cancelContainer || !cancelBtn || !autoRenewContainer || !toggleAutoRenewBtn) return;\n\n    const TIER_BENEFITS = {\n        \"Free Tier\": [\"Basic Access\", \"Limited Features\", \"Ads Supported\"],\n        \"Premium Tier\": [\"Full Access\", \"No Ads\", \"Priority Support\"],\n        \"VIP / Elite Tier\": [\"All Premium Features\", \"Exclusive Content\", \"VIP Support\"],\n        \"VVIP / Pro Elite Tier\": [\"All VIP Features\", \"1-on-1 Coaching\", \"Early Access\"]\n    };\n\n    try {\n        const userRef = doc(db, \"users\", userId);\n        const snapshot = await getDoc(userRef);\n        const userData = snapshot.exists() ? snapshot.data() : {};\n\n        const tier = userData.tier || \"Free Tier\";\n        const expiry = userData.tierExpiry;\n        const autoRenew = userData.autoRenew ?? false; // Default to false if undefined\n        const benefits = TIER_BENEFITS[tier] || [];\n\n        if (tier === 'Free Tier') {\n            planInfoCard.innerHTML = `\n                <h2>You are on the Free Tier</h2>\n                <p>Upgrade your plan to unlock exclusive features, remove ads, and get priority support.</p>\n            `;\n            changePlanBtn.textContent = 'View Plans & Upgrade';\n            cancelContainer.style.display = 'none';\n            autoRenewContainer.style.display = 'none';\n        } else {\n            const benefitsList = benefits.map(b => `<li>${b}</li>`).join('');\n            const remainingDays = Math.ceil((new Date(expiry) - new Date()) / (1000 * 60 * 60 * 24));\n            const remainingDaysText = remainingDays > 0 ? `${remainingDays} day(s) remaining` : 'Expires today';\n\n            planInfoCard.innerHTML = `\n                <h2>Your Current Plan: ${tier}</h2>\n                <p><strong>Status:</strong> Active until ${new Date(expiry).toLocaleDateString()}</p>\n                <h3>Plan Benefits:</h3>\n                <ul>${benefitsList}</ul>\n                <div class=\"remaining-days-indicator\">${remainingDaysText}</div>\n            `;\n            changePlanBtn.textContent = 'Change Plan';\n            cancelContainer.style.display = 'block';\n            autoRenewContainer.style.display = 'block';\n\n            // Configure auto-renew button\n            if (autoRenew) {\n                toggleAutoRenewBtn.textContent = 'Cancel Auto-Renewal';\n                toggleAutoRenewBtn.classList.add('btn-danger');\n            } else {\n                toggleAutoRenewBtn.textContent = 'Enable Auto-Renewal';\n                toggleAutoRenewBtn.classList.remove('btn-danger');\n            }\n        }\n\n        changePlanBtn.onclick = () => loadPage('subscriptions', userId);\n\n        toggleAutoRenewBtn.onclick = async () => {\n            const newAutoRenewState = !autoRenew;\n            await updateDoc(doc(db, \"users\", userId), { autoRenew: newAutoRenewState });\n            const message = newAutoRenewState ? \"Auto-renewal has been enabled.\" : \"Auto-renewal has been cancelled.\";\n            showModal({ message });\n            await initManageSubscriptionPage(userId); // Refresh content\n        };\n\n        cancelBtn.onclick = () => {\n            const benefitsLost = TIER_BENEFITS[tier]\n                .filter(b => !TIER_BENEFITS[\"Free Tier\"].includes(b))\n                .map(b => `<li>${b}</li>`)\n                .join('');\n\n            const cancellationMessage = `\n                <p>Are you sure you want to cancel? You will lose access to these benefits:</p>\n                <ul style=\"text-align: left; padding-left: 20px; margin-top: 10px;\">${benefitsLost}</ul>\n            `;\n\n            showModal({\n                message: cancellationMessage,\n                showCancel: true,\n                confirmText: 'Yes, Cancel',\n                confirmClass: 'btn-danger',\n                onConfirm: async () => {\n                    await updateUserTier(userId, 'Free Tier', null, null);\n                    await addHistoryUnique(userId, \"Subscription cancelled\");\n                    showModal({ message: \"Your subscription has been successfully cancelled.\" });\n                    await initManageSubscriptionPage(userId); // Refresh the page content\n                }\n            });\n        };\n    } catch (error) {\n        console.error(\"Failed to load subscription management page:\", error);\n        planInfoCard.innerHTML = `<h2>Error</h2><p>Could not load your subscription details. Please try again later.</p>`;\n    }\n\n    if (viewPaymentHistoryBtn) {\n        viewPaymentHistoryBtn.onclick = () => {\n            sessionStorage.setItem('targetTab', 'transactions-tab');\n            loadPage('history', userId);\n        };\n    }\n}\n\n// ===== Tier Restrictions & Watchdog =====\nfunction enforceTierRestrictions() {\n    document.querySelectorAll(\"[data-tier]\").forEach(el => {\n        const requiredTier = el.dataset.tier;\n        if (!requiredTier) return;\n\n        const requiredTierName = CLASS_TO_TIER[requiredTier] || requiredTier;\n        const hasAccess = TIER_ORDER.indexOf(verifiedTier) >= TIER_ORDER.indexOf(requiredTierName);\n\n        // Handle navigation buttons separately: show/hide them completely.\n        if (el.matches('.bottom-nav button')) {\n            el.style.display = hasAccess ? 'flex' : 'none';\n        } else {\n            // For other elements (like cards), lock them with an overlay effect.\n            if (!hasAccess) {\n                el.style.opacity = \"0.8\";\n                el.dataset.locked = \"true\";\n                el.setAttribute(\"title\", `Requires ${requiredTierName} subscription`);\n            } else {\n                el.style.opacity = \"1\";\n                el.dataset.locked = \"false\";\n                el.removeAttribute(\"title\");\n            }\n        }\n    });\n}\n\nfunction startTierWatchdog(userId) {\n    if (!userId) return;\n    const userRef = doc(db, \"users\", userId);\n    onSnapshot(userRef, async (snapshot) => {\n        if (!snapshot.exists()) return;\n        const userData = snapshot.data();\n        const dbTier = userData.tier || \"Free Tier\";\n\n        // Always trust the database as the single source of truth.\n        if (verifiedTier !== dbTier) {\n            verifiedTier = dbTier;\n        }\n        enforceTierRestrictions();\n    });\n}\n\n// ===== Firebase Cloud Messaging (FCM) Functions =====\nasync function initFirebaseMessaging(userId) {\n    try {\n        const permission = await Notification.requestPermission();\n        if (permission === 'granted') {\n            console.log('Notification permission granted.');\n            // IMPORTANT: Replace the placeholder below with your actual VAPID key from the Firebase Console.\n            // Go to Project Settings > Cloud Messaging > Web configuration > Key pair.\n            const vapidKey = 'BM1G4B3crWgsfCGig6_i1crB3GAGBO8GAWlDVHP5jwTq1ltxb4S3e_IBJRUThKdHOeVf9VTmBNgFffDjwRNXeqU';\n            const fcmToken = await getToken(messaging, { vapidKey: vapidKey });\n\n            if (fcmToken) {\n                // Save the new token to the user's document\n                const userRef = doc(db, \"users\", userId);\n                await updateDoc(userRef, {\n                    fcmTokens: arrayUnion(fcmToken),\n                    notifications: true // Also enable the general flag\n                });\n                console.log('FCM Token saved:', fcmToken);\n                showModal({ message: 'Push notifications enabled successfully!' });\n            } else {\n                console.log('No registration token available. Request permission to generate one.');\n                showModal({ \n                    message: 'Unable to set up push notifications. Please try refreshing the page.', \n                    confirmClass: 'btn-warning' \n                });\n            }\n        } else if (permission === 'denied') {\n            console.log('Notification permission denied.');\n            // If permission is denied, ensure the toggle is off\n            const userRef = doc(db, \"users\", userId);\n            await updateDoc(userRef, { notifications: false });\n            const toggle = document.getElementById('predictionAlertsToggle');\n            if (toggle) toggle.checked = false;\n            \n            showModal({ \n                message: 'Push notifications are blocked in your browser. To enable them, click the notification icon in your browser\\'s address bar and allow notifications for this site.', \n                confirmClass: 'btn-warning',\n                confirmText: 'Got it'\n            });\n        } else {\n            console.log('Notification permission default - user dismissed the prompt.');\n            showModal({ \n                message: 'Push notifications were not enabled. You can enable them later in your profile settings.', \n                confirmClass: 'btn-warning' \n            });\n        }\n    } catch (error) {\n        console.error('Error setting up push notifications:', error);\n        let errorMessage = 'Failed to set up push notifications. This feature may not be supported on your device.';\n        \n        if (error.code === 'messaging/failed-service-worker-registration') {\n            errorMessage = 'Failed to register service worker for notifications. Please refresh the page and try again.';\n        } else if (error.code === 'messaging/unsupported-browser') {\n            errorMessage = 'Push notifications are not supported in your browser.';\n        } else if (error.code === 'messaging/permission-blocked') {\n            errorMessage = 'Notification permissions are blocked. Please enable them in your browser settings.';\n        }\n        \n        showModal({ message: errorMessage, confirmClass: 'btn-warning' });\n        \n        // Ensure the toggle is off on error\n        const toggle = document.getElementById('predictionAlertsToggle');\n        if (toggle) toggle.checked = false;\n    }\n\n    // Handle foreground messages\n    onMessage(messaging, (payload) => {\n        console.log('Message received in foreground.', payload);\n        showModal({\n            message: `${payload.notification.title}: ${payload.notification.body}`,\n            confirmText: 'Awesome!',\n        });\n    });\n}\n\n/**\n * Fetches and displays user statistics on the profile page.\n * @param {string} userId The current user's ID.\n * @param {object} userData The user's document data.\n */\nasync function displayUserStats(userId, userData) {\n    const memberSinceEl = document.getElementById('memberSinceStat');\n    const totalPredictionsEl = document.getElementById('totalPredictionsStat');\n    const winRateEl = document.getElementById('winRateStat');\n\n    if (!memberSinceEl || !totalPredictionsEl || !winRateEl) return;\n\n    // 1. Member Since\n    memberSinceEl.textContent = new Date(userData.createdAt).toLocaleDateString();\n\n    // 2. Predictions and Win Rate\n    const historyRef = collection(db, \"users\", userId, \"history\");\n    const predictionsQuery = query(historyRef, where(\"match\", \"!=\", null));\n    const querySnapshot = await getDocs(predictionsQuery);\n\n    let total = 0;\n    let wins = 0;\n    let losses = 0;\n\n    querySnapshot.forEach(doc => {\n        const data = doc.data();\n        total++;\n        if (data.result === 'win') wins++;\n        if (data.result === 'loss') losses++;\n    });\n\n    totalPredictionsEl.textContent = total;\n    const winnableGames = wins + losses;\n    winRateEl.textContent = winnableGames > 0 ? `${Math.round((wins / winnableGames) * 100)}%` : 'N/A';\n}\n// ===== Profile Functions =====\n/**\n * Initializes all interactive elements on the profile page.\n * @param {string} userId - The current user's ID.\n */\nasync function initProfilePage(userId) {\n    if (!userId) return;\n    await updateCurrentTierDisplay(userId); // Ensure tier info is loaded and displayed\n\n    const userRef = doc(db, \"users\", userId);\n    const snapshot = await getDoc(userRef);\n    const userData = snapshot.exists() ? snapshot.data() : {};\n\n    // 1. Avatar and User Info\n    const avatarContainer = document.getElementById('profileAvatarContainer');\n    const avatarUploadInput = document.getElementById('avatarUpload');\n    const userNameEl = document.getElementById('userName');\n    const editUsernameBtn = document.getElementById('editUsernameBtn');\n    const userEmailEl = document.getElementById('userEmail');\n\n    const displayAvatar = (url, name) => {\n        if (!avatarContainer) return;\n        if (url) {\n            avatarContainer.innerHTML = `<img src=\"${url}\" alt=\"Profile Picture\" class=\"profile-avatar-img\">`;\n        } else {\n            const initial = name ? name.charAt(0).toUpperCase() : 'U';\n            avatarContainer.innerHTML = `<span>${initial}</span>`;\n        }\n    };\n\n    displayAvatar(userData.photoURL, userData.username);\n    if (userNameEl) userNameEl.textContent = userData.username || 'User';\n    if (userEmailEl) userEmailEl.textContent = userData.email || auth.currentUser?.email || 'N/A';\n\n    if (avatarContainer && avatarUploadInput) {\n        avatarContainer.addEventListener('click', () => avatarUploadInput.click());\n\n        avatarUploadInput.addEventListener('change', async (e) => {\n            const file = e.target.files[0];\n            if (!file) return;\n\n            // Validate file type and size\n            const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n            const maxSize = 5 * 1024 * 1024; // 5MB\n\n            if (!allowedTypes.includes(file.type)) {\n                showModal({ \n                    message: 'Please select a valid image file (JPG, PNG, GIF, or WebP).', \n                    confirmClass: 'btn-danger' \n                });\n                e.target.value = ''; // Clear the input\n                return;\n            }\n\n            if (file.size > maxSize) {\n                showModal({ \n                    message: 'Image file is too large. Please choose a file smaller than 5MB.', \n                    confirmClass: 'btn-danger' \n                });\n                e.target.value = ''; // Clear the input\n                return;\n            }\n\n            showLoader();\n            try {\n                const storageRef = ref(storage, `profile_pictures/${userId}`);\n                const uploadResult = await uploadBytes(storageRef, file);\n                const downloadURL = await getDownloadURL(uploadResult.ref);\n\n                await updateDoc(userRef, { photoURL: downloadURL });\n                displayAvatar(downloadURL, userData.username);\n                await addHistoryUnique(userId, 'Updated profile picture');\n                showModal({ message: 'Profile picture updated successfully!' });\n            } catch (error) {\n                console.error(\"Avatar upload failed:\", error);\n                let errorMessage = 'Failed to upload image. Please try again.';\n                \n                if (error.code === 'storage/unauthorized') {\n                    errorMessage = 'You do not have permission to upload images. Please contact support.';\n                } else if (error.code === 'storage/canceled') {\n                    errorMessage = 'Image upload was cancelled.';\n                } else if (error.code === 'storage/quota-exceeded') {\n                    errorMessage = 'Storage quota exceeded. Please contact support.';\n                } else if (error.message && error.message.includes('network')) {\n                    errorMessage = 'Network error. Please check your connection and try again.';\n                }\n                \n                showModal({ message: errorMessage, confirmClass: 'btn-danger' });\n                e.target.value = ''; // Clear the input on error\n            } finally {\n                hideLoader();\n            }\n        });\n    }\n\n    if (editUsernameBtn && userNameEl) {\n        editUsernameBtn.addEventListener('click', () => {\n            showModal({\n                message: 'Enter your new username:',\n                showCancel: true,\n                confirmText: 'Save',\n                inputType: 'text',\n                inputValue: userNameEl.textContent,\n                onConfirm: async (newUsername) => {\n                    if (newUsername && newUsername.trim() !== '' && newUsername !== userNameEl.textContent) {\n                        const trimmedUsername = newUsername.trim();\n                        \n                        // Validate username length and characters\n                        if (trimmedUsername.length < 2 || trimmedUsername.length > 30) {\n                            showModal({ \n                                message: 'Username must be between 2 and 30 characters long.', \n                                confirmClass: 'btn-danger' \n                            });\n                            return;\n                        }\n                        \n                        if (!/^[a-zA-Z0-9_\\-\\s]+$/.test(trimmedUsername)) {\n                            showModal({ \n                                message: 'Username can only contain letters, numbers, spaces, hyphens, and underscores.', \n                                confirmClass: 'btn-danger' \n                            });\n                            return;\n                        }\n\n                        showLoader();\n                        try {\n                            await updateDoc(userRef, { username: trimmedUsername });\n                            await auth.currentUser.updateProfile({ displayName: trimmedUsername });\n                            await addHistoryUnique(userId, `Username changed to ${trimmedUsername}`);\n                            userNameEl.textContent = trimmedUsername;\n                            showModal({ message: 'Username updated successfully!' });\n                        } catch (error) {\n                            console.error(\"Username update failed:\", error);\n                            let errorMessage = 'Failed to update username. Please try again.';\n                            \n                            if (error.code === 'firestore/permission-denied') {\n                                errorMessage = 'You do not have permission to update your username.';\n                            } else if (error.message && error.message.includes('network')) {\n                                errorMessage = 'Network error. Please check your connection and try again.';\n                            }\n                            \n                            showModal({ message: errorMessage, confirmClass: 'btn-danger' });\n                        } finally {\n                            hideLoader();\n                        }\n                    }\n                }\n            });\n        });\n    }\n\n    // Display User Stats\n    await displayUserStats(userId, userData);\n\n    // 2. Dark Mode Toggle\n    const darkToggle = document.getElementById(\"darkModeToggle\");\n    if (darkToggle) {\n        darkToggle.checked = localStorage.getItem('darkMode') === 'true';\n        darkToggle.addEventListener(\"change\", () => {\n            const isDark = darkToggle.checked;\n            applyTheme(isDark);\n            localStorage.setItem('darkMode', isDark);\n        });\n    }\n\n    // Background animation toggle removed - animation is now only on auth pages\n\n    // 3. Notification Toggle\n    const predictionAlertsToggle = document.getElementById(\"predictionAlertsToggle\");\n    if (predictionAlertsToggle) {\n        // The card is hidden by CSS/JS, but we set the state anyway\n        predictionAlertsToggle.checked = userData.notifications ?? false;\n        predictionAlertsToggle.addEventListener(\"change\", async () => {\n            if (predictionAlertsToggle.checked) {\n                await initFirebaseMessaging(userId); // Request permission and get token\n            }\n        });\n    }\n\n    // 4. Referral Program Button\n    const referralBtn = document.getElementById(\"referralBtn\");\n    if (referralBtn) {\n        referralBtn.onclick = (e) => {\n            e.preventDefault();\n            loadPage(\"referral\", userId);\n        };\n    }\n\n    // 4. Manage Subscription Button\n    const manageBtn = document.getElementById(\"manageSubscription\");\n    if (manageBtn) manageBtn.onclick = (e) => {\n        e.preventDefault(); // Prevent default link behavior\n        loadPage(\"manage-subscription\", userId);\n    };\n\n    // 5. Change Password Button\n    const changePasswordBtn = document.getElementById('changePasswordBtn');\n    if (changePasswordBtn) {\n        changePasswordBtn.onclick = () => {\n            showModal({\n                message: \"Enter your current password to continue:\",\n                inputType: 'password',\n                inputPlaceholder: 'Current Password',\n                showCancel: true,\n                confirmText: 'Verify',\n                onConfirm: async (currentPassword) => {\n                    if (!currentPassword) return;\n                    showLoader();\n                    try {\n                        const credential = EmailAuthProvider.credential(currentUser.email, currentPassword);\n                        await reauthenticateWithCredential(currentUser, credential);\n                        \n                        // Re-authentication successful, now ask for the new password\n                        hideLoader();\n                        showModal({\n                            message: 'Enter your new password:',\n                            inputType: 'password',\n                            inputPlaceholder: 'New Password',\n                            showCancel: true,\n                            confirmText: 'Save New Password',\n                            onConfirm: async (newPassword) => {\n                                if (newPassword && newPassword.length >= 6) {\n                                    await updatePassword(currentUser, newPassword);\n                                    await addHistoryUnique(userId, 'Password updated');\n                                    showModal({ message: 'Password updated successfully!' });\n                                } else {\n                                    showModal({ message: 'Password must be at least 6 characters long.', confirmClass: 'btn-danger' });\n                                }\n                            }\n                        });\n                    } catch (error) {\n                        hideLoader();\n                        showModal({ message: `Error: ${error.message}`, confirmClass: 'btn-danger' });\n                    }\n                }\n            });\n        };\n    }\n\n    // 5. Logout Button\n    const logoutBtn = document.getElementById(\"logoutBtn\");\n    if (logoutBtn) logoutBtn.onclick = () => showModal({\n        message: \"Are you sure you want to logout?\",\n        showCancel: true,\n        confirmText: 'Logout',\n        confirmClass: 'btn-danger',\n        onConfirm: async () => {\n            await signOut(auth);\n            await addHistoryUnique(userId, \"Logged out\");\n            localStorage.clear(); // Clear storage on logout\n            window.location.href = 'Auth/login.html';\n        }\n    });\n\n    // 6. Reset Storage Button\n    const resetBtn = document.getElementById(\"resetStorage\");\n    if (resetBtn) resetBtn.onclick = () => showModal({\n        message: \"Are you sure you want to reset this device‚Äôs cached data?\",\n        showCancel: true,\n        confirmText: 'Reset',\n        confirmClass: 'btn-danger',\n        onConfirm: () => {\n            localStorage.clear();\n            location.reload();\n        }\n    });\n\n    // 7. Delete Account Button\n    const deleteAccountBtn = document.getElementById(\"deleteAccountBtn\");\n    if (deleteAccountBtn) {\n        deleteAccountBtn.onclick = () => {\n            showModal({\n                message: \"Are you absolutely sure you want to delete your account? This action is irreversible.\",\n                showCancel: true,\n                confirmText: \"I Understand, Continue\",\n                confirmClass: 'btn-danger',\n                onConfirm: () => {\n                    showModal({\n                        message: 'To confirm, please type \"DELETE\" in the box below.',\n                        showCancel: true,\n                        confirmText: \"Delete My Account\",\n                        confirmClass: 'btn-danger',\n                        inputType: 'text',\n                        inputPlaceholder: 'DELETE',\n                        onConfirm: async (confirmationText) => {\n                            if (confirmationText === \"DELETE\") {\n                                showLoader();\n                                const currentUser = auth.currentUser;\n                                try {\n                                    // 1. Delete Firestore documents\n                                    await deleteDoc(doc(db, 'users', userId));\n                                    await deleteDoc(doc(db, 'subscriptions', userId));\n\n                                    // 2. Delete Firebase Auth user (requires recent login)\n                                    await currentUser.delete();\n\n                                    hideLoader();\n                                    localStorage.clear();\n                                    window.location.href = 'Auth/login.html';\n                                } catch (error) {\n                                    hideLoader();\n                                    showModal({ message: `Error: ${error.message}`, confirmClass: 'btn-danger' });\n                                }\n                            } else { showModal({ message: \"Incorrect confirmation text. Account was not deleted.\" }); }\n                        }\n                    });\n                }\n            });\n        };\n    }\n}\n\n/**\n * Initializes the referral page.\n * @param {string} userId - The current user's ID.\n */\nasync function initReferralPage(userId) {\n    console.log(\"InitReferralPage called with userId:\", userId);\n    if (!userId) {\n        console.error(\"No userId provided to initReferralPage\");\n        return;\n    }\n\n    const codeInput = document.getElementById('referralCodeInput');\n    const copyBtn = document.getElementById('copyReferralCodeBtn');\n    const referralListContainer = document.getElementById('referralListContainer');\n    const rewardsContainer = document.getElementById('rewardsContainer');\n\n    console.log(\"DOM elements found:\", { codeInput, copyBtn, referralListContainer, rewardsContainer });\n\n    if (!codeInput || !copyBtn || !referralListContainer) {\n        console.error(\"Required DOM elements not found\");\n        return;\n    }\n\n    try {\n        // 1. Get/Generate Referral Code\n        console.log(\"Fetching user document for userId:\", userId);\n        const userRef = doc(db, \"users\", userId);\n        const userSnap = await getDoc(userRef);\n        \n        if (!userSnap.exists()) {\n            console.error(\"Referral Page Error: User document not found.\");\n            referralListContainer.innerHTML = `<p>Error: Could not load your referral information.</p>`;\n            return;\n        }\n        \n        const userData = userSnap.data();\n        console.log(\"User data retrieved:\", userData);\n        let referralCode = userData.referralCode;\n\n        if (!referralCode) {\n            console.log(\"No referral code found, generating new one\");\n            referralCode = `REF-${userId.substring(0, 6).toUpperCase()}`;\n            await updateDoc(userRef, { referralCode });\n            console.log(\"Generated and saved referral code:\", referralCode);\n        }\n        \n        console.log(\"Setting referral code input:\", referralCode);\n        codeInput.value = referralCode;\n\n    // 2. Copy Button Logic\n    copyBtn.addEventListener('click', async () => {\n        const codeToCopy = codeInput.value.startsWith('REF-') ? codeInput.value.substring(4) : codeInput.value;\n        try {\n            await navigator.clipboard.writeText(codeToCopy);\n            copyBtn.textContent = 'Copied!';\n            copyBtn.classList.add('success'); // Optional: for styling\n        } catch (err) {\n            console.error('Failed to copy text: ', err);\n            copyBtn.textContent = 'Failed!';\n        } finally {\n            // Reset button text and style after 2 seconds\n            setTimeout(() => { copyBtn.textContent = 'Copy'; copyBtn.classList.remove('success'); }, 2000);\n        }\n    });\n\n    // 3. Share Button Logic\n    const shareWhatsAppBtn = document.getElementById('shareWhatsAppBtn');\n    const shareTwitterBtn = document.getElementById('shareTwitterBtn');\n    const shareGenericBtn = document.getElementById('shareGenericBtn');\n\n    const shareText = `Hey! I'm using StatWise for AI-powered sports predictions. Join using my referral code to get rewards: ${referralCode}`;\n    const shareUrl = window.location.origin; // Your site's main URL\n\n    if (shareGenericBtn) {\n        if (navigator.share) {\n            shareGenericBtn.style.display = 'inline-flex'; // Show button if API is supported\n            shareGenericBtn.addEventListener('click', async () => {\n                try {\n                    await navigator.share({\n                        title: 'Join me on StatWise!',\n                        text: shareText,\n                        url: shareUrl,\n                    });\n                } catch (error) {\n                    console.error('Error using Web Share API:', error);\n                }\n            });\n        } else {\n            shareGenericBtn.style.display = 'none'; // Hide button if not supported\n        }\n    }\n\n    if (shareWhatsAppBtn) {\n        shareWhatsAppBtn.addEventListener('click', () => {\n            const whatsappUrl = `https://api.whatsapp.com/send?text=${encodeURIComponent(shareText + ' ' + shareUrl)}`;\n            window.open(whatsappUrl, '_blank');\n        });\n    }\n\n    if (shareTwitterBtn) {\n        shareTwitterBtn.addEventListener('click', () => {\n            const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;\n            window.open(twitterUrl, '_blank');\n        });\n    }\n\n        // 4. Fetch and display list of referred users\n        console.log(\"Fetching referred users for userId:\", userId);\n        const referralsQuery = query(collection(db, \"users\"), where(\"referredBy\", \"==\", userId));\n        const querySnapshot = await getDocs(referralsQuery);\n        console.log(\"Referred users query result:\", querySnapshot.size, \"users found\");\n\n    if (!querySnapshot.empty) {\n        referralListContainer.innerHTML = ''; // Clear the placeholder\n        querySnapshot.forEach(doc => {\n            const referredUser = doc.data();\n            const card = document.createElement('div');\n            card.className = 'history-card';\n\n            const isSubscribed = referredUser.tier !== 'Free Tier';\n            const statusBadge = isSubscribed\n                ? `<span class=\"status-badge status-successful\">Subscribed</span>`\n                : `<span class=\"status-badge status-pending\">Joined</span>`;\n\n            card.innerHTML = `\n                <div class=\"history-title\">${referredUser.username}</div>\n                <p class=\"history-detail\">Status: ${statusBadge}</p>\n                <p class=\"history-time\">Joined on: ${new Date(referredUser.createdAt).toLocaleDateString()}</p>\n            `;\n            referralListContainer.appendChild(card);\n        });\n    } else {\n        referralListContainer.innerHTML = `<p>No referrals yet. Share your code to get started!</p>`;\n    }\n\n        // 5. Fetch and display rewards\n        if (rewardsContainer) {\n            console.log(\"Fetching rewards for userId:\", userId);\n            // Remove orderBy to avoid index requirement - we'll sort client-side instead\n            const rewardsQuery = query(collection(db, \"rewards\"), where(\"referrerId\", \"==\", userId));\n            const rewardsCountEl = document.getElementById('rewardsCount');\n\n            // Reset rewards display\n            if (rewardsCountEl) rewardsCountEl.textContent = '0';\n            const rewardsSnapshot = await getDocs(rewardsQuery);\n            console.log(\"Rewards query result:\", rewardsSnapshot.size, \"rewards found\");\n\n        if (!rewardsSnapshot.empty) {\n            rewardsContainer.innerHTML = ''; // Clear placeholder\n            \n            // Convert to array and sort client-side by createdAt (newest first)\n            const rewardsArray = [];\n            rewardsSnapshot.forEach(doc => {\n                const reward = doc.data();\n                reward.id = doc.id;\n                rewardsArray.push(reward);\n            });\n            \n            // Sort by createdAt (newest first)\n            rewardsArray.sort((a, b) => {\n                const aTime = a.createdAt?.toDate?.() || new Date(0);\n                const bTime = b.createdAt?.toDate?.() || new Date(0);\n                return bTime - aTime;\n            });\n            \n            rewardsArray.forEach(reward => {\n                const card = document.createElement('div');\n                card.className = 'history-card';\n\n                const statusBadge = reward.claimed\n                    ? `<span class=\"status-badge status-successful\">Claimed</span>`\n                    : `<span class=\"status-badge status-pending\">Pending</span>`;\n\n                card.innerHTML = `\n                    <div class=\"history-title\">\n                        ${reward.rewardDurationDays || 30}-Day ${reward.rewardTier || 'Premium'} Reward\n                    </div>\n                    <p class=\"history-detail\">From: ${reward.grantedByUsername || 'System'}</p>\n                    <p class=\"history-detail\">Status: ${statusBadge}</p>\n                    <p class=\"history-time\">Granted on: ${reward.createdAt ? new Date(reward.createdAt.toDate()).toLocaleDateString() : 'Unknown'}</p>\n                `;\n                rewardsContainer.appendChild(card);\n            });\n            if (rewardsCountEl) {\n                rewardsCountEl.textContent = rewardsSnapshot.size.toString();\n            }\n        } else {\n            rewardsContainer.innerHTML = `<p>No rewards earned yet. You'll get a reward when a referred user subscribes!</p>`;\n        }\n    } else {\n        console.log(\"rewardsContainer not found\");\n    }\n        \n    } catch (error) {\n        console.error(\"Error in initReferralPage:\", error);\n        if (referralListContainer) {\n            referralListContainer.innerHTML = `<p>Error loading referral page: ${error.message}</p>`;\n        }\n    }\n}\n\n// ===== Admin Function: Create Reward =====\nwindow.createRewardForUser = async function(referrerId, referredUsername, rewardTier = \"Premium\", rewardDurationDays = 30) {\n    try {\n        const rewardData = {\n            referrerId: referrerId,\n            grantedByUsername: referredUsername,\n            rewardTier: rewardTier,\n            rewardDurationDays: rewardDurationDays,\n            claimed: false,\n            createdAt: serverTimestamp(),\n            type: \"referral_bonus\"\n        };\n\n        const rewardRef = await addDoc(collection(db, \"rewards\"), rewardData);\n        console.log(\"Reward created with ID:\", rewardRef.id);\n        \n        // Also log this action\n        if (referrerId) {\n            const activityRef = collection(db, \"users\", referrerId, \"history\");\n            await addDoc(activityRef, {\n                action: `Referral reward granted: ${rewardDurationDays}-day ${rewardTier}`,\n                createdAt: serverTimestamp(),\n                creatorId: \"admin\"\n            });\n        }\n        \n        return rewardRef.id;\n    } catch (error) {\n        console.error(\"Error creating reward:\", error);\n        throw error;\n    }\n};\n\n// ===== Admin Function: Grant Subscription =====\nwindow.grantSubscription = async function(userId, tier, durationDays = 30) {\n    try {\n        const endDate = new Date();\n        endDate.setDate(endDate.getDate() + durationDays);\n        \n        // Update user tier\n        const userRef = doc(db, \"users\", userId);\n        await updateDoc(userRef, {\n            tier: tier,\n            subscriptionEnd: endDate\n        });\n        \n        // Update subscription document\n        const subscriptionRef = doc(db, \"subscriptions\", userId);\n        await updateDoc(subscriptionRef, {\n            currentTier: tier,\n            endDate: endDate,\n            lastUpdated: serverTimestamp()\n        });\n        \n        // Log the activity\n        const activityRef = collection(db, \"users\", userId, \"history\");\n        await addDoc(activityRef, {\n            action: `Subscription granted: ${tier} for ${durationDays} days`,\n            createdAt: serverTimestamp(),\n            creatorId: \"admin\"\n        });\n        \n        console.log(`Granted ${tier} subscription to user ${userId} for ${durationDays} days`);\n        return true;\n    } catch (error) {\n        console.error(\"Error granting subscription:\", error);\n        throw error;\n    }\n};\n\n// ===== Save AI Prediction =====\nasync function savePredictionToDB(userId, prediction) {\n    if (!userId) return;\n    try {\n        const historyRef = collection(db, \"users\", userId, \"history\");\n        await addDoc(historyRef, {\n            match: prediction.match || \"Unknown Match\",\n            prediction: prediction.prediction || prediction.pick || \"-\",\n            odds: prediction.odds || \"-\",\n            confidence: prediction.confidence || \"-\",\n            result: prediction.result || \"pending\",\n            createdAt: serverTimestamp()\n        });\n    } catch (err) {\n        console.error(\"Failed to save prediction to DB:\", err);\n    }\n}\n\n// ===== Clean Predictions Older Than 7 Days =====\nasync function cleanupOldPredictions(userId) {\n    if (!userId) return;\n\n    const historyRef = collection(db, \"users\", userId, \"history\");\n    const snapshot = await getDocs(historyRef);\n    const now = Date.now();\n    const sevenDaysMs = 7 * 24 * 60 * 60 * 1000;\n\n    snapshot.forEach(docu => {\n        const data = docu.data();\n        if (data.match) {\n            const createdAtMs = data.createdAt?.toMillis?.() || 0;\n            if (now - createdAtMs > sevenDaysMs) {\n                deleteDoc(doc(db, \"users\", userId, \"history\", docu.id));\n            }\n        }\n    });\n}\n\n// ===== Fetch History =====\nasync function fetchHistory(userId) {\n    if (!userId) return;\n    showLoader();\n \n    const predictionsContainer = document.querySelector(\"#predictions-tab .history-container\");\n    const accountContainer = document.querySelector(\"#account-tab .history-container\");\n    const transactionsContainer = document.querySelector(\"#transactions-tab .history-container\");\n \n    if (!predictionsContainer || !accountContainer || !transactionsContainer) {\n        hideLoader();\n        return;\n    }\n \n    // Clear containers\n    predictionsContainer.innerHTML = \"\";\n    accountContainer.innerHTML = \"\";\n    transactionsContainer.innerHTML = \"\";\n \n    await cleanupOldPredictions(userId);\n \n    try {\n        // 1. Fetch Account & Prediction History\n        const historyRef = collection(db, \"users\", userId, \"history\");\n        const q = query(historyRef, orderBy(\"createdAt\", \"desc\"));\n        const historySnapshot = await getDocs(q);\n \n        let hasPredictions = false;\n        let hasAccountActions = false;\n \n        if (!historySnapshot.empty) {\n            historySnapshot.forEach(docu => {\n                const data = docu.data();\n                const card = document.createElement(\"div\");\n                card.className = \"history-card\";\n \n                if (data.match) {\n                    hasPredictions = true;\n                    const resultClass = (data.result || \"pending\").toLowerCase();\n                    card.innerHTML = `\n                        <h2 class=\"history-title\">${data.match}</h2>\n                        <p class=\"history-detail\">Pick: ${data.prediction || data.pick || \"-\"}</p>\n                        <p class=\"history-detail\">Odds: ${data.odds || \"-\"}</p>\n                        <p class=\"history-detail\">Confidence: ${data.confidence || \"-\"}</p>\n                        <p class=\"history-time\">${formatTimestamp(data.createdAt)}</p>\n                        <span class=\"history-result ${resultClass}\">${(data.result || \"PENDING\").toUpperCase()}</span>\n                    `;\n                    predictionsContainer.appendChild(card);\n                } else if (data.action) {\n                    hasAccountActions = true;\n                    card.innerHTML = `\n                        <p><strong>Action:</strong> ${data.action}</p>\n                        <p><strong>IP:</strong> ${data.ip || \"Unknown\"}</p>\n                        <p><small>${formatTimestamp(data.createdAt)}</small></p>\n                    `;\n                    accountContainer.appendChild(card);\n                }\n            });\n        }\n \n        if (!hasPredictions) predictionsContainer.innerHTML = \"<p>No predictions yet.</p>\";\n        if (!hasAccountActions) accountContainer.innerHTML = \"<p>No account activity yet.</p>\";\n \n        // 2. Fetch Transaction History\n        const subRef = doc(db, \"subscriptions\", userId);\n        const subSnap = await getDoc(subRef);\n \n        if (subSnap.exists() && subSnap.data().transactions?.length > 0) {\n            const transactions = subSnap.data().transactions\n                .sort((a, b) => (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0)); // Sort newest first\n \n            transactions.forEach(tx => {\n                const card = document.createElement(\"div\");\n                card.className = \"history-card\";\n                const statusClass = (tx.status || \"unknown\").toLowerCase();\n                card.innerHTML = `\n                    <h2 class=\"history-title\">${tx.description}</h2>\n                    <p class=\"history-detail\">Amount: ${tx.currency} ${tx.amount.toLocaleString()}</p>\n                    <p class=\"history-detail\">Status: <span class=\"status-badge status-${statusClass}\">${tx.status}</span></p>\n                    <p class=\"history-detail\">ID: ${tx.transactionId}</p>\n                    <p class=\"history-time\">${formatTimestamp(tx.createdAt)}</p>\n                `;\n                transactionsContainer.appendChild(card);\n            });\n        } else {\n            transactionsContainer.innerHTML = \"<p>No transactions found.</p>\";\n        }\n    } catch (err) {\n        console.error(\"Failed to fetch history:\", err);\n        if (predictionsContainer) predictionsContainer.innerHTML = \"<p>Error loading history.</p>\";\n        if (accountContainer) accountContainer.innerHTML = \"<p>Error loading history.</p>\";\n        if (transactionsContainer) transactionsContainer.innerHTML = \"<p>Error loading history.</p>\";\n    } finally {\n        hideLoader();\n    }\n}\n\n/**\n * Initializes a pull-to-refresh feature on a container.\n * This should be called once. The feature is activated/deactivated\n * by setting `container.dataset.pullToRefreshActive = 'true'/'false'`.\n * @param {HTMLElement} container The scrollable element.\n * @param {Function} onRefresh A function that returns a promise, to be called on refresh.\n */\nfunction initPullToRefresh(container, onRefresh) {\n    let startY = 0;\n    let isDragging = false;\n    let pullDistance = 0;\n    let animationFrameId = null;\n    const pullThreshold = 85; // Pixels to pull before refresh triggers\n\n    // Create or find the refresh indicator in the BODY\n    const refreshIndicator = document.getElementById('refresh-indicator');\n    if (!refreshIndicator) {\n        refreshIndicator = document.createElement('div');\n        refreshIndicator.id = 'refresh-indicator';\n        refreshIndicator.innerHTML = `<span>&#x21bb;</span>`; // Refresh icon\n        document.body.appendChild(refreshIndicator);\n    }\n\n    const resetIndicator = () => {\n        refreshIndicator.classList.add('transitioning');\n        refreshIndicator.style.transform = 'translateX(-50%) scale(0)';\n        refreshIndicator.style.opacity = '0';\n        refreshIndicator.classList.remove('refreshing');\n        // Remove transition after animation so next pull is instant\n        setTimeout(() => {\n            refreshIndicator.classList.remove('transitioning');\n        }, 300); // Match CSS transition duration\n    };\n\n    container.addEventListener('touchstart', (e) => {\n        if (container.dataset.pullToRefreshActive !== 'true' || container.scrollTop !== 0) {\n            isDragging = false;\n            return;\n        }\n        isDragging = true;\n        startY = e.touches[0].pageY;\n        pullDistance = 0;\n        refreshIndicator.classList.remove('transitioning');\n    }, { passive: true });\n\n    const updateIndicator = () => {\n        const pullRatio = Math.min(pullDistance / pullThreshold, 1);\n        refreshIndicator.style.opacity = pullRatio;\n        refreshIndicator.style.transform = `translateX(-50%) scale(${pullRatio}) rotate(${pullDistance * 2.5}deg)`;\n        animationFrameId = null; // Allow next frame to be requested\n    };\n\n    container.addEventListener('touchmove', (e) => {\n        if (!isDragging) return;\n\n        const currentY = e.touches[0].pageY;\n        const newPullDistance = currentY - startY;\n\n        if (newPullDistance > 0) {\n            // Prevent the browser's overscroll-bounce effect on mobile\n            e.preventDefault();\n            pullDistance = newPullDistance;\n\n            // Schedule a single update for the next animation frame\n            if (!animationFrameId) {\n                animationFrameId = requestAnimationFrame(updateIndicator);\n            }\n        } else {\n            // If user starts scrolling up, stop the pull-to-refresh gesture\n            isDragging = false;\n        }\n    }, { passive: false }); // passive:false is needed for preventDefault()\n\n    container.addEventListener('touchend', async (e) => {\n        if (!isDragging) return;\n        isDragging = false;\n        if (animationFrameId) {\n            cancelAnimationFrame(animationFrameId);\n            animationFrameId = null;\n        }\n\n        if (pullDistance >= pullThreshold) {\n            // User pulled enough, trigger refresh\n            refreshIndicator.classList.add('transitioning');\n            refreshIndicator.style.transform = 'translateX(-50%) scale(1)';\n            refreshIndicator.classList.add('refreshing');\n            \n            try {\n                await onRefresh();\n            } finally {\n                // Once refresh is done, hide the indicator\n                resetIndicator();\n            }\n        } else {\n            // Didn't pull enough, just hide the indicator\n            resetIndicator();\n        }\n    });\n}\n\n// ===== Dynamic Page Loader =====\nasync function loadPage(page, userId, addToHistory = true) {\n    // Prevent rapid clicks from breaking the animation\n    if (main.classList.contains('page-transitioning')) return;\n    main.classList.add('page-transitioning');\n\n    // Show loader at the start of any page load\n    showLoader(); // Use the delayed loader for in-app navigation\n\n    // Only run the fade-out animation if there's existing content to transition from.\n    if (main.innerHTML.trim() !== '') {\n        // Animate the current content out\n        main.classList.add('page-fade-out');\n        await new Promise(resolve => setTimeout(resolve, 200)); // Match animation duration\n    }\n\n    try {\n        const response = await fetch(`Pages/${page}.html`);\n        if (!response.ok) throw new Error(`Page not found: ${page}`);\n        const html = await response.text();\n        const parser = new DOMParser();\n        const docu = parser.parseFromString(html, \"text/html\");\n        const pageMain = docu.querySelector(\"main\") || docu.body || docu;\n        main.innerHTML = pageMain.innerHTML;\n        main.dataset.pullToRefreshActive = 'false'; // Deactivate for all pages by default\n\n        // Define a single base URL for resolving relative asset paths.\n        // This works for both localhost (e.g., http://127.0.0.1:3000) and deployed environments.\n        const assetsBaseUrl = new URL('Pages/', window.location.href).href;\n\n        clearDynamicAssets();\n\n        docu.querySelectorAll(\"link[rel='stylesheet']\").forEach(link => {\n            const newLink = document.createElement(\"link\");\n            newLink.rel = \"stylesheet\";\n            // Resolve relative URLs against the base path, leave absolute URLs as is.\n            newLink.href = new URL(link.getAttribute('href'), assetsBaseUrl).href;\n            newLink.setAttribute(\"data-dynamic\", \"true\");\n            document.head.appendChild(newLink);\n        });\n\n        docu.querySelectorAll(\"style\").forEach(style => {\n            const newStyle = document.createElement(\"style\");\n            newStyle.textContent = style.textContent;\n            newStyle.setAttribute(\"data-dynamic\", \"true\");\n            document.head.appendChild(newStyle);\n        });\n\n        docu.querySelectorAll(\"script\").forEach(script => {\n            const newScript = document.createElement(\"script\");\n            if (script.src) {\n                // Resolve relative URLs against the base path.\n                newScript.src = new URL(script.getAttribute('src'), assetsBaseUrl).href;\n            } else {\n                newScript.textContent = script.textContent;\n            }\n            newScript.setAttribute(\"data-dynamic\", \"true\");\n            document.body.appendChild(newScript);\n        });\n\n        navButtons.forEach(btn => btn.classList.toggle(\"active\", btn.getAttribute(\"data-page\") === page));\n        localStorage.setItem(\"lastPage\", page);\n        if (addToHistory) history.pushState({ page }, \"\", `#${page}`);\n\n        // Page-specific init\n        if (page === \"subscriptions\") {\n            updateCurrentTierDisplay(userId);\n            attachSubscriptionButtons(userId);\n            initTabs(); // Use the generic tab handler\n        }\n        \n        // Remove any animated background elements from main app pages\n        const bgElement = document.querySelector('.animated-background');\n        if (bgElement) {\n            bgElement.remove();\n        }\n        if (page === \"manage-subscription\") {\n            await initManageSubscriptionPage(userId);\n        }\n        if (page === \"profile\") {\n            await initProfilePage(userId);\n        }\n        if (page === \"referral\") {\n            await initReferralPage(userId);\n        }\n        if (page === \"history\") {\n            await fetchHistory(userId);\n            initTabs(); // Use the generic tab handler\n            // After tabs are initialized, check for a target tab from session storage\n            const targetTabId = sessionStorage.getItem('targetTab');\n            if (targetTabId) {\n                const targetTabButton = document.querySelector(`.tab-btn[data-tab=\"${targetTabId}\"]`);\n                if (targetTabButton) {\n                    handleTabSwitch(targetTabButton);\n                }\n                sessionStorage.removeItem('targetTab'); // Clean up\n            }\n        }\n        if (page === \"insights\") {\n            // Placeholder for any future JS needed for the insights page\n            const cards = document.querySelectorAll('.insights-container .card');\n            cards.forEach((card, index) => {\n                card.style.animationDelay = `${index * 100}ms`;\n                card.classList.add('card-animation');\n            });\n        }\n        if (page === \"home\") {\n            main.dataset.pullToRefreshActive = 'true'; // Activate for home page\n            // No animated background on home page - only on auth pages\n\n            const cards = document.querySelectorAll('.prediction-card');\n            cards.forEach((card, index) => {\n                card.style.animationDelay = `${index * 100}ms`;\n                card.classList.add('card-animation');\n            });\n\n            const searchInput = document.getElementById(\"predictionSearch\");\n            const predictionsContainer = document.querySelector(\".predictions-container\");\n\n            if (searchInput && predictionsContainer) {\n                // Create a wrapper for the search input to enable ghost text\n                if (!searchInput.parentElement.classList.contains('search-wrapper')) {\n                    const parent = searchInput.parentNode;\n                    const wrapper = document.createElement('div');\n                    wrapper.className = 'search-wrapper';\n                    parent.replaceChild(wrapper, searchInput);\n\n                    const ghostEl = document.createElement('div');\n                    ghostEl.id = 'search-ghost-text';\n\n                    wrapper.appendChild(ghostEl); // Ghost text first for z-index stacking\n                    wrapper.appendChild(searchInput);\n                }\n\n                let noResultsEl = predictionsContainer.querySelector('.no-results-message');\n                if (!noResultsEl) {\n                    noResultsEl = document.createElement('p');\n                    noResultsEl.className = 'no-results-message';\n                    noResultsEl.textContent = 'No matches found.';\n                    predictionsContainer.appendChild(noResultsEl);\n                }\n\n                const originalCardElements = Array.from(predictionsContainer.querySelectorAll(\".prediction-card\"));\n\n                searchInput.addEventListener(\"input\", () => {\n                    const value = searchInput.value;\n                    const lowerCaseValue = value.toLowerCase();\n\n                    // 1. PARSE THE SEARCH QUERY\n                    const commandRegex = /\\/c\\d*|\\/odds|\\//g; // Allow /c without number for autocomplete\n                    const allCommands = lowerCaseValue.match(commandRegex) || [];\n                    const textQuery = lowerCaseValue.replace(commandRegex, '').replace(/\\s+/g, ' ').trim();\n\n                    const sortCommands = allCommands.filter(c => c === '/' || c === '/odds');\n                    const confidenceFilterCommand = allCommands.find(c => c.startsWith('/c'));\n                    const minConfidence = confidenceFilterCommand && confidenceFilterCommand.length > 2 ? parseInt(confidenceFilterCommand.substring(2), 10) : 0;\n\n                    const cards = Array.from(predictionsContainer.querySelectorAll(\".prediction-card\"));\n                    let visibleCount = 0;\n\n                    // 2. FILTER CARDS\n                    cards.forEach(card => {\n                        const title = card.querySelector(\".match-title\")?.textContent.toLowerCase() || '';\n                        const confidence = parseInt(card.querySelector('.confidence span')?.textContent.match(/\\d+/)?.[0] || '0', 10);\n\n                        const textMatch = !textQuery || title.includes(textQuery);\n                        const confidenceMatch = !confidenceFilterCommand || confidence >= minConfidence;\n\n                        const shouldShow = textMatch && confidenceMatch;\n                        card.style.display = shouldShow ? \"block\" : \"none\";\n                        if (shouldShow) visibleCount++;\n                    });\n\n                    // 3. SORT VISIBLE CARDS\n                    if (sortCommands.length > 0) {\n                        const visibleCards = cards.filter(card => card.style.display === 'block');\n                        visibleCards.sort((a, b) => {\n                            let sortResult = 0;\n                            for (const command of sortCommands) {\n                                if (sortResult !== 0) break;\n                                if (command === '/odds') { // Sort by highest odds\n                                    const oddsA = parseFloat(a.querySelector('.odds')?.textContent.match(/[\\d.]+/)?.[0] || '0');\n                                    const oddsB = parseFloat(b.querySelector('.odds')?.textContent.match(/[\\d.]+/)?.[0] || '0');\n                                    sortResult = oddsB - oddsA;\n                                } else if (command === '/') { // Sort by highest confidence\n                                    const confidenceA = parseInt(a.querySelector('.confidence span')?.textContent.match(/\\d+/)?.[0] || '0', 10);\n                                    const confidenceB = parseInt(b.querySelector('.confidence span')?.textContent.match(/\\d+/)?.[0] || '0', 10);\n                                    sortResult = confidenceB - confidenceA;\n                                }\n                            }\n                            return sortResult;\n                        });\n                        visibleCards.forEach(card => predictionsContainer.appendChild(card));\n                    } else if (value.trim() === '') {\n                        // 4. RESTORE ORIGINAL ORDER IF SEARCH IS EMPTY\n                        originalCardElements.forEach(card => predictionsContainer.appendChild(card));\n                    }\n\n                    // 5. UPDATE UI (No Results Message & Autocomplete)\n                    noResultsEl.style.display = visibleCount === 0 && value.trim() !== '' ? 'block' : 'none';\n\n                    const ghostEl = document.getElementById('search-ghost-text');\n                    if (ghostEl && value) { // Only show suggestions if there's input\n                        let suggestion = '';\n                        const commandsInValue = value.match(commandRegex) || [];\n                        const textInValue = value.replace(commandRegex, '').trim();\n\n                        // 1. Command Autocomplete\n                        const lastChar = value.slice(-1);\n                        const lastWord = value.split(' ').pop();\n\n                        if (lastChar === '/') {\n                            suggestion = value + 'odds';\n                        } else if (lastWord.startsWith('/') && '/odds'.startsWith(lastWord) && lastWord !== '/odds') {\n                            suggestion = value.substring(0, value.lastIndexOf(lastWord)) + '/odds';\n                        } else if (lastWord === '/c') {\n                            suggestion = value + '75';\n                        }\n\n                        // 2. Text Autocomplete (only if no command is being suggested)\n                        if (textQuery) {\n                            const allTitles = originalCardElements.map(card => card.querySelector('.match-title')?.textContent || '');\n                            // Find a title that starts with the query, otherwise one that includes it.\n                            let matchedTitle = allTitles.find(title => title.toLowerCase().startsWith(textQuery));\n\n                            if (matchedTitle) {\n                                // Reconstruct suggestion, preserving commands\n                                suggestion = commandsInValue.join(' ') + ' ' + matchedTitle;\n                            }\n                        }\n\n                        ghostEl.textContent = suggestion;\n                    } else if (ghostEl) {\n                        ghostEl.textContent = ''; // Clear suggestion on empty input\n                    }\n                });\n            }\n        }\n\n        enforceTierRestrictions();\n\n        // Reset scroll position for the new page\n        main.scrollTop = 0;\n\n    } catch (error) {\n        console.error(`Failed to load page ${page}:`, error);\n        let errorMessage = `Unable to load the ${page} page right now.`;\n        let retryButton = '';\n        \n        if (error.name === 'TypeError' || error.message.includes('network')) {\n            errorMessage = `There was a network issue. Please check your connection and try again.`;\n            retryButton = `<button onclick=\"loadPage('${page}', '${userId || ''}', false)\" class=\"button\" style=\"margin-top: 10px;\">Try Again</button>`;\n        }\n        \n        main.innerHTML = `\n            <div class=\"error-container\">\n                <h1 class=\"error-title\">Oops!</h1>\n                <h2 class=\"error-subtitle\">Something went wrong</h2>\n                <p class=\"error-message\">${errorMessage}</p>\n                ${retryButton}\n                <a href=\"#\" onclick=\"loadPage('home', '${userId || ''}', false); return false;\" class=\"button\">Go to Homepage</a>\n            </div>\n        `;\n    } finally {\n        // Animate the new content in\n        main.classList.remove('page-fade-out');\n        main.classList.add('page-fade-in'); // Start animation\n\n        // The loader is hidden after a short, fixed delay. This is more reliable\n        // than waiting for an animation event that might not fire on very fast loads.\n        setTimeout(() => {\n            hideLoader();\n            main.classList.remove('page-fade-in', 'page-transitioning');\n        }, 350); // A value slightly longer than the animation duration.\n    }\n}\n\n// ===== Navigation =====\nnavButtons.forEach(button => {\n    button.addEventListener(\"click\", () => {\n        const page = button.getAttribute(\"data-page\");\n        if (!page) return;\n        loadPage(page, auth.currentUser?.uid);\n    });\n});\n\n// ===== Browser Back/Forward =====\nwindow.addEventListener(\"popstate\", (e) => {\n    const page = e.state?.page || defaultPage;\n    loadPage(page, auth.currentUser?.uid, false);\n});\n\n// ===== Welcome Tour for New Users =====\nlet introJsLoaded = false;\n\nfunction loadIntroJsAssets() {\n    if (introJsLoaded) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n        // Load CSS\n        const cssLink = document.createElement('link');\n        cssLink.rel = 'stylesheet';\n        cssLink.href = 'https://unpkg.com/intro.js/minified/introjs.min.css';\n        document.head.appendChild(cssLink);\n\n        // Load JS\n        const script = document.createElement('script');\n        script.src = 'https://unpkg.com/intro.js/minified/intro.min.js';\n        script.onload = () => {\n            introJsLoaded = true;\n            resolve();\n        };\n        script.onerror = reject;\n        document.head.appendChild(script);\n    });\n}\n\nasync function startWelcomeTour(userId) {\n    try {\n        await loadIntroJsAssets();\n\n        const intro = introJs();\n        intro.setOptions({\n            steps: [\n                {\n                    title: 'Welcome to StatWise!',\n                    intro: 'Let\\'s take a quick tour of the main features.'\n                },\n                {\n                    element: document.querySelector('.search-container'),\n                    title: 'Search & Filter',\n                    intro: 'Quickly find matches or use commands like <strong>/odds</strong> to sort by the highest odds.'\n                },\n                {\n                    element: document.querySelector('.prediction-card'),\n                    title: 'Prediction Cards',\n                    intro: 'Each card gives you an AI-powered prediction, confidence level, and odds.'\n                },\n                {\n                    element: document.querySelector('.bottom-nav [data-page=\"history\"]'),\n                    title: 'Your History',\n                    intro: 'Track your past predictions, transactions, and account activity here.'\n                },\n                {\n                    element: document.querySelector('.bottom-nav [data-page=\"profile\"]'),\n                    title: 'Your Profile',\n                    intro: 'Manage your subscription, settings, and logout from your profile.'\n                }\n            ],\n            showStepNumbers: true,\n            exitOnOverlayClick: false,\n            doneLabel: 'Got it!'\n        });\n\n        intro.oncomplete(async () => {\n            await updateDoc(doc(db, \"users\", userId), { isNewUser: false });\n        });\n\n        intro.onexit(async () => {\n            await updateDoc(doc(db, \"users\", userId), { isNewUser: false });\n        });\n\n        intro.start();\n\n    } catch (error) {\n        console.error(\"Failed to start welcome tour:\", error);\n        // Ensure the flag is still set to false even if the tour fails to load\n        await updateDoc(doc(db, \"users\", userId), { isNewUser: false });\n    }\n}\n\n/**\n * Handles tab switching for components like the history page.\n * @param {HTMLElement} tabButton The tab button that was clicked.\n */\nfunction handleTabSwitch(tabButton) {\n    // Find the closest common ancestor for the tabs and content\n    const tabParent = tabButton.closest('.history-section, .subscription-section, main'); // Extendable\n    if (!tabParent) return;\n\n    // Don't do anything if the tab is already active\n    if (tabButton.classList.contains('active')) return;\n\n    const tabButtons = tabParent.querySelectorAll(\".tab-btn\");\n    const tabContents = tabParent.querySelectorAll(\".tab-content, .pricing-container\");\n\n    tabButtons.forEach(b => b.classList.remove(\"active\"));\n    tabButton.classList.add(\"active\");\n\n    tabContents.forEach(c => c.classList.remove(\"active\"));\n    const targetId = tabButton.dataset.tab;\n    const target = tabParent.querySelector(`#${targetId}`);\n    if (target) target.classList.add(\"active\");\n}\n\n/**\n * Initializes tab functionality for the current page.\n * This should be called after a page with tabs is loaded.\n */\nfunction initTabs() {\n    const tabContainer = document.querySelector('.tab-container');\n    if (!tabContainer) return;\n\n    tabContainer.addEventListener('click', (e) => {\n        const tabButton = e.target.closest('.tab-btn');\n        if (tabButton) {\n            handleTabSwitch(tabButton);\n        }\n    });\n}\n\n/**\n * Checks for any unclaimed referral rewards and applies them to the user's account.\n * This function is designed to be run for the currently logged-in user.\n * @param {string} userId The ID of the user (the referrer) to check rewards for.\n */\nasync function checkForAndClaimRewards(userId) {\n    const rewardsRef = collection(db, \"rewards\");\n    const q = query(rewardsRef, where(\"referrerId\", \"==\", userId), where(\"claimed\", \"==\", false));\n\n    try {\n        const querySnapshot = await getDocs(q);\n        if (querySnapshot.empty) {\n            return; // No rewards to claim\n        }\n\n        for (const rewardDoc of querySnapshot.docs) {\n            const rewardData = rewardDoc.data();\n\n            // 1. Apply the reward to the user's tier\n            const newExpiry = new Date();\n            newExpiry.setDate(newExpiry.getDate() + rewardData.rewardDurationDays);\n\n            await updateUserTier(userId, rewardData.rewardTier, 'reward', newExpiry.toISOString());\n\n            // 2. Mark the reward as claimed to prevent re-application\n            await updateDoc(doc(db, \"rewards\", rewardDoc.id), { claimed: true });\n\n            // 3. Notify the user\n            const message = `You've received a ${rewardData.rewardDurationDays}-day ${rewardData.rewardTier} reward because ${rewardData.grantedByUsername} subscribed!`;\n            showModal({ message });\n            await addHistoryUnique(userId, `Claimed referral reward from ${rewardData.grantedByUsername}`);\n            console.log(`Claimed and applied reward ${rewardDoc.id}`);\n        }\n    } catch (error) {\n        console.error(\"Error checking or claiming rewards:\", error);\n    }\n}\n\n// ===== Initial Auth Check =====\nlet authInitialized = false;\n\nconst handleUserAuthenticated = async (user) => {\n    try {\n        // Initialize client-side security measures first\n        initializeAppSecurity();\n\n        // Initialize core features that persist across pages\n        initPullToRefresh(main, async () => {\n            await loadPage('home', user.uid, false);\n        });\n\n        // Don't apply background animation on main page - it's now only for auth pages\n\n        // PRIORITY 1: Load the UI immediately to prevent blank screen\n        const pageToLoad = manageInitialPageLoad(user.uid, loadPage);\n\n        // PRIORITY 2: Handle user data setup in background (non-blocking)\n        setupUserDataBackground(user, pageToLoad);\n\n        // Global click handler for locked features\n        main.addEventListener('click', (e) => {\n            const lockedEl = e.target.closest('[data-locked=\"true\"]');\n            if (lockedEl) {\n                e.preventDefault();\n                e.stopPropagation();\n                showModal({\n                    message: `This feature is locked. Upgrade to access it.`,\n                    confirmText: 'View Plans',\n                    onConfirm: () => loadPage('subscriptions', user.uid)\n                });\n            }\n        });\n\n    } catch (error) {\n        console.error('Authentication setup error:', error);\n        // Even if setup fails, ensure user gets to homepage\n        manageInitialPageLoad(user.uid, loadPage);\n    }\n};\n\n// Background user data setup (non-blocking)\nconst setupUserDataBackground = async (user, pageToLoad) => {\n    try {\n        const userRef = doc(db, \"users\", user.uid);\n        const snapshot = await getDoc(userRef);\n        let userData = {};\n\n        if (!snapshot.exists()) {\n            const newUserData = {\n                username: user.displayName || \"User\",\n                email: user.email,\n                tier: \"Free Tier\",\n                tierExpiry: null,\n                photoURL: null,\n                notifications: true,\n                autoRenew: false,\n                createdAt: new Date().toISOString(),\n                lastLogin: new Date().toISOString(),\n                isNewUser: true\n            };\n            await setDoc(userRef, newUserData);\n            userData = newUserData;\n            // Non-blocking history logging\n            addHistoryUnique(user.uid, \"Signed up\").catch(err => \n                console.error(\"Failed to log signup:\", err)\n            );\n        } else {\n            userData = snapshot.data();\n            // Non-blocking updates\n            updateDoc(userRef, { lastLogin: new Date().toISOString() }).catch(err => \n                console.error(\"Failed to update login time:\", err)\n            );\n            addHistoryUnique(user.uid, \"Logged in\").catch(err => \n                console.error(\"Failed to log login:\", err)\n            );\n        }\n\n        // Set verified tier for UI\n        verifiedTier = userData.tier || \"Free Tier\";\n\n        // Non-blocking subscription check\n        checkExpiredSubscription(user.uid, userData);\n\n        // Start tier watchdog\n        startTierWatchdog(user.uid);\n\n        // Non-blocking rewards check\n        checkForAndClaimRewards(user.uid).catch(err => {\n            console.error(\"Failed to process rewards on startup:\", err);\n        });\n\n        // Check if the user is new to start the welcome tour\n        if (userData.isNewUser && pageToLoad === 'home') {\n            setTimeout(() => startWelcomeTour(user.uid), 1000);\n        }\n\n    } catch (error) {\n        console.error('Background user setup error:', error);\n        // Set default tier if database fails\n        verifiedTier = \"Free Tier\";\n    }\n};\n\n// Non-blocking subscription expiry check\nconst checkExpiredSubscription = async (userId, userData) => {\n    try {\n        if (userData.tier !== 'Free Tier' && userData.tierExpiry) {\n            const expiryDate = new Date(userData.tierExpiry);\n            if (new Date() > expiryDate) {\n                console.log(`User ${userId}'s subscription has expired. Downgrading.`);\n                const userRef = doc(db, \"users\", userId);\n                await updateDoc(userRef, {\n                    tier: 'Free Tier',\n                    tierExpiry: null,\n                    autoRenew: false\n                });\n                verifiedTier = \"Free Tier\";\n                addHistoryUnique(userId, \"Subscription expired, reverted to Free Tier.\").catch(err => \n                    console.error(\"Failed to log subscription expiry:\", err)\n                );\n            }\n        }\n    } catch (error) {\n        console.error('Subscription check error:', error);\n    }\n};\n\nshowLoader(); // Show loader immediately on script load\n\nconst unsubscribe = onAuthStateChanged(auth, async (user) => {\n    if (user) {\n        // User is signed in.\n        if (!authInitialized) {\n            authInitialized = true;\n            await handleUserAuthenticated(user);\n        }\n    } else {\n        // User is signed out.\n        if (!authInitialized) {\n            authInitialized = true;\n            // If after the initial check, there's no user, redirect to login.\n            window.location.href = 'Auth/login.html';\n        }\n    }\n});\n","size_bytes":85449},"manager.js":{"content":"// manager.js\n\n/**\n * Disables the right-click context menu to deter basic inspection.\n */\nfunction disableContextMenu() {\n    document.addEventListener('contextmenu', event => event.preventDefault());\n}\n\n/**\n * Disables common developer tools keyboard shortcuts.\n */\nfunction disableDevToolsShortcuts() {\n    document.addEventListener('keydown', function (e) {\n        // Block F12\n        if (e.keyCode === 123) {\n            e.preventDefault();\n        }\n        // Block Ctrl+Shift+I (or Cmd+Option+I on Mac)\n        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.keyCode === 73) {\n            e.preventDefault();\n        }\n        // Block Ctrl+Shift+J (or Cmd+Option+J on Mac)\n        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.keyCode === 74) {\n            e.preventDefault();\n        }\n        // Block Ctrl+U (or Cmd+Option+U on Mac)\n        if ((e.ctrlKey || e.metaKey) && e.keyCode === 85) {\n            e.preventDefault();\n        }\n    });\n}\n\n/**\n * Periodically clears the console and displays a warning message.\n * Note: This is a deterrent and can be bypassed by a determined user.\n */\nfunction runConsoleDeterrent() {\n    setInterval(() => {\n        console.clear();\n        console.log(\"%cInspecting this area is not allowed.\", \"color:red; font-size:16px;\");\n    }, 3000); // Runs every 3 seconds\n}\n\n/**\n * Initializes all client-side security measures.\n */\nexport function initializeAppSecurity() {\n    disableContextMenu();\n    disableDevToolsShortcuts();\n    runConsoleDeterrent();\n    console.log(\"Client-side security manager initialized.\");\n}\n\n/**\n * Determines the initial page to load and executes the loading function.\n * It checks if the main content area is empty and then decides the page\n * based on URL hash, localStorage, or a default value.\n * @param {string} userId - The current user's ID.\n * @param {function} loadPageCallback - The function to call to load the page, expecting (page, userId, addToHistory).\n */\nexport function manageInitialPageLoad(userId, loadPageCallback) {\n    const defaultPage = \"home\";\n\n    // Determine page load priority: URL hash > localStorage > default.\n    const initialHash = window.location.hash.substring(1);\n    const pageToLoad = initialHash || localStorage.getItem(\"lastPage\") || defaultPage;\n\n    // Load the page without adding a new entry to the browser's history.\n    loadPageCallback(pageToLoad, userId, false);\n    return pageToLoad;\n}","size_bytes":2420},"styles.css":{"content":"* {\n    margin: 0;\n    padding: 0;\n    text-decoration: none;\n    list-style-type: none;\n    font-family: \"Optimistic\";\n    box-sizing: border-box;\n}\n\n::-webkit-scrollbar {\n    display: none;\n}\n\n@font-face {\n    font-family: 'Optimistic';\n    src: url('./Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\n:root {\n    --header-height: 60px;\n    --nav-height: 60px;\n}\n\n/* ---------------- Body ---------------- */\nhtml {\n    background: #f4f5f7;\n    /* Light background */\n    color: #1c1c1e;\n    /* Dark text */\n    font-family: \"Optimistic\";\n    height: 100%;\n}\n\nbody {\n    /* Body will now inherit background and color from html */\n    font-family: \"Optimistic\";\n    height: 100%;\n    position: relative; /* Needed for animation container */\n    overflow-x: hidden; /* Prevent horizontal scroll from animation */\n}\n\n/* ---------------- Animated Background ---------------- */\n.animated-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background: linear-gradient(135deg, #f4f5f7 0%, #e8eaf6 100%);\n    overflow: hidden;\n}\n\n.animated-background::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background-image: \n        radial-gradient(circle at 20% 80%, rgba(14, 99, 156, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(76, 175, 80, 0.1) 0%, transparent 50%),\n        radial-gradient(circle at 40% 40%, rgba(255, 193, 7, 0.1) 0%, transparent 50%);\n    animation: floatingPattern 20s ease-in-out infinite;\n}\n\n.animated-background::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: \n        repeating-linear-gradient(\n            45deg,\n            transparent,\n            transparent 35px,\n            rgba(14, 99, 156, 0.03) 35px,\n            rgba(14, 99, 156, 0.03) 70px\n        );\n    animation: slidePattern 30s linear infinite;\n}\n\n@keyframes floatingPattern {\n    0%, 100% { transform: translate(0, 0) rotate(0deg); }\n    25% { transform: translate(-5px, -10px) rotate(1deg); }\n    50% { transform: translate(10px, 5px) rotate(-1deg); }\n    75% { transform: translate(-10px, 10px) rotate(0.5deg); }\n}\n\n@keyframes slidePattern {\n    0% { transform: translateX(0); }\n    100% { transform: translateX(70px); }\n}\n\n/* ---------------- Header ---------------- */\nheader {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: var(--header-height);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #ffffff;\n    color: #1c1c1e;\n    border-bottom: 1px solid #e0e0e0;\n    z-index: 1000;\n    padding: 8px 0;\n}\n\n.app-name {\n    font-size: 25px;\n    font-weight: bold;\n    color: #0e639c;\n    text-align: center;\n    width: 100%;\n}\n\n/* ---------------- Main ---------------- */\nmain {\n    position: relative;\n    top: var(--header-height);\n    padding: 16px;\n    padding-bottom: calc(var(--nav-height) + 20px);\n    min-height: calc(100vh - var(--header-height) - var(--nav-height));\n    overflow-y: auto;\n}\n\n/* ---------------- Page Transitions ---------------- */\n.page-fade-out {\n    animation: fadeOut 0.2s ease-out forwards;\n}\n\n.page-fade-in {\n    animation: fadeIn 0.3s ease-in forwards;\n}\n\n@keyframes fadeOut {\n    from {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* ---------------- Bottom Navigation ---------------- */\n.bottom-nav {\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n    background-color: #ffffff;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    padding: 8px 0;\n    z-index: 1000;\n    height: var(--nav-height);\n}\n\n.bottom-nav button {\n    background: none;\n    border: none;\n    color: #555;\n    font-size: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    cursor: pointer;\n}\n\n.bottom-nav .icon {\n    width: 22px;\n    height: 22px;\n    margin-bottom: 2px;\n    background-color: #555;\n    /* Default inactive color */\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    transition: background-color 0.3s ease;\n}\n\n.icon-home {\n    -webkit-mask-image: url(./Assets/Icons/house.svg);\n    mask-image: url(./Assets/Icons/house.svg);\n}\n\n.icon-history {\n    -webkit-mask-image: url(./Assets/Icons/bar-chart.svg);\n    mask-image: url(./Assets/Icons/bar-chart.svg);\n}\n\n.icon-subscriptions {\n    -webkit-mask-image: url(./Assets/Icons/gem.svg);\n    mask-image: url(./Assets/Icons/gem.svg);\n}\n\n.icon-profile {\n    -webkit-mask-image: url(./Assets/Icons/user.svg);\n    mask-image: url(./Assets/Icons/user.svg);\n}\n\n.icon-insights {\n    -webkit-mask-image: url(./Assets/Icons/insights.svg);\n    /* You need to add this icon */\n    mask-image: url(./Assets/Icons/insights.svg);\n}\n\n.icon-edit {\n    -webkit-mask-image: url(./Assets/Icons/edit.svg);\n    mask-image: url(./Assets/Icons/edit.svg);\n}\n\n/* Hide tier-gated nav buttons by default to prevent flash of content */\n.bottom-nav button[data-tier] {\n    display: none;\n}\n\n.bottom-nav button.active {\n    color: #0e639c;\n}\n\n.bottom-nav button.active .icon {\n    background-color: #0e639c;\n    /* Active color */\n}\n\n.bottom-nav button:hover .icon {\n    animation: shake 0.3s ease-in-out;\n}\n\n@keyframes shake {\n    0% {\n        transform: translateX(0);\n    }\n\n    25% {\n        transform: translateX(-3px);\n    }\n\n    50% {\n        transform: translateX(3px);\n    }\n\n    75% {\n        transform: translateX(-3px);\n    }\n\n    100% {\n        transform: translateX(0);\n    }\n}\n\n/* ---------------- Page Titles ---------------- */\n.page-title {\n    font-size: 20px;\n    margin-bottom: 12px;\n    font-weight: bold;\n    color: #0e639c;\n    text-align: center;\n}\n\n/* ---------------- Search Bar ---------------- */\n.search-container {\n    margin-bottom: 16px;\n}\n\n.search-wrapper {\n    position: relative;\n    background-color: #fff;\n    border-radius: 8px;\n    border: 1px solid #ccc;\n    transition: border-color 0.3s ease;\n}\n\n.search-wrapper:focus-within {\n    border-color: #0e639c;\n}\n\n#predictionSearch {\n    width: 100%;\n    padding: 10px 15px;\n    border: none;\n    background-color: transparent;\n    color: #333;\n    font-size: 14px;\n    position: relative;\n    z-index: 2;\n}\n\n#predictionSearch:focus {\n    outline: none;\n}\n\n#search-ghost-text {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 10px 15px;\n    font-size: 14px;\n    color: #ccc;\n    z-index: 1;\n    pointer-events: none;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\n#predictionSearch {\n    padding-right: 35px; /* Make space for clear button */\n}\n\n#search-clear-btn {\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    font-size: 22px;\n    color: #999;\n    cursor: pointer;\n    padding: 0 5px;\n    line-height: 1;\n    display: none; /* JS will toggle this */\n}\n\n/* ---------------- Cards ---------------- */\n.card {\n    background: #ffffff;\n    border-radius: 10px;\n    padding: 16px;\n    margin-bottom: 16px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n}\n\n/* ---------------- Subscription Cards ---------------- */\n.pricing-container {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\n    gap: 16px;\n}\n\n.subscription-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 20px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    transition: transform 0.2s ease, border 0.2s ease;\n}\n\n.subscription-card:hover {\n    transform: translateY(-4px);\n}\n\n.subscription-card.free {\n    border: 2px solid #4caf50;\n}\n\n.subscription-card.premium {\n    border: 2px solid #2196f3;\n}\n\n.subscription-card.vip {\n    border: 2px solid #9c27b0;\n}\n\n.subscription-card.vvip {\n    border: 2px solid #ff9800;\n}\n\n.subscription-card h2 {\n    font-size: 18px;\n    color: #0e639c;\n    margin-bottom: 8px;\n}\n\n.subscription-card .price {\n    font-size: 16px;\n    font-weight: bold;\n    margin: 8px 0;\n    color: #333;\n}\n\n.subscription-card ul {\n    padding: 0;\n    margin: 12px 0;\n    text-align: left;\n}\n\n.subscription-card ul li {\n    margin: 6px 0;\n    padding-left: 20px;\n    position: relative;\n    font-size: 14px;\n    color: #555;\n}\n\n.subscription-card ul li::before {\n    content: \"‚úî\";\n    color: #0e639c;\n    position: absolute;\n    left: 0;\n}\n\n.subscription-card .subscribe-btn {\n    margin-top: auto;\n    padding: 8px 16px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    text-decoration: none;\n    transition: background 0.3s ease;\n}\n\n.subscription-card .subscribe-btn:hover {\n    background: #0b4f7a;\n}\n\n/* Current Subscription Banner */\n.current-tier {\n    background: #ffffff;\n    border: 2px solid #0e639c;\n    border-radius: 10px;\n    padding: 12px 16px;\n    margin-bottom: 16px;\n    text-align: center;\n    font-size: 15px;\n    font-weight: bold;\n    color: #333;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n}\n\n.subscription-card.is-current-plan {\n    transform: scale(1.02);\n    box-shadow: 0 0 15px rgba(14, 99, 156, 0.5);\n}\n\n.current-tier strong {\n    color: #0e639c;\n}\n\n/* ---------------- Profile ---------------- */\n.profile-container {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    padding: 8px 0;\n}\n\n.profile-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 16px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n}\n\n.profile-card h2 {\n    font-size: 18px;\n    color: #0e639c;\n    margin-bottom: 4px;\n}\n\n.profile-card p {\n    font-size: 14px;\n    color: #666;\n    margin: 0;\n}\n\n/* Profile avatar / username display */\n.profile-header {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 16px;\n}\n\n.profile-avatar {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background: #444;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 28px;\n    font-weight: bold;\n    color: #fff;\n    border: 2px solid #0e639c;\n    cursor: pointer;\n    overflow: hidden;\n}\n\n.profile-avatar-img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n.tier-expiry-date {\n    font-size: 13px;\n    color: #555;\n    margin-top: 4px;\n    display: none;\n    /* Hidden by default */\n}\n\n.profile-username {\n    font-size: 20px;\n    font-weight: bold;\n    color: #111;\n}\n\n.profile-email {\n    font-size: 14px;\n    color: #666;\n}\n\n.username-container {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.edit-icon {\n    cursor: pointer;\n    width: 16px;\n    height: 16px;\n    background-color: #555;\n    transition: background-color 0.2s ease;\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    -webkit-mask-image: url(./Assets/Icons/edit.svg);\n    mask-image: url(./Assets/Icons/edit.svg);\n}\n\n.icon-referral {\n    -webkit-mask-image: url(./Assets/Icons/referral.svg);\n    mask-image: url(./Assets/Icons/referral.svg);\n}\n\n.edit-icon:hover {\n    background-color: #0e639c;\n}\n\n.dark-mode .edit-icon {\n    background-color: #d4d4d4; /* Standard dark mode inactive color */\n}\n\n/* Profile Stats */\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 16px;\n    text-align: center;\n    margin-top: 12px;\n}\n\n.stat-item {\n    display: flex;\n    flex-direction: column;\n}\n\n.stat-label {\n    font-size: 13px;\n    color: #666;\n    margin-bottom: 4px;\n}\n\n.stat-value {\n    font-size: 16px;\n    font-weight: bold;\n    color: #333;\n}\n\n.dark-mode .stat-label {\n    color: #bbb;\n}\n\n.dark-mode .stat-value {\n    color: #eee;\n}\n\n/* Profile Settings */\n.setting-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 0;\n}\n\n/* Profile Card Buttons */\n.profile-card button {\n    margin-top: 8px;\n    padding: 8px 16px;\n    border-radius: 8px;\n    color: #fff;\n    font-weight: bold;\n    border: none;\n    cursor: pointer;\n    transition: background 0.3s ease;\n}\n\n.danger-zone-buttons {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n#logoutBtn,\n#resetStorage {\n    background: #d9534f;\n}\n\n#logoutBtn:hover,\n#resetStorage:hover {\n    background: #c9302c;\n}\n\n/* Toggle Switch */\n.switch {\n    position: relative;\n    display: inline-block;\n    width: 50px;\n    height: 24px;\n}\n\n.switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: 0.4s;\n    border-radius: 34px;\n}\n\n.slider::before {\n    position: absolute;\n    content: \"\";\n    height: 18px;\n    width: 18px;\n    left: 3px;\n    bottom: 3px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n}\n\ninput:checked+.slider {\n    background-color: #0e639c;\n}\n\ninput:checked+.slider::before {\n    transform: translateX(26px);\n}\n\n\n\n/* ---------------- Modal ---------------- */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 2000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.6);\n    justify-content: center;\n    align-items: center;\n}\n\n.modal-content {\n    background: #ffffff;\n    color: #333;\n    padding: 20px;\n    border-radius: 12px;\n    width: 85%;\n    max-width: 400px;\n    text-align: center;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);\n}\n\n.modal-content input {\n    width: 100%;\n    padding: 10px;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    border-radius: 6px;\n}\n\n.modal-actions {\n    margin-top: 15px;\n    display: flex;\n    justify-content: space-around;\n    gap: 10px;\n}\n\n.modal-actions button {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    font-size: 14px;\n}\n\n.modal-actions .btn-secondary {\n    background: #6c757d;\n    color: white;\n}\n\n.modal-actions .btn-secondary:hover {\n    background: #5a6268;\n}\n\n.modal-actions .btn-primary {\n    background: #0e639c;\n    color: white;\n}\n\n.modal-actions .btn-primary:hover {\n    background: #0b4f7a;\n}\n\n.modal-actions .btn-danger {\n    background: #d9534f;\n    color: white;\n}\n\n.modal-actions .btn-danger:hover {\n    background: #c9302c;\n}\n\n/* ---------------- History Page ---------------- */\n/* History Container */\n.history-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n/* Shared Data Card Styles */\n.history-card,\n.prediction-card {\n    border: 2px solid;\n    border-color: #e0e0e0;\n    border-radius: 10px;\n    padding: 15px;\n    background-color: #ffffff;\n    color: #1c1c1e;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);\n}\n\n.history-title {\n    font-size: 1.2rem;\n    margin-bottom: 0.4rem;\n    color: #111;\n}\n\n.history-detail {\n    font-size: 1rem;\n    color: #444;\n}\n\n.history-time {\n    font-size: 0.9rem;\n    color: #777;\n    margin-bottom: 0.8rem;\n}\n\n/* Result Styles */\n.history-result {\n    margin-top: 0.6rem;\n    font-weight: bold;\n    padding: 4px 8px;\n    border-radius: 6px;\n    display: inline-block;\n}\n\n.history-result.win {\n    color: #4caf50;\n    border: 2px solid #4caf50;\n}\n\n.history-result.loss {\n    color: #f44336;\n    border: 2px solid #f44336;\n}\n\n.history-result.pending {\n    color: #ff9800;\n    border: 2px solid #ff9800;\n}\n\n/* Tab Content */\n.history-section .tab-content {\n    display: none;\n}\n\n.history-section .tab-content.active {\n    display: block;\n}\n\n/* ---------------- Tabs ---------------- */\n.tab-container,\n.history-tabs {\n    display: flex;\n    justify-content: center;\n    gap: 12px;\n    margin-bottom: 16px;\n}\n\n.tab-btn {\n    padding: 8px 20px;\n    border-radius: 8px;\n    border: 2px solid #0e639c;\n    background: #f1f3f5;\n    color: #0e639c;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.tab-btn.active {\n    background: #0e639c;\n    color: #fff;\n}\n\n.tab-btn:hover {\n    background: #0b4f7a;\n    color: #fff;\n    border-color: #0b4f7a;\n}\n\n/* Show/Hide containers */\n.pricing-container {\n    display: none;\n    /* hidden by default */\n}\n\n.pricing-container.active {\n    display: grid;\n}\n\n/* HomePage */\n.predictions-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.history-card:hover,\n.prediction-card:hover {\n    transition: transform 0.2s ease;\n    transform: translateY(-4px);\n}\n\n/* Match Title */\n.match-title {\n    font-size: 1.2rem;\n    margin-bottom: 0.4rem;\n    color: #111;\n}\n\n/* Prediction Details */\n.prediction-detail {\n    font-size: 1rem;\n    color: #444;\n}\n\n.odds {\n    font-size: 0.95rem;\n    margin: 0.2rem 0;\n    color: #e8590c;\n    /* Adjusted for light theme contrast */\n}\n\n.match-time {\n    font-size: 0.9rem;\n    color: #777;\n    margin-bottom: 0.8rem;\n}\n\n/* Confidence Section */\n.confidence {\n    margin-top: 0.6rem;\n}\n\n.confidence span {\n    display: block;\n    margin-bottom: 0.4rem;\n    font-size: 0.9rem;\n    color: #555;\n}\n\n.confidence-bar {\n    width: 100%;\n    height: 8px;\n    background: #e9ecef;\n    border-radius: 5px;\n    overflow: hidden;\n    margin-top: 5px;\n}\n\n.confidence-fill {\n    height: 100%;\n}\n\n/* High, Medium, Low confidence borders are fine as they are */\n\n/* High Confidence */\n.prediction-card.high-confidence {\n    border-color: #4caf50;\n    --tier-color: #4caf50;\n}\n\n.prediction-card.high-confidence .confidence-fill {\n    background: linear-gradient(90deg, #388e3c, #4caf50);\n}\n\n/* Medium Confidence */\n.prediction-card.medium-confidence {\n    border-color: #ff9800;\n    --tier-color: #ff9800;\n}\n\n.prediction-card.medium-confidence .confidence-fill {\n    background: linear-gradient(90deg, #f57c00, #ff9800);\n}\n\n/* Low Confidence */\n.prediction-card.low-confidence {\n    border-color: #f44336;\n    --tier-color: #f44336;\n}\n\n.prediction-card.low-confidence .confidence-fill {\n    background: linear-gradient(90deg, #d32f2f, #f44336);\n}\n\n/* AI Pick Styling */\n.ai-pick {\n    border: 2px solid var(--tier-color);\n    padding: 4px 8px;\n    border-radius: 6px;\n    font-weight: bold;\n    display: inline-block;\n    color: var(--tier-color);\n    /* optional: makes text match tier */\n}\n\n.card-animation {\n    animation: card-enter 0.4s ease-out forwards;\n}\n\n@keyframes card-enter {\n    from {\n        opacity: 0;\n        transform: translateY(15px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.dark-mode #search-clear-btn:hover {\n    color: #eee;\n}\n\n/* ---------------- Active Filters ---------------- */\n#active-filters-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    margin-bottom: 16px;\n    justify-content: center;\n}\n\n.filter-pill {\n    background-color: #e7f5ff;\n    color: #0e639c;\n    padding: 5px 10px;\n    border-radius: 16px;\n    font-size: 13px;\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n.filter-pill:hover {\n    background-color: #d0eaff;\n}\n\n.filter-pill .close-icon {\n    font-weight: bold;\n    font-size: 14px;\n}\n\n.no-results-message {\n    text-align: center;\n    color: #777;\n    padding: 20px;\n    display: none;\n    /* Hidden by default */\n}\n\n/* ---------------- Pull to Refresh ---------------- */\n#refresh-indicator {\n    position: fixed;\n    top: calc(var(--header-height) + 15px);\n    left: 50%;\n    transform: translateX(-50%) scale(0);\n    width: 50px;\n    height: 50px;\n    background: linear-gradient(135deg, #0e639c 0%, #4caf50 50%, #ff9800 100%);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 6px 20px rgba(14, 99, 156, 0.3);\n    border: 3px solid rgba(255, 255, 255, 0.2);\n    font-size: 24px;\n    color: white;\n    opacity: 0;\n    z-index: 10;\n}\n\n#refresh-indicator.transitioning {\n    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease;\n}\n\n#refresh-indicator.refreshing {\n    animation: pulse 2s ease-in-out infinite;\n    background: linear-gradient(135deg, #4caf50 0%, #ff9800 50%, #0e639c 100%);\n    box-shadow: 0 8px 25px rgba(76, 175, 80, 0.4);\n}\n\n#refresh-indicator.refreshing span {\n    animation: spin 1s linear infinite;\n    transform: scale(1.1);\n}\n\n@keyframes pulse {\n    0%, 100% { \n        transform: translateX(-50%) scale(1); \n        box-shadow: 0 6px 20px rgba(14, 99, 156, 0.3);\n    }\n    50% { \n        transform: translateX(-50%) scale(1.05); \n        box-shadow: 0 8px 30px rgba(76, 175, 80, 0.5);\n    }\n}\n\n/* ---------------- Dark Mode Overrides ---------------- */\n.dark-mode {\n    background: #1e1e1e;\n    color: #d4d4d4;\n}\n\n.dark-mode html {\n    background: #1e1e1e;\n    color: #d4d4d4;\n}\n\n.dark-mode header {\n    background-color: #252526;\n    color: #d4d4d4;\n    border-bottom: none;\n}\n\n.dark-mode .bottom-nav {\n    background-color: #252526;\n    border-top: none;\n}\n\n.dark-mode .bottom-nav button {\n    color: #d4d4d4;\n}\n\n.dark-mode .bottom-nav .icon {\n    background-color: #d4d4d4;\n    /* Dark mode inactive color */\n}\n\n.dark-mode .bottom-nav button.active {\n    color: #0e639c;\n    /* Active color is the same */\n}\n\n.dark-mode .bottom-nav button.active .icon {\n    background-color: #0e639c;\n    /* Active color is the same */\n}\n\n.dark-mode .search-wrapper {\n    background-color: #2d2d30;\n    border-color: #555;\n}\n\n.dark-mode .search-wrapper:focus-within {\n    border-color: #0e639c;\n}\n\n.dark-mode #predictionSearch {\n    color: #d4d4d4;\n}\n\n.dark-mode #search-ghost-text {\n    color: #555;\n}\n\n.dark-mode .filter-pill {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n.dark-mode .filter-pill:hover {\n    background-color: #2a4c68;\n}\n\n.dark-mode .card,\n.dark-mode .subscription-card,\n.dark-mode .profile-card,\n.dark-mode .current-tier {\n    background: #2d2d30;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .subscription-card .price,\n.dark-mode .current-tier {\n    color: #d4d4d4;\n}\n\n.dark-mode .tier-expiry-date {\n    color: #bbb;\n}\n\n.dark-mode .subscription-card ul li,\n.dark-mode .profile-card p,\n.dark-mode .profile-email {\n    color: #bbb;\n}\n\n.dark-mode .profile-username {\n    color: #fff;\n}\n\n.dark-mode .modal-content {\n    background: #1e1e1e;\n    color: #fff;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .history-card,\n.dark-mode .prediction-card {\n    background-color: #1e1e1e;\n    border-color: #444;\n    /* Default border color for cards in dark mode */\n    color: #fff;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .history-title,\n.dark-mode .match-title {\n    color: #fff;\n}\n\n.dark-mode .history-detail,\n.dark-mode .prediction-detail {\n    color: #ddd;\n}\n\n.dark-mode .history-time,\n.dark-mode .match-time {\n    color: #aaa;\n}\n\n.dark-mode .tab-btn {\n    background: #2d2d30;\n    color: #d4d4d4;\n    border-color: #555;\n}\n\n.dark-mode .tab-btn.active {\n    background: #0e639c;\n    color: #fff;\n    border-color: #0e639c;\n}\n\n.dark-mode .tab-btn:hover {\n    background: #0b4f7a;\n    color: #fff;\n    border-color: #0b4f7a;\n}\n\n/* Ensure confidence colors override the default dark mode border */\n.dark-mode .prediction-card.high-confidence {\n    border-color: #4caf50;\n}\n\n.dark-mode .prediction-card.medium-confidence {\n    border-color: #ff9800;\n}\n\n.dark-mode .prediction-card.low-confidence {\n    border-color: #f44336;\n}\n\n\n.dark-mode .odds {\n    color: #ffb300;\n}\n\n.dark-mode .confidence span {\n    color: #ccc;\n}\n\n.dark-mode .confidence-bar {\n    background: #333;\n}\n\n.dark-mode .no-results-message {\n    color: #aaa;\n}\n\n.dark-mode #refresh-indicator {\n    background: #2d2d30;\n    color: #d4d4d4;\n    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4);\n}\n\n/* ---------------- Loader ---------------- */\n#globalLoader {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 9999;\n    display: none;\n    /* Initially hidden by JS */\n    justify-content: center;\n    align-items: center;\n}\n\n.loader-overlay {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: rgba(244, 245, 247, 0.7);\n    /* Light theme overlay, matches body bg */\n}\n\n.loader-spinner {\n    width: 50px;\n    height: 50px;\n    border: 5px solid #e0e0e0;\n    /* Light theme spinner track */\n    border-top-color: #0e639c;\n    /* Spinner color */\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    z-index: 1;\n}\n\n@keyframes spin {\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n.dark-mode .loader-overlay {\n    background: rgba(30, 30, 30, 0.7);\n    /* Dark theme overlay */\n}\n\n.dark-mode .loader-spinner {\n    border-color: #444;\n    /* Dark theme spinner track */\n    border-top-color: #0e639c;\n    /* Spinner color can stay the same */\n}\n\n.button {\n    display: inline-block;\n    padding: 8px 16px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    text-decoration: none;\n    transition: background 0.3s ease;\n    border: none;\n    cursor: pointer;\n    text-align: center;\n}\n\n.button:hover {\n    background: #0b4f7a;\n}\n\n.button.btn-danger {\n    background: #d9534f;\n}\n\n.button.btn-danger:hover {\n    background: #c9302c;\n}\n\n/* ---------------- Manage Subscription Page ---------------- */\n.manage-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 20px;\n    margin-bottom: 16px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n    border: 1px solid #e0e0e0;\n    transition: border-color 0.3s ease;\n}\n\n.manage-card h2 {\n    font-size: 18px;\n    margin-bottom: 8px;\n    color: #333;\n}\n\n.manage-card p {\n    font-size: 15px;\n    color: #555;\n    margin-bottom: 12px;\n    line-height: 1.5;\n}\n\n.manage-card ul {\n    list-style-type: '‚úî  ';\n    padding-left: 20px;\n    margin-top: 10px;\n}\n\n.manage-card ul li {\n    margin-bottom: 5px;\n    font-size: 14px;\n    color: #444;\n}\n\n.manage-card.danger-zone {\n    border-color: #d9534f;\n}\n\n.manage-card.danger-zone h2 {\n    color: #d9534f;\n}\n\n.remaining-days-indicator {\n    background-color: #e7f5ff;\n    color: #0e639c;\n    padding: 8px 12px;\n    border-radius: 8px;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 10px;\n}\n\n.dark-mode .manage-card {\n    background: #2d2d30;\n    border-color: #444;\n}\n\n.dark-mode .manage-card h2 {\n    color: #eee;\n}\n\n.dark-mode .manage-card p,\n.dark-mode .manage-card ul li {\n    color: #bbb;\n}\n\n.dark-mode .remaining-days-indicator {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n.dark-mode .edit-icon:hover {\n    background-color: #0e639c; /* Standard active/hover color */\n}\n\n.dark-mode .manage-card.danger-zone {\n    border-color: #d9534f;\n}\n\n\n/* ---------------- Referral Page ---------------- */\n.referral-code-container {\n    display: flex;\n    gap: 8px;\n    margin-top: 8px;\n}\n\n#referralCodeInput {\n    flex-grow: 1;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    background-color: #f1f3f5;\n    color: #333;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n}\n\n#referralCodeInput:focus {\n    outline: none;\n}\n\n.dark-mode #referralCodeInput {\n    background-color: #252526;\n    border-color: #555;\n    color: #d4d4d4;\n}\n\n.form-description {\n    font-size: 14px;\n    color: #666;\n    margin-bottom: 16px;\n    text-align: center;\n    line-height: 1.5;\n}\n\n/* ---------------- Referral Page Share Buttons ---------------- */\n.share-buttons-container {\n    display: flex;\n    justify-content: center;\n    gap: 16px;\n    margin-top: 20px;\n    padding-top: 16px;\n    border-top: 1px solid #e0e0e0;\n}\n\n.share-btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 44px;\n    height: 44px;\n    border-radius: 50%;\n    border: none;\n    cursor: pointer;\n    transition: transform 0.2s ease, background-color 0.2s ease;\n    padding: 0;\n    background-color: #f1f3f5;\n}\n\n.share-btn:hover {\n    transform: scale(1.1);\n}\n\n.share-btn svg {\n    width: 22px;\n    height: 22px;\n    color: #333;\n}\n\n.share-btn.whatsapp:hover {\n    background-color: #e0f8e5;\n}\n\n.share-btn.whatsapp:hover svg {\n    color: #25D366;\n}\n\n.share-btn.twitter:hover {\n    background-color: #e1f5fe;\n}\n\n.share-btn.twitter:hover svg {\n    color: #1DA1F2;\n}\n\n.share-btn.generic:hover {\n    background-color: #e8eaf6;\n}\n\n.share-btn.generic:hover svg {\n    stroke: #5c6bc0;\n    color: #5c6bc0;\n}\n\n.dark-mode .share-buttons-container {\n    border-top-color: #444;\n}\n\n.dark-mode .share-btn {\n    background-color: #252526;\n}\n\n.dark-mode .share-btn svg {\n    color: #d4d4d4;\n}\n\n.dark-mode .share-btn.whatsapp:hover {\n    background-color: #1a3c2a;\n}\n\n.dark-mode .share-btn.twitter:hover {\n    background-color: #1a3a4a;\n}\n\n.dark-mode .share-btn.generic:hover {\n    background-color: #2a2d42;\n    stroke: #a5d8ff;\n}\n\n/* ---------------- Referral Name Display (Auth Page) ---------------- */\n.referral-name-display {\n    display: none;\n    /* Hidden by default */\n    font-size: 13px;\n    color: #0e639c;\n    background-color: #e7f5ff;\n    padding: 8px;\n    border-radius: 6px;\n    margin-top: 8px;\n    text-align: center;\n}\n\n.dark-mode .referral-name-display {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n/* --- Animated Background --- */\n.area {\n    position: fixed; /* Use fixed to stay in viewport */\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1; /* Place it behind all content */\n    pointer-events: none; /* Allow clicks to pass through */\n}\n\n.circles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n}\n\n.circles li {\n    position: absolute;\n    display: block;\n    list-style: none;\n    width: 20px;\n    height: 20px;\n    background: rgba(14, 99, 156, 0.2); /* Base color, JS will override opacity */\n    /* Animation is now handled by JavaScript */\n}\n\n.circles li:nth-child(1) { left: 25%; width: 80px; height: 80px; }\n.circles li:nth-child(2) { left: 10%; width: 20px; height: 20px; }\n.circles li:nth-child(3) { left: 70%; width: 20px; height: 20px; }\n.circles li:nth-child(4) { left: 40%; width: 60px; height: 60px; }\n.circles li:nth-child(5) { left: 65%; width: 20px; height: 20px; }\n.circles li:nth-child(6) { left: 75%; width: 110px; height: 110px; background: rgba(14, 99, 156, 0.15); }\n.circles li:nth-child(7) { left: 35%; width: 150px; height: 150px; background: rgba(14, 99, 156, 0.1); }\n.circles li:nth-child(8) { left: 50%; width: 25px; height: 25px; }\n.circles li:nth-child(9) { left: 20%; width: 15px; height: 15px; background: rgba(14, 99, 156, 0.25); }\n.circles li:nth-child(10) { left: 85%; width: 150px; height: 150px; background: rgba(14, 99, 156, 0.1); }\n\n/* --- Animated Background Dark Mode Overrides --- */\n.dark-mode .circles li {\n    background: rgba(165, 216, 255, 0.1); /* Light blue accent for dark mode */\n}\n.dark-mode .circles li:nth-child(6) {\n    background: rgba(165, 216, 255, 0.08);\n}\n.dark-mode .circles li:nth-child(7) {\n    background: rgba(165, 216, 255, 0.05);\n}\n.dark-mode .circles li:nth-child(9) {\n    background: rgba(165, 216, 255, 0.12);\n}\n.dark-mode .circles li:nth-child(10) {\n    background: rgba(165, 216, 255, 0.05);\n}\n\n/* Dark mode animated background */\n.dark-mode .animated-background {\n    background: linear-gradient(135deg, #1e1e1e 0%, #2d2d30 100%);\n}\n\n.dark-mode .animated-background::before {\n    background-image: \n        radial-gradient(circle at 20% 80%, rgba(165, 216, 255, 0.15) 0%, transparent 50%),\n        radial-gradient(circle at 80% 20%, rgba(76, 175, 80, 0.15) 0%, transparent 50%),\n        radial-gradient(circle at 40% 40%, rgba(255, 193, 7, 0.15) 0%, transparent 50%);\n}\n\n.dark-mode .animated-background::after {\n    background-image: \n        repeating-linear-gradient(\n            45deg,\n            transparent,\n            transparent 35px,\n            rgba(165, 216, 255, 0.08) 35px,\n            rgba(165, 216, 255, 0.08) 70px\n        );\n}\n\n/* ---------------- Error Container (from 404.css) ---------------- */\n.error-container {\n    max-width: 450px;\n    margin: 0 auto; /* Center the container */\n    text-align: center;\n    padding: 40px 20px;\n}\n\n.error-icon {\n    font-size: 48px;\n    margin-bottom: 20px;\n}\n\n.error-title {\n    font-size: 6rem;\n    font-weight: bold;\n    color: #0e639c;\n    margin: 0;\n}\n\n.error-subtitle {\n    font-size: 1.5rem;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n.error-message {\n    color: #666;\n    margin-bottom: 30px;\n}\n\n.dark-mode .error-subtitle, .dark-mode .error-message { color: #bbb; }","size_bytes":32790},"sw.js":{"content":"// sw.js\n\n// Import and initialize the Firebase SDK\nimportScripts(\"https://www.gstatic.com/firebasejs/10.12.0/firebase-app-compat.js\");\nimportScripts(\"https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging-compat.js\");\n\n// Your web app's Firebase configuration\nconst CACHE_NAME = 'statwise-offline-v1';\nconst OFFLINE_URL = './Offline/offline.html';\n\n// A list of all the assets needed for the offline page to work correctly.\nconst OFFLINE_ASSETS = [\n    './Offline/offline.html',\n    './Offline/offline.css',\n    './Assets/Fonts/Optimistic_Text_A_Md.ttf'\n];\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpPTmDw7RpxTo2AXf8ZDTq4AG46xKB16g\",\n  authDomain: \"statwise-319a4.firebaseapp.com\",\n  databaseURL: \"https://statwise-319a4-default-rtdb.firebaseio.com\",\n  projectId: \"statwise-319a4\",\n  storageBucket: \"statwise-319a4.firebasestorage.app\",\n  messagingSenderId: \"416700134653\",\n  appId: \"1:416700134653:web:f3a6f9766a2fafa8fdba94\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\n/**\n * 1. Install the service worker and cache the offline assets.\n */\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        (async () => {\n            const cache = await caches.open(CACHE_NAME);\n            console.log('[Service Worker] Caching offline assets');\n            await cache.addAll(OFFLINE_ASSETS);\n        })()\n    );\n    // Force the waiting service worker to become the active service worker.\n    self.skipWaiting();\n});\n\n/**\n * 2. Clean up old caches on activation.\n */\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        (async () => {\n            // Delete old caches that are not in use.\n            const cacheNames = await caches.keys();\n            await Promise.all(\n                cacheNames.filter(name => name !== CACHE_NAME).map(name => caches.delete(name))\n            );\n        })()\n    );\n    // Tell the active service worker to take control of the page immediately.\n    self.clients.claim();\n});\n\n/**\n * 3. Intercept fetch requests and serve the offline page if a navigation request fails.\n */\nself.addEventListener('fetch', (event) => {\n    if (event.request.mode === 'navigate') {\n        event.respondWith(\n            fetch(event.request).catch(() => caches.match(OFFLINE_URL))\n        );\n    }\n});\n\n/**\n * 4. Handle background push notifications.\n */\nmessaging.onBackgroundMessage((payload) => {\n    console.log('[sw.js] Received background message ', payload);\n\n    const notificationTitle = payload.notification.title;\n    const notificationOptions = {\n        body: payload.notification.body,\n        icon: './Assets/Icons/icon-192.png' // Add an icon for notifications\n    };\n\n    self.registration.showNotification(notificationTitle, notificationOptions);\n});","size_bytes":2772},"utils.js":{"content":"// utils.js\nimport { db } from './env.js';\nimport { collection, addDoc, query, orderBy, serverTimestamp, limit, getDocs } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\n\n/**\n * Fetches the user's public IP address.\n * @returns {Promise<string>} The public IP or \"Unknown\".\n */\nexport async function getPublicIP() {\n    try {\n        const res = await fetch(\"https://api.ipify.org?format=json\");\n        if (!res.ok) return \"Unknown\";\n        const data = await res.json();\n        return data.ip || \"Unknown\";\n    } catch {\n        return \"Unknown\";\n    }\n}\n\n/**\n * Formats a Firestore Timestamp into a \"DD/MM/YYYY HH:mm\" string.\n * @param {object} timestamp - The Firestore Timestamp object.\n * @returns {string} The formatted date string or an empty string.\n */\nexport function formatTimestamp(timestamp) {\n    if (!timestamp?.toDate) return \"\";\n    const date = timestamp.toDate();\n    const day = String(date.getDate()).padStart(2, \"0\");\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const year = date.getFullYear();\n    const hours = String(date.getHours()).padStart(2, \"0\");\n    const mins = String(date.getMinutes()).padStart(2, \"0\");\n    return `${day}/${month}/${year} ${hours}:${mins}`;\n}\n\n/**\n * Adds a unique action to the user's history log, preventing immediate duplicates.\n * @param {string} userId - The user's ID.\n * @param {string} action - The action description to log.\n */\nexport async function addHistoryUnique(userId, action) {\n    if (!userId) return;\n    try {\n        const historyRef = collection(db, \"users\", userId, \"history\");\n        const q = query(historyRef, orderBy(\"createdAt\", \"desc\"), limit(1));\n        const snap = await getDocs(q);\n\n        // Prevent logging the exact same action back-to-back\n        if (!snap.empty && snap.docs[0].data().action === action) return;\n\n        const ip = await getPublicIP();\n        await addDoc(historyRef, { action, ip, createdAt: serverTimestamp() });\n    } catch (err) {\n        console.error(\"Failed to add history:\", err);\n    }\n}","size_bytes":2060},"Auth/auth.css":{"content":"/* /Auth/auth.css */\n\n/* --- Global & Font --- */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n@font-face {\n    font-family: 'Optimistic';\n    src: url('../Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\n/* --- Body & Theme --- */\nbody {\n    font-family: \"Optimistic\", sans-serif;\n    background: #f4f5f7;\n    color: #1c1c1e;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    padding: 20px;\n    position: relative; /* For background animation positioning */\n    overflow: hidden; /* Hide animation overflow */\n}\n\n/* --- Auth Container & Card --- */\n.auth-container {\n    width: 100%;\n    max-width: 420px;\n}\n\n.auth-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 24px;    \n    border: 2px solid #0e639c;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08); /* Standard app shadow */\n    position: relative; /* For theme toggle positioning */\n    text-align: center;\n}\n\n.auth-card {\n    transition: opacity 0.5s ease-out, transform 0.5s ease-out;\n}\n.auth-card.fade-out {\n    opacity: 0;\n    transform: translateY(-20px);\n}\n\n.auth-title {\n    font-size: 32px;\n    font-weight: bold;\n    color: #0e639c;\n    margin-bottom: 8px;\n}\n\n.auth-subtitle {\n    font-size: 16px;\n    color: #555;\n    margin-bottom: 24px;\n}\n\n/* --- Form & Inputs --- */\n.auth-form {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.input-wrapper {\n    position: relative;\n}\n\n.input-icon {\n    position: absolute;\n    left: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 18px;\n    height: 18px;\n    background-color: #555; /* Standard inactive icon color */\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    z-index: 2; /* Ensure icon is above the input field */\n    mask-repeat: no-repeat;\n}\n/* Correctly formatted data URIs for SVG icons */\n.icon-user { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='12' cy='7' r='4'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='12' cy='7' r='4'/%3E%3C/svg%3E\"); }\n.icon-email { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z'/%3E%3Cpolyline points='22,6 12,13 2,6'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z'/%3E%3Cpolyline points='22,6 12,13 2,6'/%3E%3C/svg%3E\"); }\n.icon-password { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='11' width='18' height='11' rx='2' ry='2'/%3E%3Cpath d='M7 11V7a5 5 0 0 1 10 0v4'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='11' width='18' height='11' rx='2' ry='2'/%3E%3Cpath d='M7 11V7a5 5 0 0 1 10 0v4'/%3E%3C/svg%3E\"); }\n.icon-referral { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 12 20 22 4 22 4 12'/%3E%3Crect x='2' y='7' width='20' height='5'/%3E%3Cline x1='12' y1='22' x2='12' y2='7'/%3E%3Cpath d='M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z'/%3E%3Cpath d='M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 12 20 22 4 22 4 12'/%3E%3Crect x='2' y='7' width='20' height='5'/%3E%3Cline x1='12' y1='22' x2='12' y2='7'/%3E%3Cpath d='M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z'/%3E%3Cpath d='M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z'/%3E%3C/svg%3E\"); }\n\n.password-toggle-icon {\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 20px;\n    height: 20px;\n    background-color: #555; /* Standard inactive icon color */\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n    transition: background-color 0.2s;\n}\n\n.password-toggle-icon:hover {\n    background-color: #0e639c; /* Standard active/hover color */\n}\n\n.icon-eye { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'/%3E%3Ccircle cx='12' cy='12' r='3'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'/%3E%3Ccircle cx='12' cy='12' r='3'/%3E%3C/svg%3E\"); }\n.icon-eye-slash { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24'/%3E%3Cline x1='1' y1='1' x2='23' y2='23'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24'/%3E%3Cline x1='1' y1='1' x2='23' y2='23'/%3E%3C/svg%3E\"); }\n\n.input-prefix {\n    position: absolute;\n    left: 40px; /* Position it after the icon */\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 14px;\n    font-weight: 600; /* Make it bolder */\n    color: #1c1c1e; /* Match input text color */\n    pointer-events: none; /* Make it non-interactive */\n    z-index: 10; /* Ensure it's above the input field */\n}\n\n\n.auth-form input {\n    width: 100%;\n    padding: 12px 40px; /* Symmetrical padding for icons on both sides */\n    border: 2px solid #e1e5e9;\n    border-radius: 8px;\n    background-color: #ffffff;\n    font-size: 14px;\n    transition: all 0.3s ease;\n    position: relative; /* Needed for z-index to work */\n}\n\n/* Adjust padding for inputs without a right-side icon */\n.auth-form input:not([type=\"password\"]) {\n    padding-right: 12px;\n}\n\n/* Adjust left padding for the referral input to make space for the prefix */\n#signup-referral {\n    padding-left: 80px; /* 40px for icon + 40px for prefix */\n}\n\n.auth-form input:focus {\n    outline: none;\n    border-color: #0e639c;\n}\n\n.auth-form input.input-error {\n    border-color: #d9534f;\n    box-shadow: 0 0 0 3px rgba(217, 83, 79, 0.1);\n    animation: inputShake 0.4s ease;\n}\n\n.auth-form input.input-success {\n    border-color: #28a745;\n    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);\n}\n\n@keyframes inputShake {\n    0%, 100% { transform: translateX(0); }\n    25% { transform: translateX(-3px); }\n    75% { transform: translateX(3px); }\n}\n\n/* Input validation states */\n.input-wrapper.validating::after {\n    content: \"‚ü≥\";\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #6c757d;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    to { transform: translateY(-50%) rotate(360deg); }\n}\n\n.input-wrapper.valid::after {\n    content: \"‚úì\";\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #28a745;\n    font-weight: bold;\n}\n\n.input-wrapper.invalid::after {\n    content: \"‚úó\";\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #d9534f;\n    font-weight: bold;\n}\n\n\n/* --- Password Strength Indicator --- */\n#password-strength-container {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    margin-top: -8px; /* Pull it closer to the input */\n}\n\n.strength-bar {\n    flex-grow: 1;\n    height: 5px;\n    background-color: #e0e0e0;\n    border-radius: 2.5px;\n    transition: background-color 0.3s ease;\n}\n\n#password-strength-text {\n    font-size: 12px;\n    font-weight: 500;\n    color: #555;\n    min-width: 70px; /* Prevent layout shift */\n    text-align: right;\n}\n\n/* Strength levels */\n.strength-bar.weak { background-color: #d9534f; }\n.strength-bar.medium { background-color: #f0ad4e; }\n.strength-bar.strong { background-color: #5bc0de; }\n.strength-bar.very-strong { background-color: #5cb85c; }\n\n.dark-mode #password-strength-text {\n    color: #bbb;\n}\n\n.dark-mode .strength-bar {\n    background-color: #444;\n}\n.dark-mode .strength-bar.weak { background-color: #c9302c; }\n.dark-mode .strength-bar.medium { background-color: #ec971f; }\n.dark-mode .strength-bar.strong { background-color: #31b0d5; }\n.dark-mode .strength-bar.very-strong { background-color: #449d44; }\n\n\n/* --- Referral Display --- */\n.referral-name-display {\n    display: none; /* Hidden by default */\n    font-size: 13px;\n    color: #0e639c;\n    background-color: #e7f5ff;\n    padding: 8px;\n    border-radius: 6px;\n    margin-top: -8px; /* Pull it closer to the input */\n    margin-bottom: 8px;\n    text-align: center;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(14, 99, 156, 0.2);\n}\n\n.referral-name-display.show {\n    display: block;\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.referral-name-display.error {\n    color: #d9534f;\n    background-color: rgba(217, 83, 79, 0.1);\n    border-color: rgba(217, 83, 79, 0.2);\n}\n\n.referral-name-display.success {\n    color: #28a745;\n    background-color: rgba(40, 167, 69, 0.1);\n    border-color: rgba(40, 167, 69, 0.2);\n}\n\n/* --- Form Description (for forgot password) --- */\n.form-description {\n    font-size: 14px;\n    color: #555;\n    margin-bottom: 16px;\n    line-height: 1.4;\n}\n\n/* --- Form Options (Remember Me / Forgot Password) --- */\n.form-options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    margin-top: -8px; /* Pull it closer to the inputs */\n    margin-bottom: 8px;\n}\n\n/* Modifier for when there's only one option (like on signup page) */\n.form-options.single-option {\n    justify-content: flex-start;\n}\n\n.remember-me {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    cursor: pointer;\n    color: #555;\n    white-space: nowrap; /* Prevent the label from wrapping */\n}\n\n.remember-me span {\n    padding-left: 8px; /* Space between checkbox and text */\n}\n\n.remember-me input {\n    /* Hide the default checkbox */\n    display: none;\n}\n\n/* New SVG Checkbox Style */\n.check {\n  cursor: pointer;\n  position: relative;\n  margin: auto;\n  width: 18px;\n  height: 18px;\n  -webkit-tap-highlight-color: transparent;\n  transform: translate3d(0, 0, 0);\n}\n\n.check:before {\n  content: \"\";\n  position: absolute;\n  top: -15px;\n  left: -15px;\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background: rgba(14, 99, 156, 0.05);\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.check svg {\n  position: relative;\n  z-index: 1;\n  fill: none;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke: #c8ccd4;\n  stroke-width: 1.5;\n  transform: translate3d(0, 0, 0);\n  transition: all 0.2s ease;\n}\n\n.check svg path {\n  stroke-dasharray: 60;\n  stroke-dashoffset: 0;\n}\n\n.check svg polyline {\n  stroke-dasharray: 22;\n  stroke-dashoffset: 66;\n}\n\n.check:hover:before { opacity: 1; }\n.check:hover svg { stroke: #0e639c; }\n\n.extra-link a {\n    color: #0e639c;\n    text-decoration: none;\n    font-weight: 500;\n}\n.extra-link a:hover { text-decoration: underline; }\n\n.remember-me input:checked + .check svg { stroke: #0e639c; }\n\n.remember-me input:checked + .check svg path {\n  stroke-dashoffset: 60;\n  transition: all 0.3s linear;\n}\n\n.remember-me input:checked + .check svg polyline {\n  stroke-dashoffset: 42;\n  transition: all 0.2s linear;\n  transition-delay: 0.15s;\n}\n\n/* --- Error Message --- */\n.error-msg {\n    color: #d9534f;\n    font-size: 13px;\n    min-height: 18px;\n    text-align: left;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: all 0.3s ease;\n    border-radius: 6px;\n    padding: 8px 12px;\n    margin: 4px 0;\n    background: rgba(217, 83, 79, 0.1);\n    border: 1px solid rgba(217, 83, 79, 0.2);\n}\n\n.error-msg.show {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.error-msg.shake {\n    animation: shake 0.5s ease-in-out;\n}\n\n@keyframes shake {\n    0%, 100% { transform: translateX(0); }\n    10%, 30%, 50%, 70%, 90% { transform: translateX(-4px); }\n    20%, 40%, 60%, 80% { transform: translateX(4px); }\n}\n\n/* --- Button & Spinner --- */\n.auth-btn {\n    padding: 12px 20px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    font-size: 16px;\n    border: none;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    position: relative; /* Needed for spinner positioning */\n    overflow: hidden; /* Hide anything that might spill out */\n    min-height: 48px; /* Set a fixed height to prevent size change */\n    transform: translateY(0);\n    box-shadow: 0 2px 8px rgba(14, 99, 156, 0.3);\n}\n\n.auth-btn:hover:not(:disabled) {\n    background: #0b4f7a;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(14, 99, 156, 0.4);\n}\n\n.auth-btn:active:not(:disabled) {\n    transform: translateY(0);\n    transition: transform 0.1s ease;\n}\n\n.auth-btn:disabled {\n    background: #6c757d;\n    cursor: not-allowed;\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.auth-btn.loading {\n    pointer-events: none;\n}\n\n.auth-btn.success {\n    background: #28a745;\n    animation: successPulse 0.6s ease;\n}\n\n@keyframes successPulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n    100% { transform: scale(1); }\n}\n\n.auth-btn .btn-text {\n    transition: all 0.3s ease;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.auth-btn .btn-icon {\n    font-size: 18px;\n    opacity: 0;\n    transform: translateX(-10px);\n    transition: all 0.3s ease;\n}\n\n.auth-btn.success .btn-icon {\n    opacity: 1;\n    transform: translateX(0);\n}\n\n.auth-btn .spinner {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 20px;\n    height: 20px;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    border-top: 2px solid #fff;\n    border-radius: 50%;\n    animation: spin 0.8s linear infinite;\n    opacity: 0; /* Hidden by default */\n    transition: opacity 0.3s ease;\n}\n\n.auth-btn.loading .spinner,\n.auth-btn:disabled .spinner  {\n    opacity: 1; /* Show spinner when button is disabled */\n}\n\n.auth-btn.loading .btn-text,\n.auth-btn:disabled .btn-text  {\n    opacity: 0; /* Hide text when button is disabled */\n}\n\n@keyframes spin { \n    0% { transform: translate(-50%, -50%) rotate(0deg); }\n    100% { transform: translate(-50%, -50%) rotate(360deg); }\n}\n\n/* --- Switch Auth Link --- */\n.switch-auth {\n    margin-top: 20px;\n    font-size: 14px;\n    color: #555;\n}\n\n.switch-auth a {\n    color: #0e639c;\n    font-weight: bold;\n    text-decoration: none;\n}\n\n.switch-auth a:hover {\n    text-decoration: underline;\n}\n\n/* --- Dark Mode --- */\n.dark-mode body {\n    background: #1e1e1e;\n    color: #d4d4d4;\n}\n\n.dark-mode .auth-card {\n    background: #2d2d30;\n    border-color: #0e639c; /* Ensure border is visible in dark mode */\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); /* Standard app shadow for dark mode */\n}\n\n.dark-mode .auth-subtitle,\n.dark-mode .switch-auth {\n    color: #bbb;\n}\n\n.dark-mode .form-description {\n    color: #bbb;\n}\n\n.dark-mode .remember-me,\n.dark-mode .extra-link a {\n    color: #bbb;\n}\n\n.dark-mode .check svg {\n    stroke: #6a737d;\n}\n\n.dark-mode .check:hover svg,\n.dark-mode .remember-me input:checked + .check svg {\n    border-color: #0e639c;\n}\n\n.dark-mode .input-prefix {\n    color: #d4d4d4; /* Match dark mode input text color */\n}\n\n.dark-mode .input-icon {\n    background-color: #d4d4d4; /* Standard dark mode inactive color */\n}\n\n.dark-mode .password-toggle-icon {\n    background-color: #d4d4d4; /* Standard dark mode inactive color */\n}\n\n.dark-mode .password-toggle-icon:hover {\n    background-color: #0e639c; /* Standard active/hover color */\n}\n\n.dark-mode .auth-form input {\n    background-color: #2d2d30;\n    border-color: #555;\n    color: #d4d4d4;\n}\n\n.dark-mode .auth-form input:focus {\n    border-color: #0e639c;\n}\n\n.dark-mode .referral-name-display {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n/* --- Animated Background --- */\n.area {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1; /* Place it behind all content */\n}\n\n.circles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n}\n\n.circles li {\n    position: absolute;\n    display: block;\n    list-style: none;\n    width: 20px;\n    height: 20px;\n    background: rgba(14, 99, 156, 0.2); /* Base color, JS will override opacity */\n    /* Animation is now handled by JavaScript */\n}\n\n.circles li:nth-child(1) {\n    left: 25%;\n    width: 80px;\n    height: 80px;\n    animation-delay: 0s;\n}\n.circles li:nth-child(2) {\n    left: 10%;\n    width: 20px;\n    height: 20px;\n    animation-delay: 2s;\n    animation-duration: 12s;\n}\n.circles li:nth-child(3) {\n    left: 70%;\n    width: 20px;\n    height: 20px;\n    animation-delay: 4s;\n}\n.circles li:nth-child(4) {\n    left: 40%;\n    width: 60px;\n    height: 60px;\n    animation-delay: 0s;\n    animation-duration: 18s;\n}\n.circles li:nth-child(5) {\n    left: 65%;\n    width: 20px;\n    height: 20px;\n    animation-delay: 0s;\n}\n.circles li:nth-child(6) {\n    left: 75%;\n    width: 110px;\n    height: 110px;\n    animation-delay: 3s;\n    background: rgba(14, 99, 156, 0.15);\n}\n.circles li:nth-child(7) {\n    left: 35%;\n    width: 150px;\n    height: 150px;\n    animation-delay: 7s;\n    background: rgba(14, 99, 156, 0.1);\n}\n.circles li:nth-child(8) {\n    left: 50%;\n    width: 25px;\n    height: 25px;\n    animation-delay: 15s;\n    animation-duration: 45s;\n}\n.circles li:nth-child(9) {\n    left: 20%;\n    width: 15px;\n    height: 15px;\n    animation-delay: 2s;\n    animation-duration: 35s;\n    background: rgba(14, 99, 156, 0.25);\n}\n.circles li:nth-child(10) {\n    left: 85%;\n    width: 150px;\n    height: 150px;\n    animation-delay: 0s;\n    animation-duration: 11s;\n    background: rgba(14, 99, 156, 0.1);\n}\n\n/* --- Animated Background Dark Mode Overrides --- */\n.dark-mode .circles li {\n    background: rgba(165, 216, 255, 0.1); /* Light blue accent with low alpha for dark mode */\n}\n\n.dark-mode .circles li:nth-child(6) {\n    background: rgba(165, 216, 255, 0.08);\n}\n.dark-mode .circles li:nth-child(7) {\n    background: rgba(165, 216, 255, 0.05);\n}\n.dark-mode .circles li:nth-child(9) {\n    background: rgba(165, 216, 255, 0.12);\n}\n.dark-mode .circles li:nth-child(10) {\n    background: rgba(165, 216, 255, 0.05);\n}\n","size_bytes":20531},"Auth/auth.js":{"content":"// auth.js\n// =====================================\n// Firebase Auth + Firestore Setup\n// =====================================\n\nimport { auth, db } from \"../env.js\";\nimport { initInteractiveBackground } from \"../ui.js\";\nimport { addHistoryUnique } from \"../utils.js\";\nimport {\n    createUserWithEmailAndPassword,\n    signInWithEmailAndPassword,\n    setPersistence,\n    browserSessionPersistence, browserLocalPersistence, updateProfile,\n    signOut,\n    sendPasswordResetEmail\n} from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js\";\n\nimport {\n    doc,\n    setDoc,\n    getDoc,\n    collection,\n    addDoc,\n    getDocs,\n    query, limit,\n    where,\n    serverTimestamp\n} from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\nimport { showSpinner, hideSpinner } from \"../Loader/loader.js\";\n\n// ===== Utility UI Helpers =====\nfunction showSuccess(btn) {\n    const btnText = btn.querySelector(\".btn-text\");\n    const btnIcon = btn.querySelector(\".btn-icon\") || document.createElement(\"span\");\n    \n    if (!btn.querySelector(\".btn-icon\")) {\n        btnIcon.className = \"btn-icon\";\n        btnText.appendChild(btnIcon);\n    }\n    \n    btnIcon.textContent = \"‚úÖ\";\n    btnText.firstChild.textContent = \"Success! \";\n    btn.classList.add(\"success\");\n    \n    // Reset after animation\n    setTimeout(() => {\n        btn.classList.remove(\"success\");\n    }, 2000);\n}\n\nfunction displayError(errorElement, message, shake = true) {\n    if (!errorElement) return;\n    \n    errorElement.textContent = message;\n    errorElement.classList.remove('show', 'shake');\n    \n    // Force reflow\n    errorElement.offsetHeight;\n    \n    // Add show class for animation\n    errorElement.classList.add('show');\n    \n    // Add shake animation if requested\n    if (shake) {\n        setTimeout(() => errorElement.classList.add('shake'), 50);\n    }\n    \n    // Auto-hide after 10 seconds\n    setTimeout(() => {\n        if (errorElement.textContent === message) {\n            errorElement.classList.remove('show');\n        }\n    }, 10000);\n}\n\nfunction clearError(errorElement) {\n    if (!errorElement) return;\n    errorElement.classList.remove('show', 'shake');\n    setTimeout(() => errorElement.textContent = \"\", 300);\n}\n\n// ===== Theme Management =====\nfunction applyTheme(isDark) {\n    document.documentElement.classList.toggle(\"dark-mode\", isDark);\n}\n\nfunction initializeTheme() {\n    let isDark = localStorage.getItem('darkMode') === 'true'; // Get local storage first\n    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n    if (localStorage.getItem('darkMode') === null) { // if local storage is empty, use system preference\n        isDark = prefersDark;\n    }\n\n    applyTheme(isDark);\n\n    // Listen for system theme changes\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n        // Only apply system preference if the user hasn't set a manual preference\n        if (localStorage.getItem('darkMode') === null) {\n            applyTheme(e.matches);\n        }\n    });\n}\n\nfunction createBackgroundAnimation() {\n    // Only create animation if it's enabled or not set (default to on)\n    if (localStorage.getItem('bgAnimationEnabled') !== 'false') {\n        const container = document.createElement('div');\n        container.className = 'area';\n        const list = document.createElement('ul');\n        list.className = 'circles';\n        for (let i = 0; i < 10; i++) {\n            const li = document.createElement('li');\n            list.appendChild(li);\n        }\n        container.appendChild(list);\n        document.body.prepend(container); // Prepend to ensure it's in the background\n        initInteractiveBackground(container);\n    }\n}\n\n// ===== Firestore Collections =====\nconst usersCol = collection(db, \"users\");\nconst referralCodesCol = collection(db, \"referralCodes\");\nconst subscriptionsCol = collection(db, \"subscriptions\");\n\n// ===== Grab Page-Specific Forms =====\nconst loginForm = document.querySelector(\"#login-form\");\nconst signupForm = document.querySelector(\"#signup-form\");\nconst forgotPasswordForm = document.querySelector(\"#forgot-password-form\");\n\n// Initialize theme on page load\ninitializeTheme();\ncreateBackgroundAnimation();\n\n// ===== Login Logic =====\nif (loginForm) {\n    const loginPassword = document.querySelector(\"#login-password\");\n    loginForm.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n        const loginEmail = document.querySelector(\"#login-email\");\n        const rememberMe = document.querySelector(\"#remember-me\");\n        const loginBtn = document.querySelector(\"#login-btn\");\n\n        const loginError = document.querySelector(\"#login-error\");\n        clearError(loginError);\n\n        const email = loginEmail.value.trim();\n        const password = loginPassword.value.trim();\n        if (!email || !password) {\n            displayError(loginError, \"Please enter both email and password to continue.\", true);\n            return;\n        }\n\n        showSpinner(loginBtn);\n\n        try {\n            // Set persistence based on the \"Remember Me\" checkbox\n            const persistence = rememberMe.checked ? browserLocalPersistence : browserSessionPersistence;\n            await setPersistence(auth, persistence);\n\n            // Sign in the user\n            const userCredential = await signInWithEmailAndPassword(auth, email, password);\n            const user = userCredential.user;\n\n            const userRef = doc(usersCol, user.uid);\n            const userSnap = await getDoc(userRef);\n\n            if (!userSnap.exists()) {\n                // First login ‚Üí create user profile\n                const newReferralCode = `REF-${user.uid.substring(0, 6).toUpperCase()}`;\n                await setDoc(userRef, {\n                    username: user.displayName || \"User\",\n                    email: user.email,\n                    tier: \"Free Tier\",\n                    referralCode: newReferralCode, // Add referral code to satisfy security rules\n                    tierExpiry: null,\n                    photoURL: null,\n                    notifications: true,\n                    autoRenew: false,\n                    createdAt: new Date().toISOString(),\n                    lastLogin: new Date().toISOString(),\n                    isNewUser: true // Add this flag to satisfy security rules on create\n                });\n\n                // Default subscription\n                const subRef = doc(subscriptionsCol, user.uid);\n                await setDoc(subRef, {\n                    currentTier: \"Free Tier\",\n                    startDate: new Date().toISOString(),\n                    expiryDate: null,\n                    transactions: []\n                });\n\n            } else {\n                // Ensure subscription doc exists for older users\n                const subRef = doc(subscriptionsCol, user.uid);\n                const subSnap = await getDoc(subRef);\n                if (!subSnap.exists()) {\n                    await setDoc(subRef, {\n                        currentTier: userSnap.data()?.tier || \"Free Tier\",\n                        startDate: userSnap.data()?.createdAt || new Date().toISOString(),\n                        expiryDate: userSnap.data()?.tierExpiry || null,\n                        transactions: []\n                    });\n                }\n\n            }\n\n            showSuccess(loginBtn);\n\n            // Clear the last visited page to ensure a fresh start on the home page\n            localStorage.removeItem('lastPage');\n\n            // Add fade-out transition before redirecting\n            const authCard = loginForm.closest('.auth-card');\n            if (authCard) {\n                authCard.classList.add('fade-out'); // Ensure this class is defined in auth.css\n            }\n            // Explicitly redirect to home page with hash to ensure homepage loads\n            setTimeout(() => {\n                try {\n                    window.location.href = \"../index.html#home\";\n                } catch (redirectError) {\n                    // Fallback if redirect fails\n                    console.error('Login redirect failed, using fallback:', redirectError);\n                    window.location.replace(\"../index.html#home\");\n                }\n            }, 500); // Redirect after animation (500ms)\n\n        } catch (error) {            \n            let errorMessage = \"Unable to sign you in right now. Please try again.\";\n\n            if (error.code === 'auth/wrong-password') {\n                errorMessage = \"The password you entered is incorrect. Please double-check and try again.\";\n            } else if (error.code === 'auth/user-not-found') {\n                errorMessage = \"We couldn't find an account with that email address. Please check the email or create a new account.\";\n            } else if (error.code === 'auth/invalid-email') {\n                errorMessage = \"Please enter a valid email address.\";\n            } else if (error.code === 'auth/missing-email') {\n                errorMessage = \"Please enter your email address.\";\n            } else if (error.code === 'auth/network-request-failed') {\n                errorMessage = \"Connection problem. Please check your internet connection and try again.\";\n            } else if (error.code === 'auth/too-many-requests') {\n                errorMessage = \"Too many login attempts. Please wait a few minutes before trying again.\";\n            } else if (error.code === 'auth/user-disabled') {\n                errorMessage = \"This account has been disabled. Please contact support for assistance.\";\n            } else if (error.code === 'auth/invalid-credential') {\n                errorMessage = \"Invalid email or password. Please check your credentials and try again.\";\n            }\n\n            console.error('Login error:', error.code, error.message);\n            hideSpinner(loginBtn);\n            displayError(loginError, errorMessage, true);\n        }\n    });\n\n    // Password visibility toggle\n    const passwordToggle = document.getElementById('password-toggle');\n    if (passwordToggle && loginPassword) {\n        passwordToggle.addEventListener('click', () => {\n            const isPassword = loginPassword.type === 'password';\n            loginPassword.type = isPassword ? 'text' : 'password';\n            passwordToggle.classList.toggle('icon-eye', !isPassword);\n            passwordToggle.classList.toggle('icon-eye-slash', isPassword);\n        });\n    }\n}\n\n// ===== Referral Code Input Logic =====\n// Global variable to store validated referrer ID - accessible to both referral and signup logic\nlet validReferrerId = null;\n\nif (signupForm) {\n    const signupReferral = document.querySelector(\"#signup-referral\");\n    const referralNameDisplay = document.querySelector(\"#referral-name-display\");\n\n    let debounceTimeout;\n\n    const checkReferralCode = async (code) => {\n        const coreCode = code.trim().toUpperCase();\n        const wrapper = signupReferral.parentElement;\n        \n        // Clear previous state if input is empty or not 6 chars\n        if (coreCode.length === 0) {\n            referralNameDisplay.classList.remove('show', 'error');\n            referralNameDisplay.textContent = \"\";\n            validReferrerId = null;\n            return;\n        }\n        \n        if (coreCode.length !== 6) {\n            referralNameDisplay.textContent = \"Referral code must be 6 characters\";\n            referralNameDisplay.classList.add('error', 'show');\n            referralNameDisplay.classList.remove('success');\n            validReferrerId = null;\n            return;\n        }\n\n        // Show validating spinner\n        wrapper.classList.add('validating');\n\n        try {\n            // Query the 'users' collection for a matching referral code.\n            const q = query(usersCol, where(\"referralCode\", \"==\", coreCode), limit(1));\n            const querySnapshot = await getDocs(q);\n\n            if (!querySnapshot.empty) {\n                const referrerDoc = querySnapshot.docs[0];\n                validReferrerId = referrerDoc.id; // Cache the ID\n                const referrerName = referrerDoc.data().username;\n                referralNameDisplay.textContent = `Referred by: ${referrerName}`;\n                referralNameDisplay.classList.remove('error');\n                referralNameDisplay.classList.add('show', 'success');\n            } else {\n                validReferrerId = null; // Invalidate\n                referralNameDisplay.textContent = \"Invalid referral code\";\n                referralNameDisplay.classList.add('error', 'show');\n                referralNameDisplay.classList.remove('success');\n            }\n        } catch (error) {\n            validReferrerId = null;\n            referralNameDisplay.textContent = \"Error checking referral code\";\n            referralNameDisplay.classList.add('error', 'show');\n            referralNameDisplay.classList.remove('success');\n            console.error(\"Error fetching referrer:\", error);\n        } finally {\n            // Hide validating spinner\n            wrapper.classList.remove('validating');\n        }\n    };\n    signupReferral.addEventListener(\"input\", (e) => {\n        clearTimeout(debounceTimeout);\n        debounceTimeout = setTimeout(() => checkReferralCode(e.target.value), 500); // 500ms delay\n    });\n}\n\n// ===== Password Strength Checker =====\nfunction checkPasswordStrength(password) {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n\n    let strength = \"\";\n    let level = \"\";\n\n    if (password.length === 0) {\n        strength = \"\";\n        level = \"\";\n    } else if (score <= 2) {\n        strength = \"Weak\";\n        level = \"weak\";\n    } else if (score === 3) {\n        strength = \"Medium\";\n        level = \"medium\";\n    } else if (score === 4) {\n        strength = \"Strong\";\n        level = \"strong\";\n    } else {\n        strength = \"Very Strong\";\n        level = \"very-strong\";\n    }\n    return { strength, level, score };\n}\n\nif (signupForm) {\n    const strengthBars = document.querySelectorAll(\"#password-strength-container .strength-bar\");\n    const strengthText = document.getElementById(\"password-strength-text\");\n    // Define signupPassword here so it's accessible to both listeners below\n    const signupPassword = document.querySelector(\"#signup-password\");\n\n    signupPassword.addEventListener(\"input\", () => {\n        const password = signupPassword.value;\n        const { strength, level } = checkPasswordStrength(password);\n\n        strengthText.textContent = strength;\n        strengthBars.forEach(bar => bar.className = 'strength-bar'); // Reset classes\n\n        if (level) {\n            if (level === 'weak') {\n                strengthBars[0].classList.add(level);\n            } else if (level === 'medium') {\n                strengthBars[0].classList.add(level);\n                strengthBars[1].classList.add(level);\n            } else if (level === 'strong') {\n                strengthBars[0].classList.add(level);\n                strengthBars[1].classList.add(level);\n                strengthBars[2].classList.add(level);\n            } else if (level === 'very-strong') {\n                strengthBars.forEach(bar => bar.classList.add(level));\n            }\n        }\n    });\n}\n\n// ===== Password Match Validation =====\nfunction validatePasswords() {\n    if (!signupForm) return;\n    const signupPassword = document.querySelector(\"#signup-password\");\n    const signupPasswordConfirm = document.querySelector(\"#signup-password-confirm\");\n    const signupError = document.querySelector(\"#signup-error\");\n\n    const password = signupPassword.value;\n    const confirmPassword = signupPasswordConfirm.value;\n\n    // Only show error if the confirm password field has been typed in\n    if (confirmPassword && password !== confirmPassword) {\n        // Only highlight the confirm password field with red border\n        signupPasswordConfirm.classList.add('input-error');\n        signupPassword.classList.remove('input-error'); // Remove error from main password field\n        displayError(signupError, \"Passwords do not match - please check both fields.\", true);\n    } else {\n        signupPassword.classList.remove('input-error');\n        signupPasswordConfirm.classList.remove('input-error');\n        // Clear the error only if it's the password mismatch error\n        if (signupError.textContent.includes(\"Passwords do not match\")) {\n            clearError(signupError);\n        }\n    }\n}\n\n// ===== Signup Logic =====\nif (signupForm) {\n    const signupPassword = document.querySelector(\"#signup-password\");\n    const signupPasswordConfirm = document.querySelector(\"#signup-password-confirm\");\n\n    signupForm.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n        const signupUsername = document.querySelector(\"#signup-username\");\n        const signupEmail = document.querySelector(\"#signup-email\");\n        const signupReferral = document.querySelector(\"#signup-referral\");\n        const signupRememberMe = document.querySelector(\"#signup-remember-me\");\n        const signupBtn = document.querySelector(\"#signup-btn\");\n        const signupError = document.querySelector(\"#signup-error\");\n\n        clearError(signupError);\n\n        const username = signupUsername.value.trim();\n        const email = signupEmail.value.trim();\n        const password = signupPassword.value.trim();\n        const confirmPassword = signupPasswordConfirm.value.trim();\n        const referralCode = signupReferral.value.trim().toUpperCase();\n        if (!username || !email || !password || !confirmPassword) {\n            displayError(signupError, \"Please fill out all required fields to continue.\", true);\n            return;\n        }\n\n        if (password !== confirmPassword) {\n            validatePasswords(); // This will show the error text and borders\n            return; \n        }\n\n        if (password.length < 6) {\n            displayError(signupError, \"Password must be at least 6 characters long for security.\", true);\n            return;\n        }\n\n        const { score } = checkPasswordStrength(password);\n        if (score < 3) {\n            displayError(signupError, \"Password must contain uppercase, lowercase, numbers, and symbols for security.\", true);\n            return;\n        }\n\n        showSpinner(signupBtn);\n\n        try {\n            // Set persistence based on the \"Remember Me\" checkbox\n            const persistence = signupRememberMe.checked ? browserLocalPersistence : browserSessionPersistence;\n            await setPersistence(auth, persistence);\n            \n            // If a referral code was entered but found to be invalid by the UI check, block submission.\n            if (referralCode && !validReferrerId) {\n                hideSpinner(signupBtn);\n                displayError(signupError, \"Please enter a valid referral code or leave it blank.\", true);\n                return;\n            }\n\n            const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n            const user = userCredential.user;\n\n            // --- Final Referral ID Check (Self-Referral) ---\n            let finalReferrerId = validReferrerId;\n            if (finalReferrerId && finalReferrerId === user.uid) {\n                finalReferrerId = null; // Nullify if user is referring themselves.\n            }\n\n            // Update Firebase Auth profile\n            await updateProfile(user, { displayName: username });\n\n            // Generate a unique referral code for the new user\n            const newReferralCode = `REF-${user.uid.substring(0, 6).toUpperCase()}`;\n\n            // Create Firestore profile\n            const userRef = doc(usersCol, user.uid);\n            await setDoc(userRef, {\n                username,\n                email,\n                tier: \"Free Tier\",\n                referralCode: newReferralCode,\n                tierExpiry: null,\n                photoURL: null,\n                notifications: true,\n                autoRenew: false,\n                createdAt: new Date().toISOString(),\n                lastLogin: new Date().toISOString(),\n                isNewUser: true, // Flag for the welcome tour\n                ...(finalReferrerId && { referredBy: finalReferrerId }) // Add referrer ID if it exists\n            });\n\n            // If referred, update the referrer's document and notify them\n            if (finalReferrerId) {\n                const referrerRef = doc(usersCol, finalReferrerId);\n                // We use a subcollection for history, so we can just add an action.\n                const historyRef = collection(db, \"users\", finalReferrerId, \"history\");\n                await addDoc(historyRef, {\n                    action: `Your friend '${username}' joined using your referral code!`,\n                    createdAt: serverTimestamp(),\n                    creatorId: user.uid // Add this field to satisfy the security rule\n                });\n            }\n\n            showSuccess(signupBtn);\n\n            // Clear the last visited page to ensure a fresh start on the home page\n            localStorage.removeItem('lastPage');\n\n            // Add fade-out transition before redirecting\n            const authCard = signupForm.closest('.auth-card');\n            if (authCard) {\n                authCard.classList.add('fade-out');\n            }\n            // Explicitly redirect to home page with hash to ensure homepage loads\n            setTimeout(() => window.location.href = \"../index.html#home\", 500); // Redirect after animation (500ms)\n\n        } catch (error) {            \n            let errorMessage = \"Unable to create your account right now. Please try again.\";\n\n            if (error.code === 'auth/email-already-in-use') {\n                errorMessage = \"An account with this email already exists. Please use the login page instead.\";\n            } else if (error.code === 'auth/invalid-email') {\n                errorMessage = \"Please enter a valid email address.\";\n            } else if (error.code === 'auth/weak-password') {\n                errorMessage = \"Please choose a stronger password with at least 6 characters.\";\n            } else if (error.code === 'auth/network-request-failed') {\n                errorMessage = \"Connection problem. Please check your internet connection and try again.\";\n            } else if (error.code === 'auth/too-many-requests') {\n                errorMessage = \"Too many signup attempts. Please wait a few minutes before trying again.\";\n            } else if (error.code === 'auth/operation-not-allowed') {\n                errorMessage = \"Account creation is currently disabled. Please contact support.\";\n            }\n            \n            console.error('Signup error:', error.code, error.message);\n            hideSpinner(signupBtn);\n            displayError(signupError, errorMessage, true);\n        }\n    });\n\n    // Password visibility toggle for signup page\n    const passwordToggle = document.getElementById('password-toggle');\n    const confirmPasswordToggle = document.getElementById('confirm-password-toggle');\n\n    if (passwordToggle && signupPassword) { // Toggle for the main password field\n        passwordToggle.addEventListener('click', () => {\n            const isPassword = signupPassword.type === 'password';\n            signupPassword.type = isPassword ? 'text' : 'password';\n            passwordToggle.classList.toggle('icon-eye', !isPassword);\n            passwordToggle.classList.toggle('icon-eye-slash', isPassword);\n        });\n    }\n    if (confirmPasswordToggle && signupPasswordConfirm) { // Toggle for the confirm password field\n        confirmPasswordToggle.addEventListener('click', () => {\n            const isPassword = signupPasswordConfirm.type === 'password';\n            signupPasswordConfirm.type = isPassword ? 'text' : 'password';\n            confirmPasswordToggle.classList.toggle('icon-eye', !isPassword);\n            confirmPasswordToggle.classList.toggle('icon-eye-slash', isPassword);\n        });\n    }\n\n    // Add real-time validation listeners\n    signupPassword?.addEventListener('input', validatePasswords);\n    signupPasswordConfirm?.addEventListener('input', validatePasswords);\n}\n\n// ===== Forgot Password Logic =====\nif (forgotPasswordForm) {\n    forgotPasswordForm.addEventListener(\"submit\", async (e) => {\n        e.preventDefault();\n        const forgotPasswordEmail = document.querySelector(\"#forgot-password-email\");\n        const forgotPasswordBtn = document.querySelector(\"#forgot-password-btn\");\n        const forgotPasswordMessage = document.querySelector(\"#forgot-password-message\");\n\n        clearError(forgotPasswordMessage);\n        forgotPasswordMessage.style.color = \"\"; // Reset color\n\n        const email = forgotPasswordEmail.value.trim();\n        if (!email) {\n            displayError(forgotPasswordMessage, \"Please enter your email address to reset your password.\", true);\n            return;\n        }\n\n        showSpinner(forgotPasswordBtn, \"Sending...\");\n\n        try {\n            await sendPasswordResetEmail(auth, email);\n            forgotPasswordMessage.classList.add('show');\n            forgotPasswordMessage.style.color = '#28a745';\n            forgotPasswordMessage.textContent = \"‚úÖ Password reset email sent! Please check your inbox.\";\n            hideSpinner(forgotPasswordBtn);\n            forgotPasswordBtn.disabled = true; // Prevent resending\n        } catch (error) {\n            console.error(\"Password reset error:\", error);\n            hideSpinner(forgotPasswordBtn);\n            displayError(forgotPasswordMessage, \"Unable to send reset email. Please try again or contact support.\", true);\n        }\n    });\n}\n\n\n// ===== Logout Function (can be used in main.js) =====\nexport async function logoutUser() {\n    const user = auth.currentUser;\n    if (!user) return;\n\n    await addHistoryUnique(user.uid, \"User logged out\");\n    await signOut(auth);\n}\n","size_bytes":25991},"Landing_Page/styles.css":{"content":"/* /Landing_Page/styles.css */\n\n/* Basic Reset & Font */\nbody, html {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n    background-color: #121212;\n    color: #f0f0f0;\n    line-height: 1.6;\n}\n\n/* Container */\n.container {\n    max-width: 1100px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Header */\n.main-header {\n    background: #1a1a1a;\n    padding: 1rem 0;\n    border-bottom: 1px solid #333;\n}\n\n.main-header .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.logo {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #0e639c; /* Accent color */\n    text-decoration: none;\n}\n\n.main-nav a {\n    color: #f0f0f0;\n    text-decoration: none;\n    margin-left: 20px;\n    font-size: 1rem;\n    transition: color 0.3s ease;\n}\n\n.main-nav a:hover {\n    color: #0e639c;\n}\n\n/* Hero Section */\n.hero {\n    text-align: center;\n    padding: 80px 20px;\n    background: linear-gradient(rgba(18, 18, 18, 0.8), rgba(18, 18, 18, 0.9)), url('https://images.unsplash.com/photo-1517420533383-8f6f20815a47?q=80&w=2070') center/cover no-repeat;\n}\n\n.hero h1 {\n    font-size: 3rem;\n    margin-bottom: 10px;\n    color: #fff;\n}\n\n.hero p {\n    font-size: 1.2rem;\n    margin-bottom: 30px;\n    color: #ccc;\n}\n\n.cta-button {\n    background-color: #0e639c;\n    color: white;\n    padding: 15px 30px;\n    font-size: 1.1rem;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    text-decoration: none;\n    transition: background-color 0.3s ease;\n}\n\n.cta-button:hover {\n    background-color: #0c5689;\n}\n\n/* Features Section */\n.features {\n    padding: 60px 20px;\n    background: #1a1a1a;\n}\n\n.features h2 {\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 40px;\n}\n\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 30px;\n}\n\n.feature-card {\n    background: #242424;\n    padding: 30px;\n    border-radius: 8px;\n    text-align: center;\n    border: 1px solid #333;\n}\n\n.feature-card h3 {\n    font-size: 1.5rem;\n    color: #0e639c;\n    margin-top: 0;\n}\n\n/* Footer */\n.main-footer {\n    text-align: center;\n    padding: 20px;\n    background: #121212;\n    border-top: 1px solid #333;\n    margin-top: 40px;\n}\n\n/* Pricing Section */\n.pricing {\n    padding: 60px 20px;\n}\n\n.pricing h2 {\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 40px;\n}\n\n.pricing-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\n    gap: 30px;\n    align-items: stretch; /* Make cards same height */\n}\n\n.pricing-card {\n    background: #1a1a1a;\n    padding: 30px;\n    border-radius: 10px;\n    text-align: center;\n    border-top: 5px solid;\n    display: flex;\n    flex-direction: column;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.pricing-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 10px 20px rgba(0,0,0,0.2);\n}\n\n.pricing-card.free { border-color: #4caf50; }\n.pricing-card.premium { border-color: #2196f3; }\n.pricing-card.vip { border-color: #9c27b0; }\n.pricing-card.vvip { border-color: #ff9800; }\n\n.pricing-card h3 {\n    font-size: 1.8rem;\n    margin-bottom: 10px;\n}\n\n.pricing-card .price {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 20px;\n}\n\n.pricing-card .price span {\n    font-size: 1rem;\n    font-weight: normal;\n    color: #ccc;\n}\n\n.pricing-card ul {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 30px;\n    text-align: left;\n    flex-grow: 1; /* Pushes button to the bottom */\n}\n\n.pricing-card ul li {\n    margin-bottom: 10px;\n    color: #ccc;\n}","size_bytes":3633},"Loader/loader.css":{"content":"","size_bytes":0},"Loader/loader.js":{"content":"// loader.js\n\n// Create loader element\nconst loader = document.createElement(\"div\");\nloader.id = \"globalLoader\";\nloader.innerHTML = `\n  <div class=\"loader-overlay\"></div>\n  <div class=\"loader-spinner\"></div>\n`;\ndocument.body.appendChild(loader);\n\nlet loaderTimeout;\n\n// Function to show loader\nexport function showLoader() {\n    // Only show the loader if the operation takes more than 300ms\n    loaderTimeout = setTimeout(() => {\n        const loader = document.getElementById(\"globalLoader\");\n        if (loader) loader.style.display = \"flex\";\n    }, 300); // 300ms delay\n}\n\n// Function to hide loader\nexport function hideLoader() {\n    // Clear the timeout so the loader doesn't appear if the action was fast\n    clearTimeout(loaderTimeout);\n    const loader = document.getElementById(\"globalLoader\");\n    if (loader) {\n        loader.style.display = \"none\";\n    }\n}\n\n/**\n * Shows a spinner on a button and disables it.\n * Relies on CSS to hide text and show the spinner.\n * @param {HTMLElement} btn The button element.\n */\nexport function showSpinner(btn) {\n    btn.disabled = true;\n    // The CSS handles showing the spinner and hiding the text when the button is disabled.\n}\n\n/**\n * Hides a spinner on a button and enables it.\n * @param {HTMLElement} btn The button element.\n */\nexport function hideSpinner(btn) {\n    btn.disabled = false;\n    // The CSS will hide the spinner and show the text again.\n}\n","size_bytes":1410},"Offline/offline.css":{"content":"@font-face {\n    /* Ensure the app's font is available offline */\n    font-family: 'Optimistic';\n    src: url('../Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\nbody {\n    margin: 0;\n    font-family: 'Optimistic', sans-serif;\n    background-color: #f4f5f7;\n    color: #1c1c1e;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    padding: 20px;\n    text-align: center;\n    box-sizing: border-box;\n}\n\n.offline-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 32px 24px;\n    max-width: 350px;\n    width: 100%;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);\n}\n\n.offline-icon {\n    color: #0e639c;\n    margin-bottom: 20px;\n}\n\n.offline-icon svg {\n    width: 60px;\n    height: 60px;\n}\n\n.offline-title {\n    font-size: 24px;\n    font-weight: bold;\n    color: #1c1c1e;\n    margin-bottom: 8px;\n}\n\n.offline-message {\n    font-size: 16px;\n    color: #555;\n    line-height: 1.5;\n}\n\n/* Dark Mode styles for when the user has it enabled */\n@media (prefers-color-scheme: dark) {\n    body {\n        background-color: #1e1e1e;\n    }\n\n    .offline-card {\n        background: #2d2d30;\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    }\n\n    .offline-icon {\n        color: #a5d8ff;\n    }\n\n    .offline-message {\n        color: #aaa;\n    }\n}","size_bytes":1288},"Offline/offline.js":{"content":"","size_bytes":0},"Pages/manage-subscription.css":{"content":"body {\n    font-family: sans-serif;\n    background-color: #f4f4f4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.container {\n    background-color: #fff;\n    padding: 2rem;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    text-align: center;\n}\n\nh1 {\n    margin-bottom: 1.5rem;\n}\n\n.subscription-details {\n    margin-bottom: 2rem;\n}\n\n.subscription-details h2 {\n    margin-bottom: 1rem;\n}\n\n.actions button {\n    background-color: #dc3545;\n    color: #fff;\n    border: none;\n    padding: 0.8rem 1.5rem;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 1rem;\n    margin: 0 0.5rem;\n}\n\n.actions button#changePlan {\n    background-color: #007bff;\n}\n","size_bytes":740},"Pages/manage-subscription.js":{"content":"","size_bytes":0},"replit.md":{"content":"# StatWise - AI Sports Prediction PWA\n\n## Overview\n\nStatWise is a Progressive Web App (PWA) that provides AI-powered sports predictions with a tiered subscription model. The application is built as a single-page application (SPA) using vanilla JavaScript and Firebase services, offering users match predictions with confidence ratings, subscription management, referral programs, and comprehensive user profiles. The app is designed to work offline and can be installed on user devices as a native-like experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application follows a Single Page Application (SPA) pattern built with vanilla JavaScript ES modules. The main entry point is `index.html` with dynamic content loading managed by `main.js`. The routing system uses JavaScript to dynamically load page content without full page refreshes, providing smooth transitions between views.\n\nThe UI is organized into modular pages stored in the `Pages/` directory, including home, history, profile, subscriptions, insights, and referral management. CSS styling is centralized in `styles.css` with component-specific stylesheets for authentication and other specialized views.\n\n### Backend Architecture (Serverless)\nThe application leverages Firebase's serverless architecture exclusively:\n\n- **Authentication**: Firebase Authentication handles user registration, login, password reset, and session management\n- **Database**: Firestore (NoSQL) stores user profiles, subscription data, prediction history, referral information, and account activity logs\n- **File Storage**: Firebase Storage manages user profile picture uploads\n- **Cloud Functions**: While `index.js` exists, the application has been refactored to use client-side logic instead of Firebase Cloud Functions to maintain free-tier compatibility\n\n### Data Storage Design\nThe Firestore database uses a document-based structure with collections for users, predictions, history, and transactions. User data includes subscription tiers, referral codes, account activity, and saved predictions. The system implements client-side subscription status checks and automatic downgrades on expiry.\n\n### Authentication and Authorization\nFirebase Authentication provides secure user management with email/password authentication, password reset functionality, and session persistence options. The application includes tier-based access control that restricts features based on subscription levels (Free, Premium, VIP, VVIP). Client-side security measures include basic inspection deterrents and secure account deletion processes.\n\n### Progressive Web App Features\nThe application implements PWA standards with a service worker (`sw.js`) that provides offline functionality and caching. Users can install the app on their devices, and the service worker serves an offline page when network connectivity is unavailable. The app includes a Web App Manifest for native-like installation experience.\n\n### Push Notification System\nFirebase Cloud Messaging (FCM) enables push notifications for prediction alerts and account updates. The system handles both foreground and background messages, allowing users to opt-in to receive notifications about new predictions and subscription changes.\n\n## External Dependencies\n\n### Payment Processing\n- **Flutterwave**: Integrated for subscription payment processing with public API key configuration for frontend payment flows\n\n### Firebase Services\n- **Firebase Authentication**: User management and security\n- **Firestore Database**: Primary data storage for all application data\n- **Firebase Storage**: Profile picture and file uploads\n- **Firebase Cloud Messaging**: Push notification delivery\n- **Firebase Hosting**: Static site hosting configuration\n\n### Third-Party Libraries\n- **Vercel Analytics**: User behavior tracking and performance monitoring\n- **HTTP Server**: Development server for local testing\n\n### External APIs\n- **IP Geolocation**: Public IP detection service (api.ipify.org) for user location tracking and security logging\n\n### Development Tools\n- **Node.js/NPM**: Package management and development dependencies\n- **HTTP Server**: Development server configured for local testing on port 5000 with CORS enabled\n- **Replit**: Development environment and deployment platform with autoscale deployment target\n\n## Recent Changes\n\n### September 6, 2025 - Project Setup and Authentication Fixes\n- Successfully imported from GitHub and configured for Replit environment\n- Set up workflow using http-server on port 5000 with CORS enabled for proper proxy support\n- Configured deployment target as \"autoscale\" for production deployment\n- Verified all Firebase services and dependencies are properly configured\n- All static assets (CSS, JavaScript, fonts, icons) are loading correctly\n- Progressive Web App features including service worker registration are functioning\n\n### September 6, 2025 - Authentication and UI Improvements\n- Fixed authentication issues by adding missing referral code generation to login flow\n- Corrected variable naming typo in signup code that was causing authentication failures\n- Updated Firestore rules compliance to ensure proper user document creation\n- Removed background animation from main application pages for cleaner UI\n- Kept background animation only on authentication pages (login, signup, forgot password)\n- Removed background animation toggle from profile settings as requested\n- Authentication flow and subscription management systems are now fully operational","size_bytes":5588},"ui.js":{"content":"// ui.js\n\n/**\n * Creates an interactive, floating circle background.\n * @param {HTMLElement} container The '.area' element containing the animation.\n * @returns {Function} A cleanup function to stop the animation and remove listeners.\n */\nfunction initInteractiveBackground(container) {\n    const circlesList = container.querySelector('.circles');\n    if (!circlesList) return () => {};\n\n    let animationFrameId;\n    const circleElements = Array.from(circlesList.querySelectorAll('li'));\n    \n    const cursor = { x: 9999, y: 9999 };\n    const interactionRadius = 150;\n\n    const mouseMoveHandler = e => { cursor.x = e.clientX; cursor.y = e.clientY; };\n    const touchMoveHandler = e => {\n        if (e.touches.length > 0) { cursor.x = e.touches[0].clientX; cursor.y = e.touches[0].clientY; }\n    };\n    const mouseOutHandler = () => { cursor.x = 9999; cursor.y = 9999; };\n\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('touchstart', touchMoveHandler, { passive: true });\n    document.addEventListener('touchmove', touchMoveHandler, { passive: true });\n    document.addEventListener('mouseout', mouseOutHandler);\n    document.addEventListener('touchend', mouseOutHandler);\n\n    const circleObjects = circleElements.map(el => {\n        const size = parseFloat(getComputedStyle(el).width);\n        return {\n            el: el,\n            x: Math.random() * window.innerWidth,\n            y: window.innerHeight + size + Math.random() * 200,\n            radius: size / 2,\n            vy: Math.random() * 1 + 0.5, // Upward speed\n            vx: (Math.random() - 0.5) * 0.5, // Sideways drift\n            pushX: 0, pushY: 0,\n            friction: 0.95 // for smooth return\n        };\n    });\n\n    circleElements.forEach(el => {\n        el.style.position = 'absolute';\n        el.style.left = '0'; el.style.top = '0';\n        el.style.borderRadius = '50%';\n    });\n\n    function animate() {\n        circleObjects.forEach(p => {\n            const dx = p.x - cursor.x;\n            const dy = p.y - cursor.y;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n\n            if (dist < interactionRadius) {\n                const angle = Math.atan2(dy, dx);\n                const force = (interactionRadius - dist) / interactionRadius;\n                p.pushX += Math.cos(angle) * force * 0.6;\n                p.pushY += Math.sin(angle) * force * 0.6;\n            }\n\n            p.pushX *= p.friction; p.pushY *= p.friction;\n            p.x += p.vx + p.pushX; p.y -= p.vy;\n\n            if (p.y < -p.radius * 2) {\n                p.x = Math.random() * window.innerWidth;\n                p.y = window.innerHeight + p.radius * 2;\n            }\n            p.el.style.transform = `translate(${p.x - p.radius}px, ${p.y - p.radius}px)`;\n        });\n        animationFrameId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    return () => {\n        if (animationFrameId) cancelAnimationFrame(animationFrameId);\n        document.removeEventListener('mousemove', mouseMoveHandler);\n        document.removeEventListener('touchstart', touchMoveHandler);\n        document.removeEventListener('touchmove', touchMoveHandler);\n        document.removeEventListener('mouseout', mouseOutHandler);\n        document.removeEventListener('touchend', mouseOutHandler);\n    };\n}\n\nexport { initInteractiveBackground };","size_bytes":3342}},"version":1}