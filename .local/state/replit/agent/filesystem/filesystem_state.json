{"file_contents":{"404.css":{"content":"/* /404.css */\n\n/* --- Global & Font --- */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n@font-face {\n    font-family: 'Optimistic';\n    src: url('./Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\n/* --- Body & Theme --- */\nbody {\n    font-family: \"Optimistic\", sans-serif;\n    background: #f4f5f7;\n    color: #1c1c1e;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    text-align: center;\n    padding: 20px;\n}\n\n/* --- Container --- */\n.error-container {\n    max-width: 450px;\n}\n\n.error-title {\n    font-size: 6rem;\n    font-weight: bold;\n    color: #0e639c;\n    margin: 0;\n}\n\n.error-subtitle {\n    font-size: 1.5rem;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n.error-message {\n    color: #666;\n    margin-bottom: 30px;\n}\n\n/* --- Button Style (from styles.css) --- */\n.button {\n    display: inline-block;\n    padding: 8px 16px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    text-decoration: none;\n    transition: background 0.3s ease;\n    border: none;\n    cursor: pointer;\n    text-align: center;\n}\n\n.button:hover {\n    background: #0b4f7a;\n}\n\n/* --- Dark Mode --- */\n@media (prefers-color-scheme: dark) {\n    body {\n        background: #1e1e1e;\n        color: #d4d4d4;\n    }\n}","size_bytes":1293},"README.md":{"content":"# StatWise - AI Sports Prediction PWA\n\nStatWise is a Progressive Web App (PWA) that provides users with AI-powered sports predictions. It features a multi-tiered subscription model, a referral program, and a comprehensive user profile management system, all built on a modern serverless stack with Firebase.\n\n## ‚ú® Features\n\n*   **Single Page Application (SPA):** A fast, seamless user experience with dynamic page loading and animated transitions.\n*   **User Authentication:** Secure login, signup, and password reset functionality.\n*   **Tiered Subscriptions:**\n    *   Multiple subscription levels (Free, Premium, VIP, VVIP).\n    *   Payment integration with **Flutterwave**.\n    *   Client-side subscription status checks and downgrades on expiry.\n    *   Tier-based access control for features and content.\n*   **AI Predictions Homepage:**\n    *   Displays a list of prediction cards with match details, pick, odds, and confidence levels.\n    *   **Advanced Search:** Filter matches by name and use commands (`/odds`, `/c75`) to sort and filter.\n    *   **Pull-to-Refresh:** Easily refresh the prediction list.\n*   **Comprehensive User Profile:**\n    *   Update username and profile picture (uploads to Firebase Storage).\n    *   Change password with re-authentication.\n    *   Dark mode toggle.\n    *   View user statistics (member since, total predictions, win rate).\n*   **History Tracking:**\n    *   Tabbed view for **Predictions**, **Account Activity**, and **Transactions**.\n    *   Tracks saved predictions and their outcomes (Win/Loss/Pending).\n    *   Logs important account actions like login, logout, and profile updates.\n*   **Referral System:**\n    *   Each user gets a unique referral code.\n    *   Share code via WhatsApp, Twitter, or the native Web Share API.\n    *   View a list of users you've referred.\n    *   Automatic reward claiming for successful referrals.\n*   **Push Notifications:**\n    *   Users can opt-in to receive push notifications via Firebase Cloud Messaging (FCM).\n    *   Handles foreground and background messages.\n*   **Progressive Web App (PWA):**\n    *   Installable on user devices.\n    *   **Offline Support:** A custom offline page is served via a Service Worker when the user has no network connection.\n*   **Security:**\n    *   Client-side deterrents to prevent basic inspection (disabling right-click, dev tools shortcuts).\n    *   Secure, multi-step account deletion process.\n\n## üõ†Ô∏è Tech Stack\n\n*   **Frontend:** Vanilla JavaScript (ES Modules), HTML5, CSS3\n*   **Backend (Serverless):**\n    *   **Firebase Authentication:** For user management.\n    *   **Firestore:** As the primary NoSQL database for user data, predictions, history, and subscriptions.\n    *   **Firebase Storage:** For user profile picture uploads.\n    *   **Firebase Cloud Messaging (FCM):** For push notifications.\n*   **Payments:** Flutterwave\n*   **UI/UX:**\n    *   Intro.js: For the new user welcome tour.\n\n## üìÇ Project Structure\n\n```\nstatwise/\n‚îú‚îÄ‚îÄ Auth/\n‚îÇ   ‚îú‚îÄ‚îÄ auth.js         # Handles login, signup, password reset logic\n‚îÇ   ‚îî‚îÄ‚îÄ login.html      # Login page\n‚îÇ   ‚îî‚îÄ‚îÄ signup.html     # Signup page\n‚îÇ   ‚îî‚îÄ‚îÄ forgot.html     # Forgot password page\n‚îú‚îÄ‚îÄ Offline/\n‚îÇ   ‚îú‚îÄ‚îÄ offline.html    # Offline fallback page\n‚îÇ   ‚îî‚îÄ‚îÄ offline.css\n‚îú‚îÄ‚îÄ Pages/              # Dynamically loaded page content\n‚îÇ   ‚îú‚îÄ‚îÄ home.html\n‚îÇ   ‚îú‚îÄ‚îÄ history.html\n‚îÇ   ‚îú‚îÄ‚îÄ profile.html\n‚îÇ   ‚îú‚îÄ‚îÄ referral.html\n‚îÇ   ‚îú‚îÄ‚îÄ subscriptions.html\n‚îÇ   ‚îî‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ Assets/\n‚îÇ   ‚îú‚îÄ‚îÄ Icons/\n‚îÇ   ‚îî‚îÄ‚îÄ Fonts/\n‚îú‚îÄ‚îÄ env.js              # Firebase & service keys (IMPORTANT: Should be gitignored)\n‚îú‚îÄ‚îÄ env.example.js      # Template for environment variables\n‚îú‚îÄ‚îÄ main.js             # Core application logic, router, state management\n‚îú‚îÄ‚îÄ utils.js            # Utility functions (timestamp formatting, etc.)\n‚îú‚îÄ‚îÄ index.html          # Main entry point of the app\n‚îú‚îÄ‚îÄ styles.css          # Global styles\n‚îú‚îÄ‚îÄ sw.js               # Service Worker for PWA features (offline, push)\n‚îî‚îÄ‚îÄ README.md           # This file\n```\n\n## üöÄ Getting Started\n\nFollow these instructions to get a copy of the project up and running on your local machine for development and testing purposes.\n\n### Prerequisites\n\n*   A Firebase project.\n*   A Flutterwave account for payment processing.\n*   A local web server. You can use the `http-server` npm package for a quick setup:\n    ```bash\n    npm install -g http-server\n    ```\n\n### Installation & Setup\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/your-username/statwise.git\n    cd statwise\n    ```\n\n2.  **Configure Environment Variables:**\n    *   Copy `env.example.js` to a new file named `env.js`.\n    *   Open `env.js` and fill in your Firebase project configuration details in the `firebaseConfig` object.\n    *   Add your Flutterwave public key to the `FLWPUBK` constant.\n\n3.  **Update Service Worker Config:**\n    *   Open `sw.js` and replace the placeholder `firebaseConfig` object with your own Firebase project configuration.\n\n4.  **Update FCM VAPID Key:**\n    *   In `main.js`, find the `initFirebaseMessaging` function.\n    *   Replace the placeholder `'YOUR_VAPID_KEY_HERE'` with your actual VAPID key from the Firebase Console (*Project Settings > Cloud Messaging > Web configuration*).\n\n5.  **Run the local server:**\n    *   From the root of the project directory, run:\n        ```bash\n        http-server\n        ```\n    *   Open your browser and navigate to the local address provided by `http-server` (e.g., `http://127.0.0.1:8080`). You should start at the login page (`/Auth/login.html`).\n\n### Firebase Setup Notes\n\n*   **Authentication:** Enable \"Email/Password\" as a sign-in method in the Firebase Authentication console.\n*   **Firestore:** Your database structure will be created automatically as users sign up and interact with the app. You will need to configure Firestore Security Rules to ensure data is accessed securely.\n*   **Storage:** Ensure your Firebase Storage rules allow authenticated users to read and write to their own `profile_pictures/{userId}` path.\n\n### ‚ö†Ô∏è Security Warning\n\nThe payment verification logic in this project is designed to be handled by a **Firebase Cloud Function** (`verifyPaymentAndGrantReward`). The client-side code calls this function but does not perform the verification itself. This is the recommended secure approach for production.\n\nFor a production environment, you **must** implement this Cloud Function to securely communicate with the Flutterwave API, verify transactions, and grant subscriptions and referral rewards. Client-side verification is insecure and can be easily bypassed.\n\n---","size_bytes":6776},"env.example.js":{"content":"// env.example.js\n// ================================\n// This is a template file. Copy it to env.js and fill in your actual configuration.\n// env.js is ignored by Git to keep your keys secure.\n// ================================\n\n// Import Firebase SDK\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js\";\nimport { getAuth } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js\";\nimport { getFunctions } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-functions.js\";\nimport { getFirestore } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\nimport { getMessaging } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging.js\";\nimport { getStorage } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js\";\n\n// Firebase config - It's safe for this to be in client-side code.\nconst firebaseConfig = {\n  apiKey: \"YOUR_API_KEY\",\n  authDomain: \"YOUR_AUTH_DOMAIN\",\n  projectId: \"YOUR_PROJECT_ID\",\n  storageBucket: \"YOUR_STORAGE_BUCKET\",\n  messagingSenderId: \"YOUR_MESSAGING_SENDER_ID\",\n  appId: \"YOUR_APP_ID\",\n};\n\n// Initialize Firebase app\nconst app = initializeApp(firebaseConfig);\n\n// Export services\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const functions = getFunctions(app);\nexport const messaging = getMessaging(app);\nexport const storage = getStorage(app);\n\n// Flutterwave Public Key (Safe for frontend)\nexport const FLWPUBK = \"YOUR_FLUTTERWAVE_PUBLIC_KEY\";","size_bytes":1507},"env.js":{"content":"// env.js\n// ================================\n// Supabase-only configuration for StatWise PWA\n// All Firebase dependencies have been removed\n// ================================\n\n// Import Supabase client\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.4\";\n\n// Supabase configuration\nconst supabaseUrl = 'https://fwpriiugfjhtoymcbmso.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZ3cHJpaXVnZmpodG95bWNibXNvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MDc3MTgsImV4cCI6MjA3MjQ4MzcxOH0.Sy3iehhGx2UNi28UBEjfNd81TjMxOVXJjY9HJS3xVjs';\n\n// Create Supabase client with auth and storage configurations\nexport const supabase = createClient(supabaseUrl, supabaseKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    storage: window.localStorage\n  },\n  storage: {\n    buckets: {\n      'profile-pictures': {\n        public: true,\n        allowedMimeTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],\n        fileSizeLimit: 5242880 // 5MB\n      }\n    }\n  }\n});\n\n// Flutterwave Public Key (Safe for frontend)\nexport const FLWPUBK = \"FLWPUBK_TEST-e21b7f5eb963ae5160ae9264a0bdff37-X\";\n\n// Export auth for compatibility with existing code\nexport const auth = supabase.auth;\n\n// Additional Supabase services for backward compatibility\nexport const db = supabase;\nexport const storage = supabase.storage;\n\n// Remove Firebase messaging since we're not using it anymore\nexport const messaging = null;\n\nconsole.log('‚úÖ Supabase configuration loaded successfully!');","size_bytes":1580},"index.js":{"content":"// This file is intentionally left blank.\n// The application has been refactored to use client-side logic\n// instead of Firebase Cloud Functions to adhere to the free-tier-only requirement.\n// The original functions can be found in the project's version history if needed.","size_bytes":272},"main.js":{"content":"// main.js - StatWise PWA with Supabase-only implementation\nimport { supabase, FLWPUBK } from './env.js';\nimport { showLoader, hideLoader, showSpinner, hideSpinner } from './Loader/loader.js';\nimport { initInteractiveBackground, initializeTheme } from './ui.js';\nimport { initializeAppSecurity, manageInitialPageLoad } from './manager.js';\nimport { formatTimestamp, addHistoryUnique } from './utils.js';\nimport { ActivityManager } from './activity-manager.js';\n\n// ===== Global Variables =====\nconst main = document.querySelector(\"main\");\nconst navButtons = document.querySelectorAll(\".bottom-nav button\");\nconst defaultPage = \"home\";\nlet currentUser = null;\nlet verifiedTier = null; // Start as null until profile loads\nlet adsLoaded = false;\nlet adblockerDetected = false;\n\n// Initialize the app\ninitializeTheme(); // Initialize theme system\ninitializeSupabaseAuth();\ncheckPaymentRedirect();\n// Ad system will be initialized after user tier is loaded\n\n// ===== Authentication Setup =====\nasync function initializeSupabaseAuth() {\n    // Get initial session\n    const { data: { session }, error } = await supabase.auth.getSession();\n    \n    if (session) {\n        currentUser = session.user;\n        await handleUserLogin(session.user);\n    } else {\n        // Allow access to subscription page without authentication\n        const currentPage = localStorage.getItem('lastPage') || 'home';\n        if (currentPage === 'subscriptions') {\n            await loadPage('subscriptions');\n        } else {\n            redirectToLogin();\n        }\n    }\n\n    // Listen for auth changes\n    supabase.auth.onAuthStateChange(async (event, session) => {\n        console.log('Auth state changed:', event);\n        \n        if (event === 'SIGNED_IN' && session) {\n            currentUser = session.user;\n            await handleUserLogin(session.user);\n        } else if (event === 'SIGNED_OUT') {\n            currentUser = null;\n            redirectToLogin();\n        }\n    });\n}\n\n// ===== User Management =====\nasync function handleUserLogin(user) {\n    try {\n        showLoader();\n        console.log('User logged in:', user.email);\n        \n        // Create or update user profile\n        await createOrUpdateUserProfile(user);\n        \n        // Load user data and initialize app\n        await loadUserData(user);\n        \n        // Initialize the main application\n        initializeApp();\n        \n        hideLoader();\n    } catch (error) {\n        console.error('Error handling user login:', error);\n        hideLoader();\n    }\n}\n\nasync function createOrUpdateUserProfile(user) {\n    try {\n        const userData = {\n            id: user.id,\n            email: user.email,\n            username: user.user_metadata?.display_name || user.email.split('@')[0],\n            display_name: user.user_metadata?.display_name || user.email.split('@')[0],\n            current_tier: 'Free Tier',\n            tier: 'Free Tier',\n            subscription_status: 'active',\n            is_new_user: true,\n            notifications: true,\n            last_login: new Date().toISOString(),\n            updated_at: new Date().toISOString()\n        };\n\n        const { data, error } = await supabase\n            .from('user_profiles')\n            .upsert(userData, { onConflict: 'id' })\n            .select()\n            .single();\n\n        if (error && error.code !== '23505') { // Ignore unique constraint violations\n            console.warn('Profile creation warning:', error);\n        } else {\n            console.log('User profile created/updated:', data);\n        }\n\n        // Generate referral code if not exists\n        await generateReferralCode(user.id);\n        \n    } catch (error) {\n        console.warn('Error creating user profile:', error);\n    }\n}\n\nasync function loadUserData(user) {\n    try {\n        // Load user profile\n        const { data: profile, error } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', user.id)\n            .single();\n\n        if (profile) {\n            verifiedTier = profile.current_tier || 'Free Tier';\n            console.log('User tier loaded:', verifiedTier);\n            \n            // Initialize ad system now that we know the user's tier\n            initializeAdSystemForUser();\n        } else {\n            // Default to free tier if no profile found\n            verifiedTier = 'Free Tier';\n            initializeAdSystemForUser();\n        }\n    } catch (error) {\n        console.warn('Error loading user data:', error);\n    }\n}\n\n// ===== Referral System =====\nasync function generateReferralCode(userId) {\n    try {\n        const code = userId.substring(0, 8).toUpperCase();\n        \n        const { data, error } = await supabase\n            .from('referral_codes')\n            .upsert({\n                user_id: userId,\n                code: code,\n                username: currentUser?.email?.split('@')[0] || 'User',\n                total_referrals: 0,\n                active: true,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, { onConflict: 'user_id' })\n            .select()\n            .single();\n\n        if (error && error.code !== '23505') {\n            console.warn('Referral code generation warning:', error);\n        } else {\n            console.log('Referral code generated:', data?.code);\n        }\n    } catch (error) {\n        console.warn('Error generating referral code:', error);\n    }\n}\n\n// ===== Payment System =====\nfunction checkPaymentRedirect() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const paymentStatus = urlParams.get('payment');\n    const transactionId = urlParams.get('transaction_id');\n    \n    if (paymentStatus === 'success' && transactionId) {\n        setTimeout(() => {\n            showModal({ \n                message: `üéâ Welcome back!\\n\\nYour payment has been processed successfully.\\nTransaction ID: ${transactionId}\\n\\nPlease wait while we verify your subscription...`,\n                confirmClass: 'btn-success',\n                confirmText: 'Continue',\n                onConfirm: () => {\n                    loadPage('subscriptions');\n                }\n            });\n        }, 1000);\n        \n        window.history.replaceState({}, document.title, window.location.pathname);\n    } else if (paymentStatus === 'cancelled') {\n        setTimeout(() => {\n            showModal({ \n                message: '‚ùå Payment was cancelled.\\n\\nYour subscription has not been updated. You can try again anytime.',\n                confirmClass: 'btn-warning',\n                confirmText: 'OK'\n            });\n        }, 1000);\n        \n        window.history.replaceState({}, document.title, window.location.pathname);\n    }\n}\n\n// ===== App Navigation =====\nfunction initializeApp() {\n    // Initialize other app features first\n    initializeAppSecurity();\n    \n    // Set up navigation\n    navButtons.forEach(button => {\n        button.addEventListener(\"click\", () => {\n            const page = button.getAttribute(\"data-page\");\n            const tier = button.getAttribute(\"data-tier\");\n            \n            if (tier && !hasAccess(tier)) {\n                showUpgradeModal(tier);\n                return;\n            }\n            \n            loadPage(page);\n        });\n    });\n    \n    // Load the correct initial page (checks localStorage for last page)\n    loadInitialPage();\n}\n\nfunction loadInitialPage() {\n    // Determine page load priority: URL hash > localStorage > default\n    const initialHash = window.location.hash.substring(1);\n    const lastPage = localStorage.getItem(\"lastPage\");\n    const pageToLoad = initialHash || lastPage || defaultPage;\n    \n    console.log('Loading initial page:', pageToLoad, 'from:', initialHash ? 'hash' : lastPage ? 'localStorage' : 'default');\n    loadPage(pageToLoad);\n}\n\nfunction hasAccess(requiredTier) {\n    const tierLevels = {\n        'Free Tier': 0,\n        'Premium Tier': 1,\n        'VIP Tier': 2,\n        'VVIP Tier': 3\n    };\n    \n    const currentLevel = tierLevels[verifiedTier] || 0;\n    const requiredLevel = tierLevels[requiredTier] || 0;\n    \n    return currentLevel >= requiredLevel;\n}\n\nfunction showUpgradeModal(requiredTier) {\n    showModal({\n        message: `This feature requires ${requiredTier} subscription.\\n\\nWould you like to upgrade now?`,\n        confirmText: 'Upgrade',\n        cancelText: 'Cancel',\n        onConfirm: () => {\n            loadPage('subscriptions');\n        }\n    });\n}\n\nasync function loadPage(page) {\n    try {\n        showLoader();\n        \n        // Save current page to localStorage for reload persistence\n        localStorage.setItem('lastPage', page);\n        \n        // Update active navigation\n        navButtons.forEach(btn => {\n            btn.classList.toggle(\"active\", btn.getAttribute(\"data-page\") === page);\n        });\n        \n        // Add fade-out transition to current content\n        main.classList.add('page-fade-out');\n        \n        // Wait for fade-out animation to complete\n        await new Promise(resolve => setTimeout(resolve, 200));\n        \n        // Load page content\n        const response = await fetch(`./Pages/${page}.html`);\n        if (response.ok) {\n            const content = await response.text();\n            main.innerHTML = content;\n            \n            // Reset scroll position to top for each new page\n            main.scrollTop = 0;\n            \n            // Remove fade-out and add fade-in transition\n            main.classList.remove('page-fade-out');\n            main.classList.add('page-fade-in');\n            \n            // Initialize page-specific functionality\n            await initializePage(page);\n            \n            // Remove fade-in class after animation completes\n            setTimeout(() => {\n                main.classList.remove('page-fade-in');\n            }, 300);\n        } else {\n            main.innerHTML = '<div class=\"error\">Page not found</div>';\n            main.scrollTop = 0;\n            main.classList.remove('page-fade-out');\n        }\n        \n        hideLoader();\n    } catch (error) {\n        console.error('Error loading page:', error);\n        main.innerHTML = '<div class=\"error\">Error loading page</div>';\n        main.scrollTop = 0;\n        main.classList.remove('page-fade-out');\n        hideLoader();\n    }\n}\n\nasync function initializePage(page) {\n    switch (page) {\n        case 'home':\n            await initializeHomePage();\n            break;\n        case 'history':\n            await initializeHistoryPage();\n            break;\n        case 'profile':\n            await initializeProfilePage();\n            break;\n        case 'subscriptions':\n            await initializeSubscriptionsPage();\n            break;\n        case 'manage-subscription':\n            await initializeManageSubscriptionPage();\n            break;\n        case 'referral':\n            await initializeReferralPage();\n            break;\n        case 'insights':\n            await initializeInsightsPage();\n            break;\n    }\n}\n\n// ===== Page Initializers =====\nasync function initializeHomePage() {\n    // Load predictions based on user tier\n    await loadPredictions();\n    // Initialize league tabs\n    initializeLeagueTabs();\n}\n\nasync function loadPredictions() {\n    try {\n        // Determine accessible tiers based on user subscription\n        let accessibleTiers = ['free'];\n        \n        if (verifiedTier === 'Premium Tier') {\n            accessibleTiers.push('premium');\n        } else if (verifiedTier === 'VIP Tier') {\n            accessibleTiers.push('premium', 'vip');\n        } else if (verifiedTier === 'VVIP Tier') {\n            accessibleTiers.push('premium', 'vip', 'vvip');\n        }\n        \n        const { data: predictions, error } = await supabase\n            .from('predictions')\n            .select('*')\n            .in('tier', accessibleTiers)\n            .gte('kickoff_time', new Date().toISOString())\n            .order('kickoff_time', { ascending: true })\n            .limit(10);\n            \n        if (error) {\n            console.warn('Error loading predictions:', error);\n            return;\n        }\n        \n        displayPredictions(predictions || []);\n    } catch (error) {\n        console.error('Error loading predictions:', error);\n    }\n}\n\nfunction displayPredictions(predictions) {\n    const container = document.getElementById('predictions-container');\n    if (!container) return;\n    \n    if (predictions.length === 0) {\n        container.innerHTML = `\n            <div class=\"no-predictions\">\n                <h3>No predictions available</h3>\n                <p>Check back later for new AI predictions!</p>\n            </div>\n        `;\n        return;\n    }\n    \n    const predictionsHTML = predictions.map(prediction => `\n        <div class=\"prediction-card tier-${prediction.tier}\">\n            <div class=\"match-header\">\n                <h4>${prediction.home_team} vs ${prediction.away_team}</h4>\n                <span class=\"league\">${prediction.league}</span>\n            </div>\n            <div class=\"prediction-content\">\n                <div class=\"prediction-result\">\n                    <span class=\"label\">Prediction:</span>\n                    <span class=\"result\">${prediction.prediction}</span>\n                </div>\n                <div class=\"confidence\">\n                    <span class=\"label\">Confidence:</span>\n                    <span class=\"value\">${prediction.confidence}%</span>\n                </div>\n                ${prediction.odds ? `\n                    <div class=\"odds\">\n                        <span class=\"label\">Odds:</span>\n                        <span class=\"value\">${prediction.odds}</span>\n                    </div>\n                ` : ''}\n                <div class=\"kickoff\">\n                    <span class=\"label\">Kickoff:</span>\n                    <span class=\"time\">${formatTimestamp(prediction.kickoff_time)}</span>\n                </div>\n            </div>\n            ${prediction.reasoning ? `\n                <div class=\"reasoning\">\n                    <p>${prediction.reasoning}</p>\n                </div>\n            ` : ''}\n            <div class=\"prediction-actions\">\n                <button onclick=\"savePrediction('${prediction.id}')\" class=\"btn-save\">\n                    Save to History\n                </button>\n            </div>\n        </div>\n    `).join('');\n    \n    container.innerHTML = predictionsHTML;\n}\n\nasync function initializeHistoryPage() {\n    await loadUserPredictionHistory();\n    initializeHistoryTabs();\n}\n\nasync function loadUserPredictionHistory() {\n    if (!currentUser) return;\n    \n    try {\n        const { data: history, error } = await supabase\n            .from('user_prediction_history')\n            .select(`\n                *,\n                predictions (*)\n            `)\n            .eq('user_id', currentUser.id)\n            .order('saved_at', { ascending: false });\n            \n        if (error) {\n            console.warn('Error loading prediction history:', error);\n            return;\n        }\n        \n        displayPredictionHistory(history || []);\n    } catch (error) {\n        console.error('Error loading prediction history:', error);\n    }\n}\n\nfunction displayPredictionHistory(history) {\n    // Update predictions tab\n    const predictionsContainer = document.querySelector('#predictions-tab .history-container');\n    if (predictionsContainer) {\n        if (history.length === 0) {\n            predictionsContainer.innerHTML = `\n                <div class=\"no-history\">\n                    <h3>No saved predictions</h3>\n                    <p>Save predictions from the home page to track them here!</p>\n                </div>\n            `;\n        } else {\n            const historyHTML = history.map(item => {\n                const prediction = item.predictions;\n                return `\n                    <div class=\"history-item\">\n                        <div class=\"match-info\">\n                            <h4>${prediction.home_team} vs ${prediction.away_team}</h4>\n                            <span class=\"league\">${prediction.league}</span>\n                        </div>\n                        <div class=\"prediction-info\">\n                            <span class=\"prediction\">${prediction.prediction}</span>\n                            <span class=\"confidence\">${prediction.confidence}% confidence</span>\n                        </div>\n                        <div class=\"saved-date\">\n                            Saved: ${formatTimestamp(item.saved_at)}\n                        </div>\n                        ${item.notes ? `<div class=\"notes\">${item.notes}</div>` : ''}\n                    </div>\n                `;\n            }).join('');\n            predictionsContainer.innerHTML = historyHTML;\n        }\n    }\n    \n    // Load account history\n    loadAccountHistory();\n    \n    // Load transaction history  \n    loadTransactionHistory();\n}\n\nfunction initializeHistoryTabs() {\n    const tabButtons = document.querySelectorAll('.tab-btn');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            const targetTab = button.getAttribute('data-tab');\n            \n            // Update active button\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            button.classList.add('active');\n            \n            // Update active content\n            tabContents.forEach(content => {\n                content.classList.remove('active');\n                if (content.id === targetTab) {\n                    content.classList.add('active');\n                }\n            });\n        });\n    });\n}\n\nasync function loadAccountHistory() {\n    if (!currentUser) return;\n    \n    const accountContainer = document.querySelector('#account-tab .history-container');\n    if (!accountContainer) return;\n    \n    try {\n        // Get user profile updates, login history, etc.\n        const { data: profile, error } = await supabase\n            .from('user_profiles')\n            .select('created_at, last_login, current_tier, subscription_status')\n            .eq('id', currentUser.id)\n            .single();\n            \n        if (error) {\n            accountContainer.innerHTML = '<p>Error loading account history</p>';\n            return;\n        }\n        \n        accountContainer.innerHTML = `\n            <div class=\"account-history\">\n                <div class=\"history-item\">\n                    <h4>Account Created</h4>\n                    <p>${formatTimestamp(profile.created_at)}</p>\n                </div>\n                <div class=\"history-item\">\n                    <h4>Last Login</h4>\n                    <p>${formatTimestamp(profile.last_login)}</p>\n                </div>\n                <div class=\"history-item\">\n                    <h4>Current Tier</h4>\n                    <p>${profile.current_tier}</p>\n                </div>\n                <div class=\"history-item\">\n                    <h4>Subscription Status</h4>\n                    <p>${profile.subscription_status || 'active'}</p>\n                </div>\n            </div>\n        `;\n    } catch (error) {\n        console.error('Error loading account history:', error);\n        accountContainer.innerHTML = '<p>Error loading account history</p>';\n    }\n}\n\nasync function loadTransactionHistory() {\n    if (!currentUser) return;\n    \n    const transactionsContainer = document.querySelector('#transactions-tab .history-container');\n    if (!transactionsContainer) return;\n    \n    try {\n        const { data: transactions, error } = await supabase\n            .from('subscription_events')\n            .select('*')\n            .eq('user_id', currentUser.id)\n            .order('created_at', { ascending: false });\n            \n        if (error) {\n            transactionsContainer.innerHTML = '<p>Error loading transaction history</p>';\n            return;\n        }\n        \n        if (transactions.length === 0) {\n            transactionsContainer.innerHTML = '<p>No transactions found</p>';\n            return;\n        }\n        \n        const transactionsHTML = transactions.map(transaction => `\n            <div class=\"history-item\">\n                <div class=\"transaction-info\">\n                    <h4>${transaction.event_type}</h4>\n                    <p>Amount: ‚Ç¶${transaction.amount?.toLocaleString() || '0'}</p>\n                    <p>Status: ${transaction.status}</p>\n                    <p>Date: ${formatTimestamp(transaction.created_at)}</p>\n                </div>\n            </div>\n        `).join('');\n        \n        transactionsContainer.innerHTML = transactionsHTML;\n    } catch (error) {\n        console.error('Error loading transaction history:', error);\n        transactionsContainer.innerHTML = '<p>Error loading transaction history</p>';\n    }\n}\n\nasync function initializeProfilePage() {\n    await loadUserProfile();\n}\n\nasync function loadUserProfile() {\n    if (!currentUser) return;\n    \n    try {\n        const { data: profile, error } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', currentUser.id)\n            .single();\n            \n        if (error) {\n            console.warn('Error loading user profile:', error);\n            return;\n        }\n        \n        displayUserProfile(profile);\n    } catch (error) {\n        console.error('Error loading user profile:', error);\n    }\n}\n\nfunction displayUserProfile(profile) {\n    // Update user name\n    const userNameElement = document.getElementById('userName');\n    if (userNameElement) {\n        userNameElement.textContent = profile.display_name || profile.username || 'User';\n    }\n    \n    // Update user email\n    const userEmailElement = document.getElementById('userEmail');\n    if (userEmailElement) {\n        userEmailElement.textContent = profile.email || '';\n    }\n    \n    // Update user tier\n    const userTierElement = document.getElementById('user-tier');\n    if (userTierElement) {\n        userTierElement.textContent = profile.current_tier || 'Free Tier';\n    }\n    \n    // Update profile avatar\n    const avatarContainer = document.getElementById('profileAvatarContainer');\n    if (avatarContainer) {\n        if (profile.profile_picture_url) {\n            avatarContainer.innerHTML = `<img src=\"${profile.profile_picture_url}\" alt=\"Profile Picture\" class=\"avatar-img\" onclick=\"triggerAvatarUpload()\">`;\n        } else {\n            const initial = (profile.display_name || profile.username || 'U').charAt(0).toUpperCase();\n            avatarContainer.innerHTML = `<div class=\"default-avatar\" onclick=\"triggerAvatarUpload()\">${initial}</div>`;\n        }\n    }\n    \n    // Initialize profile page interactions\n    initializeProfileInteractions();\n}\n\nfunction initializeProfileInteractions() {\n    // Initialize dark mode toggle\n    const darkModeToggle = document.getElementById('darkModeToggle');\n    if (darkModeToggle) {\n        // Set current state\n        const currentTheme = localStorage.getItem('statwise-theme') || 'light';\n        darkModeToggle.checked = currentTheme === 'dark';\n        \n        // Add event listener\n        darkModeToggle.addEventListener('change', function() {\n            import('./ui.js').then(({ toggleTheme }) => {\n                toggleTheme();\n            });\n        });\n    }\n    \n    // Initialize inactive page toggle\n    const inactivePageToggle = document.getElementById('inactivePageToggle');\n    if (inactivePageToggle) {\n        // Set current state from activity manager\n        if (window.activityManager) {\n            const currentSetting = window.activityManager.getToggleSetting();\n            inactivePageToggle.checked = currentSetting;\n        }\n        \n        // Add event listener\n        inactivePageToggle.addEventListener('change', function() {\n            if (window.activityManager) {\n                window.activityManager.enableInactivePage(this.checked);\n            }\n        });\n    }\n    \n    // Initialize logout button\n    const logoutBtn = document.getElementById('logoutBtn');\n    if (logoutBtn) {\n        logoutBtn.addEventListener('click', window.signOut);\n    }\n    \n    // Initialize manage subscription button\n    const manageSubscription = document.getElementById('manageSubscription');\n    if (manageSubscription) {\n        manageSubscription.addEventListener('click', () => {\n            loadPage('manage-subscription');\n        });\n    }\n    \n    // Initialize referral button\n    const referralBtn = document.getElementById('referralBtn');\n    if (referralBtn) {\n        referralBtn.addEventListener('click', () => {\n            loadPage('referral');\n        });\n    }\n    \n    // Initialize reset storage button\n    const resetStorage = document.getElementById('resetStorage');\n    if (resetStorage) {\n        resetStorage.addEventListener('click', () => {\n            showModal({\n                message: 'Are you sure you want to reset local cache? This will clear saved predictions and preferences.',\n                confirmText: 'Reset Cache',\n                cancelText: 'Cancel',\n                onConfirm: () => {\n                    localStorage.clear();\n                    location.reload();\n                }\n            });\n        });\n    }\n    \n    // Initialize edit username button\n    const editUsernameBtn = document.getElementById('editUsernameBtn');\n    if (editUsernameBtn) {\n        editUsernameBtn.addEventListener('click', () => {\n            const userNameElement = document.getElementById('userName');\n            if (userNameElement) {\n                const currentName = userNameElement.textContent;\n                \n                showModal({\n                    message: 'Enter your new username:',\n                    inputType: 'text',\n                    inputValue: currentName,\n                    inputPlaceholder: 'Enter username',\n                    confirmText: 'Save',\n                    cancelText: 'Cancel',\n                    onConfirm: async (newUsername) => {\n                        if (newUsername && newUsername.trim() && newUsername.trim() !== currentName) {\n                            await updateUsername(newUsername.trim());\n                        }\n                    }\n                });\n            }\n        });\n    }\n    \n    // Initialize avatar upload\n    const avatarUpload = document.getElementById('avatarUpload');\n    if (avatarUpload) {\n        console.log('Avatar upload input found, adding event listener');\n        avatarUpload.addEventListener('change', handleAvatarUpload);\n    } else {\n        console.warn('Avatar upload input not found during initialization');\n    }\n}\n\n// ===== Avatar Upload Functions =====\nfunction triggerAvatarUpload() {\n    const avatarUpload = document.getElementById('avatarUpload');\n    if (avatarUpload) {\n        console.log('Triggering file upload dialog...');\n        // Reset the input value to ensure change event fires even for same file\n        avatarUpload.value = '';\n        avatarUpload.click();\n    } else {\n        console.error('Avatar upload input not found');\n    }\n}\n\n// Make functions globally available\nwindow.triggerAvatarUpload = triggerAvatarUpload;\nwindow.loadPage = loadPage;\n\nasync function handleAvatarUpload(event) {\n    const file = event.target.files[0];\n    if (!file) return;\n    \n    // Validate file type\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n    if (!allowedTypes.includes(file.type)) {\n        showModal({\n            message: 'Please select a valid image file (JPEG, PNG, GIF, or WebP).',\n            confirmText: 'OK'\n        });\n        return;\n    }\n    \n    // Validate file size (5MB limit)\n    const maxSize = 5 * 1024 * 1024; // 5MB in bytes\n    if (file.size > maxSize) {\n        showModal({\n            message: 'Image file is too large. Please select an image smaller than 5MB.',\n            confirmText: 'OK'\n        });\n        return;\n    }\n    \n    try {\n        showSpinner();\n        \n        // Generate unique filename\n        const fileExt = file.name.split('.').pop();\n        const fileName = `${currentUser.id}-${Date.now()}.${fileExt}`;\n        \n        // Upload to Supabase Storage\n        const { data: uploadData, error: uploadError } = await supabase.storage\n            .from('profile-pictures')\n            .upload(fileName, file, {\n                cacheControl: '3600',\n                upsert: true\n            });\n            \n        if (uploadError) {\n            console.error('Upload error:', uploadError);\n            showModal({\n                message: 'Failed to upload profile picture. Please try again.',\n                confirmText: 'OK'\n            });\n            return;\n        }\n        \n        // Get public URL\n        const { data: urlData } = supabase.storage\n            .from('profile-pictures')\n            .getPublicUrl(fileName);\n            \n        if (!urlData.publicUrl) {\n            showModal({\n                message: 'Failed to get image URL. Please try again.',\n                confirmText: 'OK'\n            });\n            return;\n        }\n        \n        // Update user profile with new image URL\n        const { error: updateError } = await supabase\n            .from('user_profiles')\n            .update({ \n                profile_picture_url: urlData.publicUrl,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', currentUser.id);\n            \n        if (updateError) {\n            console.error('Profile update error:', updateError);\n            showModal({\n                message: 'Failed to update profile. Please try again.',\n                confirmText: 'OK'\n            });\n            return;\n        }\n        \n        // Update the avatar display immediately\n        const avatarContainer = document.getElementById('profileAvatarContainer');\n        if (avatarContainer) {\n            avatarContainer.innerHTML = `<img src=\"${urlData.publicUrl}\" alt=\"Profile Picture\" class=\"avatar-img\" onclick=\"triggerAvatarUpload()\">`;\n        }\n        \n        showModal({\n            message: '‚úÖ Profile picture updated successfully!',\n            confirmText: 'OK'\n        });\n        \n        console.log('Profile picture updated:', urlData.publicUrl);\n        \n    } catch (error) {\n        console.error('Error uploading avatar:', error);\n        showModal({\n            message: 'An error occurred while uploading your profile picture. Please try again.',\n            confirmText: 'OK'\n        });\n    } finally {\n        hideSpinner();\n        // Clear the file input\n        event.target.value = '';\n    }\n}\n\n\nasync function initializeSubscriptionsPage() {\n    console.log('Initializing subscriptions page...');\n    await loadSubscriptionInfo();\n    initializeSubscriptionTabs();\n    initializeSubscriptionButtons();\n    console.log('Subscriptions page initialized successfully');\n}\n\nasync function initializeManageSubscriptionPage() {\n    console.log('Initializing manage subscription page...');\n    await loadManageSubscriptionInfo();\n    initializeManageSubscriptionButtons();\n}\n\nasync function loadManageSubscriptionInfo() {\n    if (!currentUser) {\n        console.warn('No current user found for manage subscription');\n        return;\n    }\n    \n    console.log('Loading manage subscription info for user:', currentUser.id);\n    \n    try {\n        const { data: profile, error } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', currentUser.id)\n            .single();\n            \n        if (error) {\n            console.warn('Error loading subscription info:', error);\n            return;\n        }\n        \n        console.log('Profile data loaded:', profile);\n        displayManageSubscriptionInfo(profile);\n    } catch (error) {\n        console.error('Error loading subscription info:', error);\n    }\n}\n\nfunction displayManageSubscriptionInfo(profile) {\n    const planInfoCard = document.getElementById('plan-info-card');\n    if (!planInfoCard) {\n        console.warn('plan-info-card element not found');\n        return;\n    }\n    \n    console.log('Displaying subscription info for profile:', profile);\n    \n    const currentTier = profile.current_tier || 'Free Tier';\n    const subscriptionEnd = profile.subscription_end;\n    const subscriptionStatus = profile.subscription_status || 'active';\n    \n    let planContent = `\n        <h2>Current Plan: ${currentTier}</h2>\n        <p><strong>Status:</strong> ${subscriptionStatus}</p>\n    `;\n    \n    if (subscriptionEnd) {\n        planContent += `<p><strong>Next Billing:</strong> ${formatTimestamp(subscriptionEnd)}</p>`;\n    }\n    \n    if (currentTier === 'Free Tier') {\n        planContent += `\n            <p>You're currently on the free plan. Upgrade to unlock premium features!</p>\n            <button onclick=\"window.loadPage('subscriptions')\" class=\"button\">Upgrade Now</button>\n        `;\n    } else {\n        planContent += `\n            <p>Thank you for being a ${currentTier} subscriber!</p>\n        `;\n        \n        // Show auto-renewal and cancellation options for paid plans\n        const autoRenewContainer = document.getElementById('auto-renew-container');\n        const cancelContainer = document.getElementById('cancel-subscription-container');\n        \n        if (autoRenewContainer) autoRenewContainer.style.display = 'block';\n        if (cancelContainer) cancelContainer.style.display = 'block';\n    }\n    \n    planInfoCard.innerHTML = planContent;\n    console.log('Subscription info displayed successfully');\n}\n\nfunction initializeManageSubscriptionButtons() {\n    // Change Plan button\n    const changePlanBtn = document.getElementById('changePlanBtn');\n    if (changePlanBtn) {\n        changePlanBtn.addEventListener('click', () => {\n            loadPage('subscriptions');\n        });\n    }\n    \n    // Auto-renewal toggle\n    const toggleAutoRenewBtn = document.getElementById('toggleAutoRenewBtn');\n    if (toggleAutoRenewBtn) {\n        toggleAutoRenewBtn.textContent = 'Manage Auto-Renewal';\n        toggleAutoRenewBtn.addEventListener('click', () => {\n            showModal({\n                message: 'Auto-renewal management is coming soon! Contact support for assistance.',\n                confirmText: 'OK'\n            });\n        });\n    }\n    \n    // Cancel subscription button\n    const cancelSubscriptionBtn = document.getElementById('cancelSubscriptionBtn');\n    if (cancelSubscriptionBtn) {\n        cancelSubscriptionBtn.addEventListener('click', () => {\n            showModal({\n                message: 'Are you sure you want to cancel your subscription? You will lose access to premium features at the end of your billing period.',\n                confirmText: 'Yes, Cancel',\n                cancelText: 'Keep Subscription',\n                onConfirm: () => {\n                    handleSubscriptionCancellation();\n                }\n            });\n        });\n    }\n}\n\nasync function handleSubscriptionCancellation() {\n    try {\n        showSpinner();\n        \n        // Update subscription status to cancelled\n        const { error } = await supabase\n            .from('user_profiles')\n            .update({ \n                subscription_status: 'cancelled',\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', currentUser.id);\n            \n        if (error) {\n            console.error('Error cancelling subscription:', error);\n            showModal({\n                message: 'Error cancelling subscription. Please try again or contact support.',\n                confirmText: 'OK'\n            });\n            return;\n        }\n        \n        showModal({\n            message: 'Your subscription has been cancelled. You will retain access to premium features until the end of your current billing period.',\n            confirmText: 'OK',\n            onConfirm: () => {\n                // Reload the page to show updated status\n                loadManageSubscriptionInfo();\n            }\n        });\n        \n    } catch (error) {\n        console.error('Error handling cancellation:', error);\n        showModal({\n            message: 'An error occurred. Please try again.',\n            confirmText: 'OK'\n        });\n    } finally {\n        hideSpinner();\n    }\n}\n\nasync function loadSubscriptionInfo() {\n    if (!currentUser) {\n        console.log('No user authenticated, skipping subscription info load');\n        return;\n    }\n    \n    try {\n        const { data: profile, error } = await supabase\n            .from('user_profiles')\n            .select('current_tier, subscription_period, subscription_start, subscription_end, subscription_status')\n            .eq('id', currentUser.id)\n            .single();\n            \n        if (error) {\n            console.warn('Error loading subscription info:', error);\n            return;\n        }\n        \n        displaySubscriptionInfo(profile);\n    } catch (error) {\n        console.error('Error loading subscription info:', error);\n    }\n}\n\nfunction displaySubscriptionInfo(profile) {\n    // Update current tier display\n    const userTierElement = document.getElementById('user-tier');\n    if (userTierElement) {\n        userTierElement.textContent = profile.current_tier || 'Free Tier';\n    }\n    \n    // Update tier expiry\n    const tierExpiryElement = document.getElementById('tier-expiry');\n    if (tierExpiryElement && profile.subscription_end) {\n        tierExpiryElement.textContent = `Expires: ${formatTimestamp(profile.subscription_end)}`;\n        tierExpiryElement.style.display = 'block';\n    } else if (tierExpiryElement) {\n        tierExpiryElement.style.display = 'none';\n    }\n}\n\nfunction initializeSubscriptionTabs() {\n    const tabButtons = document.querySelectorAll('[data-tab]');\n    const tabContents = document.querySelectorAll('.pricing-container');\n    \n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            const targetTab = button.getAttribute('data-tab');\n            \n            // Update active button\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            button.classList.add('active');\n            \n            // Update active content\n            tabContents.forEach(content => {\n                content.classList.remove('active');\n                if (content.id === targetTab) {\n                    content.classList.add('active');\n                }\n            });\n        });\n    });\n}\n\nfunction initializeLeagueTabs() {\n    console.log('Initializing league tabs...');\n    const tabButtons = document.querySelectorAll('.tab-btn[data-tab]');\n    const tabContents = document.querySelectorAll('.tab-content');\n    \n    console.log('Found tab buttons:', tabButtons.length);\n    console.log('Found tab contents:', tabContents.length);\n    \n    tabButtons.forEach(button => {\n        button.addEventListener('click', () => {\n            const targetTab = button.getAttribute('data-tab');\n            console.log('Tab clicked:', targetTab);\n            \n            // Update active button\n            tabButtons.forEach(btn => btn.classList.remove('active'));\n            button.classList.add('active');\n            \n            // Update active content\n            tabContents.forEach(content => {\n                content.classList.remove('active');\n                if (content.id === targetTab) {\n                    content.classList.add('active');\n                    console.log('Activated tab content:', targetTab);\n                }\n            });\n        });\n    });\n}\n\nfunction initializeSubscriptionButtons() {\n    console.log('Initializing subscription buttons...');\n    const subscribeButtons = document.querySelectorAll('.subscribe-btn');\n    console.log('Found subscription buttons:', subscribeButtons.length);\n    \n    subscribeButtons.forEach(button => {\n        button.addEventListener('click', (e) => {\n            e.preventDefault();\n            console.log('Subscription button clicked');\n            \n            const tier = button.getAttribute('data-tier');\n            const amount = button.getAttribute('data-amount');\n            const period = button.getAttribute('data-period');\n            \n            console.log('Subscription details:', { tier, amount, period });\n            \n            if (tier === 'free') {\n                showModal({\n                    message: 'You are already on the free tier!',\n                    confirmText: 'OK'\n                });\n                return;\n            }\n            \n            // Handle subscription upgrade\n            handleSubscriptionUpgrade(tier, amount, period);\n        });\n    });\n}\n\nasync function handleSubscriptionUpgrade(tier, amount, period) {\n    try {\n        // Check if user is authenticated before showing upgrade modal\n        if (!currentUser) {\n            showModal({\n                message: 'Please log in to upgrade your subscription.',\n                confirmText: 'Login',\n                cancelText: 'Cancel',\n                onConfirm: () => {\n                    redirectToLogin();\n                }\n            });\n            return;\n        }\n\n        // For authenticated users, show payment flow\n        showModal({\n            message: `Upgrade to ${tier} tier for ‚Ç¶${amount}/${period}?`,\n            confirmText: 'Upgrade',\n            cancelText: 'Cancel',\n            onConfirm: () => {\n                // Initialize Flutterwave payment\n                initializePayment(tier, period, amount);\n            }\n        });\n    } catch (error) {\n        console.error('Error handling subscription upgrade:', error);\n        showModal({\n            message: 'Error processing subscription upgrade. Please try again.',\n            confirmText: 'OK'\n        });\n    }\n}\n\nasync function initializeReferralPage() {\n    await loadReferralData();\n}\n\nasync function loadReferralData() {\n    if (!currentUser) return;\n    \n    try {\n        // Get user's referral code\n        const { data: referralCode, error: codeError } = await supabase\n            .from('referral_codes')\n            .select('*')\n            .eq('user_id', currentUser.id)\n            .single();\n            \n        // Get user's referrals\n        const { data: referrals, error: referralsError } = await supabase\n            .from('referrals')\n            .select(`\n                *,\n                user_profiles!referred_id (display_name, email, current_tier, created_at)\n            `)\n            .eq('referrer_id', currentUser.id)\n            .order('created_at', { ascending: false });\n            \n        if (codeError && codeError.code !== 'PGRST116') {\n            console.warn('Error loading referral code:', codeError);\n        }\n        \n        if (referralsError) {\n            console.warn('Error loading referrals:', referralsError);\n        }\n        \n        displayReferralData(referralCode, referrals || []);\n    } catch (error) {\n        console.error('Error loading referral data:', error);\n    }\n}\n\nfunction displayReferralData(referralCode, referrals) {\n    const code = referralCode?.code || 'No Code Found';\n    \n    // Update referral code input\n    const referralCodeInput = document.getElementById('referralCodeInput');\n    if (referralCodeInput) {\n        referralCodeInput.value = code;\n    }\n    \n    // Update referral list\n    const referralListContainer = document.getElementById('referralListContainer');\n    if (referralListContainer) {\n        if (referrals.length === 0) {\n            referralListContainer.innerHTML = '<p>No referrals yet. Share your code to get started!</p>';\n        } else {\n            const referralHTML = referrals.map(referral => `\n                <div class=\"referral-item\">\n                    <div class=\"referral-info\">\n                        <h4>${referral.user_profiles?.display_name || 'User'}</h4>\n                        <p class=\"email\">${referral.user_profiles?.email || ''}</p>\n                        <span class=\"tier\">${referral.user_profiles?.current_tier || 'Free Tier'}</span>\n                        <div class=\"referral-date\">\n                            Joined: ${formatTimestamp(referral.created_at)}\n                        </div>\n                    </div>\n                    <div class=\"referral-reward\">\n                        ${referral.reward_claimed ? '‚úÖ Rewarded' : '‚è≥ Pending'}\n                    </div>\n                </div>\n            `).join('');\n            referralListContainer.innerHTML = referralHTML;\n        }\n    }\n    \n    // Update rewards count\n    const rewardsCount = document.getElementById('rewardsCount');\n    if (rewardsCount) {\n        const claimedRewards = referrals.filter(r => r.reward_claimed).length;\n        rewardsCount.textContent = claimedRewards;\n    }\n    \n    // Update rewards container\n    const rewardsContainer = document.getElementById('rewardsContainer');\n    if (rewardsContainer) {\n        const claimedReferrals = referrals.filter(r => r.reward_claimed);\n        if (claimedReferrals.length === 0) {\n            rewardsContainer.innerHTML = '<p>No rewards earned yet. You\\'ll get a reward when a referred user subscribes!</p>';\n        } else {\n            const rewardsHTML = claimedReferrals.map(referral => `\n                <div class=\"reward-item\">\n                    <span>Premium Week from ${referral.user_profiles?.display_name || 'User'}</span>\n                    <span class=\"reward-amount\">‚Ç¶${referral.reward_amount?.toLocaleString() || '500'}</span>\n                </div>\n            `).join('');\n            rewardsContainer.innerHTML = rewardsHTML;\n        }\n    }\n    \n    // Initialize referral page interactions\n    initializeReferralInteractions();\n}\n\nfunction initializeReferralInteractions() {\n    // Initialize copy referral code button\n    const copyReferralCodeBtn = document.getElementById('copyReferralCodeBtn');\n    if (copyReferralCodeBtn) {\n        copyReferralCodeBtn.addEventListener('click', () => {\n            const referralCodeInput = document.getElementById('referralCodeInput');\n            if (referralCodeInput && referralCodeInput.value !== 'Loading...' && referralCodeInput.value !== 'No Code Found') {\n                navigator.clipboard.writeText(referralCodeInput.value).then(() => {\n                    // Show success feedback\n                    copyReferralCodeBtn.textContent = 'Copied!';\n                    copyReferralCodeBtn.style.background = '#28a745';\n                    setTimeout(() => {\n                        copyReferralCodeBtn.textContent = 'Copy';\n                        copyReferralCodeBtn.style.background = '';\n                    }, 2000);\n                }).catch(() => {\n                    showModal({\n                        message: 'Failed to copy referral code',\n                        confirmText: 'OK'\n                    });\n                });\n            }\n        });\n    }\n    \n    // Initialize share buttons\n    const shareWhatsAppBtn = document.getElementById('shareWhatsAppBtn');\n    if (shareWhatsAppBtn) {\n        shareWhatsAppBtn.addEventListener('click', () => {\n            const referralCode = document.getElementById('referralCodeInput')?.value;\n            if (referralCode && referralCode !== 'Loading...' && referralCode !== 'No Code Found') {\n                const message = `Join StatWise using my referral code: ${referralCode} and get exclusive AI sports predictions!`;\n                const url = `https://wa.me/?text=${encodeURIComponent(message)}`;\n                window.open(url, '_blank');\n            }\n        });\n    }\n    \n    const shareTwitterBtn = document.getElementById('shareTwitterBtn');\n    if (shareTwitterBtn) {\n        shareTwitterBtn.addEventListener('click', () => {\n            const referralCode = document.getElementById('referralCodeInput')?.value;\n            if (referralCode && referralCode !== 'Loading...' && referralCode !== 'No Code Found') {\n                const message = `Join StatWise using my referral code: ${referralCode} and get exclusive AI sports predictions!`;\n                const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(message)}`;\n                window.open(url, '_blank');\n            }\n        });\n    }\n    \n    const shareGenericBtn = document.getElementById('shareGenericBtn');\n    if (shareGenericBtn) {\n        shareGenericBtn.addEventListener('click', () => {\n            const referralCode = document.getElementById('referralCodeInput')?.value;\n            if (referralCode && referralCode !== 'Loading...' && referralCode !== 'No Code Found') {\n                const message = `Join StatWise using my referral code: ${referralCode} and get exclusive AI sports predictions!`;\n                if (navigator.share) {\n                    navigator.share({\n                        title: 'StatWise Referral',\n                        text: message\n                    });\n                } else {\n                    // Fallback to copying to clipboard\n                    navigator.clipboard.writeText(message).then(() => {\n                        showModal({\n                            message: 'Referral message copied to clipboard!',\n                            confirmText: 'OK'\n                        });\n                    });\n                }\n            }\n        });\n    }\n}\n\nasync function initializeInsightsPage() {\n    // VIP and VVIP tier only\n    if (!hasAccess('VIP Tier')) {\n        showUpgradeModal('VIP Tier');\n        return;\n    }\n    \n    await loadInsights();\n}\n\nasync function loadInsights() {\n    try {\n        const { data: accuracy, error } = await supabase\n            .from('prediction_accuracy')\n            .select('*')\n            .order('date', { ascending: false })\n            .limit(30);\n            \n        if (error) {\n            console.warn('Error loading insights:', error);\n            return;\n        }\n        \n        displayInsights(accuracy || []);\n    } catch (error) {\n        console.error('Error loading insights:', error);\n    }\n}\n\nfunction displayInsights(accuracy) {\n    const container = document.getElementById('insights-container');\n    if (!container) return;\n    \n    const totalPredictions = accuracy.reduce((sum, day) => sum + (day.total_predictions || 0), 0);\n    const correctPredictions = accuracy.reduce((sum, day) => sum + (day.correct_predictions || 0), 0);\n    const overallAccuracy = totalPredictions > 0 ? (correctPredictions / totalPredictions * 100).toFixed(1) : 0;\n    \n    container.innerHTML = `\n        <div class=\"insights-section\">\n            <div class=\"insights-header\">\n                <h3>AI Prediction Performance</h3>\n                <div class=\"overall-stats\">\n                    <div class=\"stat-card\">\n                        <h4>Overall Accuracy</h4>\n                        <span class=\"stat-value\">${overallAccuracy}%</span>\n                    </div>\n                    <div class=\"stat-card\">\n                        <h4>Total Predictions</h4>\n                        <span class=\"stat-value\">${totalPredictions}</span>\n                    </div>\n                    <div class=\"stat-card\">\n                        <h4>Correct Predictions</h4>\n                        <span class=\"stat-value\">${correctPredictions}</span>\n                    </div>\n                </div>\n            </div>\n            \n            <div class=\"accuracy-chart\">\n                <h4>Recent Performance</h4>\n                ${accuracy.length === 0 ? `\n                    <p>No performance data available yet.</p>\n                ` : `\n                    <div class=\"chart-data\">\n                        ${accuracy.slice(0, 7).map(day => {\n                            const dayAccuracy = day.total_predictions > 0 ? \n                                (day.correct_predictions / day.total_predictions * 100).toFixed(1) : 0;\n                            return `\n                                <div class=\"chart-bar\">\n                                    <div class=\"bar\" style=\"height: ${dayAccuracy}%\"></div>\n                                    <span class=\"date\">${new Date(day.date).toLocaleDateString()}</span>\n                                    <span class=\"accuracy\">${dayAccuracy}%</span>\n                                </div>\n                            `;\n                        }).join('')}\n                    </div>\n                `}\n            </div>\n        </div>\n    `;\n}\n\n// ===== Global Functions =====\nwindow.savePrediction = async function(predictionId) {\n    if (!currentUser) {\n        showModal({ message: 'Please log in to save predictions.' });\n        return;\n    }\n    \n    try {\n        const { data, error } = await supabase\n            .from('user_prediction_history')\n            .insert({\n                user_id: currentUser.id,\n                prediction_id: predictionId,\n                saved_at: new Date().toISOString()\n            });\n            \n        if (error && error.code !== '23505') { // Ignore duplicate key errors\n            console.warn('Error saving prediction:', error);\n            showModal({ message: 'Error saving prediction. Please try again.' });\n            return;\n        }\n        \n        showModal({ \n            message: 'Prediction saved to your history!',\n            confirmText: 'View History',\n            cancelText: 'Continue',\n            onConfirm: () => loadPage('history')\n        });\n    } catch (error) {\n        console.error('Error saving prediction:', error);\n        showModal({ message: 'Error saving prediction. Please try again.' });\n    }\n};\n\n// Referral code copying is now handled in initializeReferralInteractions()\n\nwindow.signOut = async function() {\n    try {\n        const { error } = await supabase.auth.signOut();\n        if (error) {\n            console.error('Error signing out:', error);\n        }\n    } catch (error) {\n        console.error('Error signing out:', error);\n    }\n};\n\nwindow.initializePayment = function(tier, period, amount) {\n    if (!currentUser) {\n        showModal({ message: 'Please log in to subscribe.' });\n        return;\n    }\n    \n    // Initialize Flutterwave payment\n    FlutterwaveCheckout({\n        public_key: FLWPUBK,\n        tx_ref: `statwise_${currentUser.id}_${Date.now()}`,\n        amount: amount,\n        currency: \"NGN\",\n        payment_options: \"card,mobilemoney,ussd\",\n        customer: {\n            email: currentUser.email,\n            phone_number: \"\",\n            name: currentUser.user_metadata?.display_name || currentUser.email\n        },\n        customizations: {\n            title: \"StatWise Subscription\",\n            description: `${tier} - ${period}`,\n            logo: \"\"\n        },\n        callback: function (data) {\n            console.log('Payment callback:', data);\n            if (data.status === \"successful\") {\n                // Show loader while verifying payment\n                showLoader();\n                handleSuccessfulPayment(data, tier, period, amount);\n            } else if (data.status === \"cancelled\") {\n                console.log('Payment was cancelled by user');\n                showModal({\n                    message: 'Payment was cancelled. You can try again anytime.',\n                    confirmText: 'OK'\n                });\n            } else {\n                console.log('Payment failed:', data);\n                showModal({\n                    message: 'Payment failed. Please try again or contact support.',\n                    confirmText: 'OK'\n                });\n            }\n        },\n        onclose: function() {\n            console.log('Payment modal closed');\n            // Don't show loader if modal is just closed without payment\n        }\n    });\n};\n\nasync function handleSuccessfulPayment(paymentData, tier, period, amount) {\n    try {\n        console.log('üîÑ Verifying payment with server...');\n        \n        // Call Supabase Edge Function to verify payment\n        const { data: verificationResult, error: verificationError } = await supabase.functions.invoke('verify-payment', {\n            body: {\n                transaction_id: paymentData.transaction_id,\n                tx_ref: paymentData.tx_ref,\n                amount: amount,\n                tier: tier,\n                period: period,\n                user_id: currentUser.id,\n                flw_ref: paymentData.flw_ref || paymentData.transaction_id\n            }\n        });\n\n        // Always hide loader after verification attempt (success or error)\n        hideLoader();\n\n        if (verificationError) {\n            console.error('Payment verification failed:', verificationError);\n            showModal({\n                message: 'Payment verification failed. Please contact support with your transaction ID: ' + paymentData.transaction_id,\n                confirmText: 'OK'\n            });\n            return;\n        }\n\n        if (verificationResult?.success) {\n            // Update local user tier\n            verifiedTier = tier;\n            console.log('‚úÖ Payment verified and subscription updated successfully!');\n            \n            showModal({\n                message: `üéâ Congratulations!\\n\\nYour ${tier} subscription is now active!\\n\\nTransaction ID: ${paymentData.transaction_id}`,\n                confirmText: 'Continue',\n                onConfirm: () => {\n                    // Reload the subscriptions page to show updated tier\n                    loadPage('subscriptions');\n                }\n            });\n        } else {\n            console.error('Payment verification failed:', verificationResult);\n            showModal({\n                message: verificationResult?.message || 'Payment could not be verified. Please contact support.',\n                confirmText: 'OK'\n            });\n        }\n        \n    } catch (error) {\n        hideLoader();\n        console.error('Error handling successful payment:', error);\n        showModal({\n            message: 'Payment successful but there was an error verifying it. Please contact support with your transaction ID: ' + paymentData.transaction_id,\n            confirmText: 'OK'\n        });\n    }\n}\n\nfunction redirectToLogin() {\n    console.log('No user found, redirecting to login...');\n    window.location.href = './Auth/login.html';\n}\n\n// ===== Ad System Management =====\nfunction initializeAdSystemForUser() {\n    console.log('üîß Initializing ad system for tier:', verifiedTier);\n    \n    if (verifiedTier === \"Free Tier\") {\n        // Check if consent has been granted for advertising\n        checkConsentAndLoadAds();\n    } else {\n        console.log('üëë Premium user - no ads');\n        hideAdBlockerMessage(); // Hide any existing adblocker message\n    }\n}\n\n// Check consent status and load ads accordingly\nfunction checkConsentAndLoadAds() {\n    // Listen for consent updates\n    window.addEventListener('consentUpdated', function(event) {\n        const consent = event.detail;\n        console.log('üç™ Consent updated:', consent);\n        \n        if (consent.ad_storage === 'granted' && verifiedTier === \"Free Tier\") {\n            loadAdsForFreeUsers();\n        } else {\n            console.log('üö´ Ads not loaded - consent denied or premium user');\n        }\n    });\n    \n    // Check if consent manager is available and get current consent\n    if (window.consentManager) {\n        const currentConsent = window.consentManager.getConsentStatus();\n        if (currentConsent && currentConsent.ad_storage === 'granted') {\n            loadAdsForFreeUsers();\n        } else {\n            console.log('‚è≥ Waiting for user consent to load ads...');\n        }\n    } else {\n        // Fallback: load consent manager if not available\n        console.log('‚è≥ Consent manager not ready, waiting...');\n        setTimeout(checkConsentAndLoadAds, 1000);\n    }\n}\n\nfunction loadAdsForFreeUsers() {\n    if (verifiedTier !== \"Free Tier\" || adsLoaded) {\n        console.log('üëë Premium user - ads disabled');\n        return;\n    }\n\n    console.log('üì∫ Loading ads for free user...');\n    \n    // Load Google AdSense script dynamically\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9868946535437166';\n    script.crossOrigin = 'anonymous';\n    \n    script.onload = () => {\n        console.log('‚úÖ AdSense loaded successfully');\n        adsLoaded = true;\n        // Check for adblocker after script loads\n        setTimeout(detectAdBlocker, 1000);\n    };\n    \n    script.onerror = () => {\n        console.log('‚ùå AdSense failed to load - likely blocked');\n        adblockerDetected = true;\n        showAdBlockerMessage();\n    };\n    \n    document.head.appendChild(script);\n}\n\nfunction detectAdBlocker() {\n    console.log('üïµÔ∏è Checking for adblocker...');\n    \n    // Create a test ad element\n    const testAd = document.createElement('div');\n    testAd.innerHTML = '&nbsp;';\n    testAd.className = 'adsbox adsbygoogle';\n    testAd.style.position = 'absolute';\n    testAd.style.left = '-9999px';\n    testAd.style.width = '1px';\n    testAd.style.height = '1px';\n    \n    document.body.appendChild(testAd);\n    \n    setTimeout(() => {\n        const isBlocked = testAd.offsetHeight === 0 || \n                         testAd.offsetWidth === 0 || \n                         testAd.style.display === 'none' ||\n                         testAd.style.visibility === 'hidden';\n        \n        document.body.removeChild(testAd);\n        \n        if (isBlocked || !window.adsbygoogle) {\n            console.log('üö´ Adblocker detected');\n            adblockerDetected = true;\n            showAdBlockerMessage();\n        } else {\n            console.log('‚úÖ No adblocker detected');\n            adblockerDetected = false;\n        }\n    }, 100);\n}\n\nfunction showAdBlockerMessage() {\n    // Only show for free users\n    if (verifiedTier !== \"Free Tier\") return;\n    \n    console.log('üì¢ Showing adblocker message');\n    \n    // Create full-page overlay\n    const overlay = document.createElement('div');\n    overlay.id = 'adblocker-overlay';\n    overlay.innerHTML = `\n        <div class=\"adblocker-container\">\n            <div class=\"adblocker-content\">\n                <div class=\"adblocker-icon\">üö´</div>\n                <h2>AdBlocker Detected</h2>\n                <p>We noticed you're using an ad blocker. To continue using StatWise for free, please:</p>\n                <ul>\n                    <li>‚úÖ Disable your ad blocker for this site</li>\n                    <li>üîÑ Refresh the page</li>\n                    <li>üíé Or upgrade to Premium for an ad-free experience</li>\n                </ul>\n                <div class=\"adblocker-buttons\">\n                    <button onclick=\"window.location.reload()\" class=\"btn-refresh\">Refresh Page</button>\n                    <button onclick=\"window.loadPage('subscriptions')\" class=\"btn-upgrade\">Upgrade to Premium</button>\n                </div>\n                <p class=\"adblocker-note\">Ads help us keep StatWise free for everyone!</p>\n            </div>\n        </div>\n    `;\n    \n    document.body.appendChild(overlay);\n}\n\nfunction hideAdBlockerMessage() {\n    const overlay = document.getElementById('adblocker-overlay');\n    if (overlay) {\n        overlay.remove();\n    }\n}\n\n// ===== Username Update Function =====\nasync function updateUsername(newUsername) {\n    try {\n        showSpinner();\n        \n        const { error } = await supabase\n            .from('user_profiles')\n            .update({ \n                display_name: newUsername,\n                username: newUsername,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', currentUser.id);\n            \n        if (error) {\n            console.error('Error updating username:', error);\n            showModal({\n                message: 'Failed to update username. Please try again.',\n                confirmText: 'OK'\n            });\n            return;\n        }\n        \n        // Update the display immediately\n        const userNameElement = document.getElementById('userName');\n        if (userNameElement) {\n            userNameElement.textContent = newUsername;\n        }\n        \n        showModal({\n            message: 'Username updated successfully!',\n            confirmText: 'OK'\n        });\n        \n    } catch (error) {\n        console.error('Error updating username:', error);\n        showModal({\n            message: 'Failed to update username. Please try again.',\n            confirmText: 'OK'\n        });\n    } finally {\n        hideSpinner();\n    }\n}\n\n// Theme initialization is now handled by ui.js\n\n// ===== Modal Helper Function =====\nfunction showModal(options) {\n    const modal = document.createElement('div');\n    modal.className = 'modal-overlay';\n    \n    const inputFieldHTML = options.inputType ? `\n        <div class=\"modal-input-wrapper\">\n            <input type=\"${options.inputType}\" class=\"modal-input\" value=\"${options.inputValue || ''}\" placeholder=\"${options.inputPlaceholder || ''}\">\n        </div>\n    ` : '';\n    \n    modal.innerHTML = `\n        <div class=\"modal-content\">\n            <div class=\"modal-message\">${options.message}</div>\n            ${inputFieldHTML}\n            <div class=\"modal-actions\">\n                ${options.cancelText ? `<button class=\"btn-cancel\">${options.cancelText}</button>` : ''}\n                <button class=\"btn-confirm ${options.confirmClass || 'btn-primary'}\">${options.confirmText || 'OK'}</button>\n            </div>\n        </div>\n    `;\n    \n    document.body.appendChild(modal);\n    \n    const confirmBtn = modal.querySelector('.btn-confirm');\n    const cancelBtn = modal.querySelector('.btn-cancel');\n    const inputField = modal.querySelector('.modal-input');\n    \n    // Focus input if it exists\n    if (inputField) {\n        setTimeout(() => inputField.focus(), 100);\n    }\n    \n    confirmBtn.addEventListener('click', () => {\n        const inputValue = inputField ? inputField.value : null;\n        document.body.removeChild(modal);\n        if (options.onConfirm) {\n            if (inputField) {\n                options.onConfirm(inputValue);\n            } else {\n                options.onConfirm();\n            }\n        }\n    });\n    \n    if (cancelBtn) {\n        cancelBtn.addEventListener('click', () => {\n            document.body.removeChild(modal);\n            if (options.onCancel) options.onCancel();\n        });\n    }\n    \n    // Handle Enter key for input\n    if (inputField) {\n        inputField.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                confirmBtn.click();\n            }\n        });\n    }\n    \n    // Close on overlay click\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            document.body.removeChild(modal);\n            if (options.onCancel) options.onCancel();\n        }\n    });\n}\n\nconsole.log('‚úÖ StatWise main application loaded with Supabase integration!');","size_bytes":66926},"manager.js":{"content":"// manager.js\n\n/**\n * Disables the right-click context menu to deter basic inspection.\n */\nfunction disableContextMenu() {\n    document.addEventListener('contextmenu', event => event.preventDefault());\n}\n\n/**\n * Disables common developer tools keyboard shortcuts.\n */\nfunction disableDevToolsShortcuts() {\n    document.addEventListener('keydown', function (e) {\n        // Block F12\n        if (e.keyCode === 123) {\n            e.preventDefault();\n        }\n        // Block Ctrl+Shift+I (or Cmd+Option+I on Mac)\n        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.keyCode === 73) {\n            e.preventDefault();\n        }\n        // Block Ctrl+Shift+J (or Cmd+Option+J on Mac)\n        if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.keyCode === 74) {\n            e.preventDefault();\n        }\n        // Block Ctrl+U (or Cmd+Option+U on Mac)\n        if ((e.ctrlKey || e.metaKey) && e.keyCode === 85) {\n            e.preventDefault();\n        }\n    });\n}\n\n/**\n * Periodically clears the console and displays a warning message.\n * Note: This is a deterrent and can be bypassed by a determined user.\n */\nfunction runConsoleDeterrent() {\n    setInterval(() => {\n        console.clear();\n        console.log(\"%cInspecting this area is not allowed.\", \"color:red; font-size:16px;\");\n    }, 3000); // Runs every 3 seconds\n}\n\n/**\n * Initializes all client-side security measures.\n */\nexport function initializeAppSecurity() {\n    disableContextMenu();\n    disableDevToolsShortcuts();\n    runConsoleDeterrent();\n    console.log(\"Client-side security manager initialized.\");\n}\n\n/**\n * Determines the initial page to load and executes the loading function.\n * It checks if the main content area is empty and then decides the page\n * based on URL hash, localStorage, or a default value.\n * @param {string} userId - The current user's ID.\n * @param {function} loadPageCallback - The function to call to load the page, expecting (page, userId, addToHistory).\n */\nexport function manageInitialPageLoad(userId, loadPageCallback) {\n    const defaultPage = \"home\";\n\n    // Determine page load priority: URL hash > localStorage > default.\n    const initialHash = window.location.hash.substring(1);\n    const pageToLoad = initialHash || localStorage.getItem(\"lastPage\") || defaultPage;\n\n    // Load the page without adding a new entry to the browser's history.\n    loadPageCallback(pageToLoad, userId, false);\n    return pageToLoad;\n}","size_bytes":2420},"styles.css":{"content":"* {\n    margin: 0;\n    padding: 0;\n    text-decoration: none;\n    list-style-type: none;\n    font-family: \"Optimistic\";\n    box-sizing: border-box;\n}\n\n::-webkit-scrollbar {\n    display: none;\n}\n\n@font-face {\n    font-family: 'Optimistic';\n    src: url('./Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\n:root {\n    --header-height: 60px;\n    --nav-height: 60px;\n    --max-width: 1200px;\n    --container-padding: 20px;\n    --mobile-padding: 15px;\n}\n\n/* ---------------- Body ---------------- */\nhtml {\n    background: #f8f9fc;\n    /* Enhanced light background - more vibrant than dull #f4f5f7 */\n    color: #1a1a1c;\n    /* Slightly deeper text color for better contrast */\n    font-family: \"Optimistic\";\n    height: 100%;\n}\n\nbody {\n    /* Body will now inherit background and color from html */\n    font-family: \"Optimistic\";\n    height: 100%;\n    position: relative; /* Needed for animation container */\n    overflow-x: hidden; /* Prevent horizontal scroll from animation */\n    /* Prevent browser pull-to-refresh */\n    overscroll-behavior-y: contain;\n    -webkit-overflow-scrolling: touch;\n    max-width: 100vw;\n}\n\n/* ---------------- Animated Background ---------------- */\n.animated-background {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1;\n    background: #f8f9fc;\n    /* Solid enhanced background - no gradient as requested */\n    overflow: hidden;\n}\n\n/* Gradient overlays removed to comply with no-gradient requirement */\n\n/* All gradient overlays removed to comply with no-gradient requirement */\n\n/* Animation keyframes removed with gradient overlays */\n\n/* ---------------- Header ---------------- */\nheader {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: var(--header-height);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #ffffff;\n    color: #1c1c1e;\n    border-bottom: 1px solid #e0e0e0;\n    z-index: 1000;\n    padding: 0 var(--mobile-padding);\n}\n\n.app-name {\n    font-size: 25px;\n    font-weight: bold;\n    color: #0e639c;\n    text-align: center;\n    width: 100%;\n    margin: 0;\n}\n\n/* ---------------- Main ---------------- */\nmain {\n    position: relative;\n    margin-top: var(--header-height);\n    padding: 20px var(--mobile-padding) 20px var(--mobile-padding);\n    padding-bottom: calc(var(--nav-height) + 20px);\n    min-height: calc(100vh - var(--header-height) - var(--nav-height));\n    overflow-y: auto;\n    overflow-x: hidden;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: var(--max-width);\n    width: 100%;\n    /* Additional overscroll prevention for main content */\n    overscroll-behavior-y: contain;\n    /* Prevent scroll sync between pages */\n    scroll-behavior: auto;\n    isolation: isolate;\n}\n\n/* ---------------- Page Transitions ---------------- */\n.page-fade-out {\n    animation: fadeOut 0.2s ease-out forwards;\n}\n\n.page-fade-in {\n    animation: fadeIn 0.3s ease-in forwards;\n}\n\n@keyframes fadeOut {\n    from {\n        opacity: 1;\n        transform: translateY(0);\n    }\n\n    to {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(-10px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n/* ---------------- Bottom Navigation ---------------- */\n.bottom-nav {\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n    background-color: #ffffff;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    padding: 8px 0;\n    z-index: 1000;\n    height: var(--nav-height);\n}\n\n.bottom-nav button {\n    background: none;\n    border: none;\n    color: #555;\n    font-size: 10px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    cursor: pointer;\n}\n\n.bottom-nav .icon {\n    width: 22px;\n    height: 22px;\n    margin-bottom: 2px;\n    background-color: #555;\n    /* Default inactive color */\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    transition: background-color 0.3s ease;\n}\n\n.icon-home {\n    -webkit-mask-image: url(./Assets/Icons/house.svg);\n    mask-image: url(./Assets/Icons/house.svg);\n}\n\n.icon-history {\n    -webkit-mask-image: url(./Assets/Icons/bar-chart.svg);\n    mask-image: url(./Assets/Icons/bar-chart.svg);\n}\n\n.icon-subscriptions {\n    -webkit-mask-image: url(./Assets/Icons/gem.svg);\n    mask-image: url(./Assets/Icons/gem.svg);\n}\n\n.icon-profile {\n    -webkit-mask-image: url(./Assets/Icons/user.svg);\n    mask-image: url(./Assets/Icons/user.svg);\n}\n\n.icon-insights {\n    -webkit-mask-image: url(./Assets/Icons/insights.svg);\n    /* You need to add this icon */\n    mask-image: url(./Assets/Icons/insights.svg);\n}\n\n.icon-edit {\n    -webkit-mask-image: url(./Assets/Icons/edit.svg);\n    mask-image: url(./Assets/Icons/edit.svg);\n}\n\n/* Hide tier-gated nav buttons by default to prevent flash of content */\n.bottom-nav button[data-tier] {\n    display: none;\n}\n\n.bottom-nav button.active {\n    color: #0e639c;\n}\n\n.bottom-nav button.active .icon {\n    background-color: #0e639c;\n    /* Active color */\n}\n\n.bottom-nav button:hover .icon {\n    animation: shake 0.3s ease-in-out;\n}\n\n@keyframes shake {\n    0% {\n        transform: translateX(0);\n    }\n\n    25% {\n        transform: translateX(-3px);\n    }\n\n    50% {\n        transform: translateX(3px);\n    }\n\n    75% {\n        transform: translateX(-3px);\n    }\n\n    100% {\n        transform: translateX(0);\n    }\n}\n\n/* ---------------- Page Titles ---------------- */\n.page-title {\n    font-size: 20px;\n    margin-bottom: 12px;\n    font-weight: bold;\n    color: #0e639c;\n    text-align: center;\n}\n\n/* ---------------- Search Bar ---------------- */\n.search-container {\n    margin-bottom: 16px;\n}\n\n.search-wrapper {\n    position: relative;\n    background-color: #fff;\n    border-radius: 8px;\n    border: 1px solid #ccc;\n    transition: border-color 0.3s ease;\n}\n\n.search-wrapper:focus-within {\n    border-color: #0e639c;\n}\n\n#predictionSearch {\n    width: 100%;\n    padding: 10px 15px;\n    border: none;\n    background-color: transparent;\n    color: #333;\n    font-size: 14px;\n    position: relative;\n    z-index: 2;\n}\n\n#predictionSearch:focus {\n    outline: none;\n}\n\n#search-ghost-text {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 10px 15px;\n    font-size: 14px;\n    color: #ccc;\n    z-index: 1;\n    pointer-events: none;\n    white-space: nowrap;\n    overflow: hidden;\n}\n\n#predictionSearch {\n    padding-right: 35px; /* Make space for clear button */\n}\n\n#search-clear-btn {\n    position: absolute;\n    right: 10px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    font-size: 22px;\n    color: #999;\n    cursor: pointer;\n    padding: 0 5px;\n    line-height: 1;\n    display: none; /* JS will toggle this */\n}\n\n/* ---------------- Cards ---------------- */\n.card {\n    background: #ffffff;\n    border-radius: 10px;\n    padding: 16px;\n    margin-bottom: 16px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n}\n\n/* ---------------- Subscription Cards ---------------- */\n.pricing-container {\n    display: grid;\n    grid-template-columns: 1fr;\n    gap: 24px;\n    margin-bottom: 20px;\n}\n\n/* ================== RESPONSIVE DESIGN ================== */\n\n/* Small Mobile (up to 480px) */\n@media (max-width: 480px) {\n    :root {\n        --mobile-padding: 12px;\n    }\n    \n    .app-name {\n        font-size: 20px;\n    }\n    \n    main {\n        padding: 15px var(--mobile-padding) 15px var(--mobile-padding);\n        padding-bottom: calc(var(--nav-height) + 15px);\n    }\n    \n    .bottom-nav button {\n        font-size: 9px;\n        padding: 4px 2px;\n    }\n    \n    .bottom-nav .icon {\n        width: 18px;\n        height: 18px;\n    }\n    \n    .subscription-card,\n    .profile-card,\n    .card {\n        padding: 15px;\n        margin-bottom: 15px;\n    }\n    \n    .page-title {\n        font-size: 1.5rem;\n        margin-bottom: 15px;\n    }\n}\n\n/* Large Mobile/Small Tablet (481px to 767px) */\n@media (min-width: 481px) and (max-width: 767px) {\n    :root {\n        --mobile-padding: 16px;\n    }\n    \n    .app-name {\n        font-size: 22px;\n    }\n    \n    main {\n        padding: 18px var(--mobile-padding) 18px var(--mobile-padding);\n        padding-bottom: calc(var(--nav-height) + 18px);\n    }\n    \n    .subscription-card,\n    .profile-card,\n    .card {\n        padding: 18px;\n        margin-bottom: 18px;\n    }\n}\n\n/* Tablet (768px to 1023px) */\n@media (min-width: 768px) and (max-width: 1023px) {\n    :root {\n        --container-padding: 24px;\n    }\n    \n    main {\n        padding: 24px var(--container-padding) 24px var(--container-padding);\n        padding-bottom: calc(var(--nav-height) + 24px);\n    }\n    \n    .app-name {\n        font-size: 26px;\n    }\n    \n    .pricing-container {\n        grid-template-columns: 1fr 1fr;\n    }\n    \n    .subscription-card,\n    .profile-card,\n    .card {\n        padding: 24px;\n        margin-bottom: 24px;\n    }\n    \n    .page-title {\n        font-size: 2rem;\n    }\n    \n    .bottom-nav button {\n        font-size: 11px;\n        padding: 6px 8px;\n    }\n    \n    .bottom-nav .icon {\n        width: 24px;\n        height: 24px;\n    }\n}\n\n/* Desktop (1024px and up) */\n@media (min-width: 1024px) {\n    :root {\n        --container-padding: 32px;\n    }\n    \n    main {\n        padding: 32px var(--container-padding) 32px var(--container-padding);\n        padding-bottom: calc(var(--nav-height) + 32px);\n    }\n    \n    .app-name {\n        font-size: 28px;\n    }\n    \n    .pricing-container {\n        grid-template-columns: 1fr 1fr;\n        gap: 32px;\n    }\n    \n    .subscription-card,\n    .profile-card,\n    .card {\n        padding: 28px;\n        margin-bottom: 28px;\n    }\n    \n    .page-title {\n        font-size: 2.2rem;\n        margin-bottom: 24px;\n    }\n    \n    .bottom-nav button {\n        font-size: 12px;\n        padding: 8px 12px;\n    }\n    \n    .bottom-nav .icon {\n        width: 26px;\n        height: 26px;\n    }\n    \n    /* Better spacing for large screens */\n    .profile-container,\n    .predictions-container {\n        max-width: 900px;\n        margin: 0 auto;\n    }\n}\n\n/* Extra Large Desktop (1200px and up) */\n@media (min-width: 1200px) {\n    main {\n        max-width: 1100px;\n    }\n    \n    .pricing-container {\n        grid-template-columns: repeat(2, 1fr);\n        gap: 40px;\n        max-width: 800px;\n        margin: 0 auto;\n    }\n    \n    .profile-container,\n    .predictions-container {\n        max-width: 1000px;\n    }\n}\n\n/* ================== RESPONSIVE COMPONENTS ================== */\n\n/* Responsive Buttons */\n@media (max-width: 480px) {\n    .button,\n    .subscribe-btn,\n    .btn-primary,\n    .btn-secondary {\n        padding: 10px 16px;\n        font-size: 14px;\n    }\n    \n    .modal-actions button {\n        padding: 8px 12px;\n        font-size: 13px;\n    }\n}\n\n@media (min-width: 768px) {\n    .button,\n    .subscribe-btn,\n    .btn-primary,\n    .btn-secondary {\n        padding: 12px 24px;\n        font-size: 16px;\n    }\n    \n    .modal-actions button {\n        padding: 10px 20px;\n        font-size: 15px;\n    }\n}\n\n/* Responsive Inputs and Forms */\n@media (max-width: 480px) {\n    input[type=\"text\"],\n    input[type=\"email\"],\n    input[type=\"password\"],\n    textarea,\n    select {\n        padding: 10px;\n        font-size: 14px;\n    }\n}\n\n@media (min-width: 768px) {\n    input[type=\"text\"],\n    input[type=\"email\"],\n    input[type=\"password\"],\n    textarea,\n    select {\n        padding: 12px;\n        font-size: 16px;\n    }\n}\n\n/* Responsive Tab Navigation */\n@media (max-width: 480px) {\n    .tab-btn {\n        padding: 8px 12px;\n        font-size: 13px;\n    }\n    \n    .tab-container {\n        gap: 8px;\n    }\n}\n\n@media (min-width: 768px) {\n    .tab-btn {\n        padding: 12px 24px;\n        font-size: 15px;\n    }\n    \n    .tab-container {\n        gap: 12px;\n    }\n}\n\n/* Modal Input Field Styling */\n.modal-input-wrapper {\n    margin: 20px 0;\n}\n\n.modal-input {\n    width: 100%;\n    padding: 12px;\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    font-size: 16px;\n    font-family: inherit;\n    outline: none;\n    transition: border-color 0.3s ease;\n}\n\n.modal-input:focus {\n    border-color: #0e639c;\n    box-shadow: 0 0 0 2px rgba(14, 99, 156, 0.1);\n}\n\n/* Responsive Modal */\n@media (max-width: 480px) {\n    .modal-content,\n    .inactive-content {\n        width: 95%;\n        padding: 16px;\n        margin: 10px;\n    }\n    \n    .modal-overlay {\n        padding: 20px 10px;\n    }\n    \n    .modal-input {\n        padding: 10px;\n        font-size: 14px;\n    }\n}\n\n@media (min-width: 768px) {\n    .modal-content {\n        width: 85%;\n        max-width: 500px;\n        padding: 24px;\n    }\n    \n    .inactive-content {\n        max-width: 450px;\n        padding: 48px 32px;\n    }\n}\n\n.subscription-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 20px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    transition: transform 0.2s ease, border 0.2s ease;\n}\n\n.subscription-card:hover {\n    transform: translateY(-4px);\n}\n\n.subscription-card.free {\n    border: 2px solid #4caf50;\n}\n\n.subscription-card.premium {\n    border: 2px solid #2196f3;\n}\n\n.subscription-card.vip {\n    border: 2px solid #9c27b0;\n}\n\n.subscription-card.vvip {\n    border: 2px solid #ff9800;\n}\n\n.subscription-card h2 {\n    font-size: 18px;\n    color: #0e639c;\n    margin-bottom: 8px;\n}\n\n.subscription-card .price {\n    font-size: 16px;\n    font-weight: bold;\n    margin: 8px 0;\n    color: #333;\n}\n\n.subscription-card ul {\n    padding: 0;\n    margin: 12px 0;\n    text-align: left;\n}\n\n.subscription-card ul li {\n    margin: 6px 0;\n    padding-left: 20px;\n    position: relative;\n    font-size: 14px;\n    color: #555;\n}\n\n.subscription-card ul li::before {\n    content: \"‚úî\";\n    color: #0e639c;\n    position: absolute;\n    left: 0;\n}\n\n/* New subscription card elements */\n.tier-badge {\n    position: absolute;\n    top: -8px;\n    right: 12px;\n    background: #4caf50;\n    color: white;\n    padding: 4px 12px;\n    border-radius: 12px;\n    font-size: 11px;\n    font-weight: bold;\n    text-transform: uppercase;\n    z-index: 2;\n}\n\n.tier-badge.popular {\n    background: #ff9800;\n    animation: pulse 2s infinite;\n}\n\n.tier-badge.elite {\n    background: #9c27b0;\n}\n\n.tier-badge.pro {\n    background: linear-gradient(45deg, #ff6b6b, #ffd93d);\n    background-size: 200% 200%;\n    animation: gradientShift 3s ease infinite;\n}\n\n@keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n}\n\n@keyframes gradientShift {\n    0%, 100% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n}\n\n.prediction-limit {\n    background: rgba(14, 99, 156, 0.1);\n    color: #0e639c;\n    padding: 6px 12px;\n    border-radius: 8px;\n    font-weight: bold;\n    font-size: 13px;\n    margin: 8px 0;\n}\n\n.savings-badge {\n    background: #4caf50;\n    color: white;\n    padding: 4px 8px;\n    border-radius: 6px;\n    font-size: 12px;\n    font-weight: bold;\n    margin: 4px 0;\n    display: inline-block;\n}\n\n.tier-features {\n    margin: 12px 0;\n    text-align: center;\n}\n\n.feature-highlight {\n    background: #f0f8ff;\n    color: #0e639c;\n    padding: 6px 10px;\n    border-radius: 6px;\n    font-size: 12px;\n    font-weight: bold;\n    margin: 4px 0;\n}\n\n.success-rate {\n    background: #e8f5e8;\n    color: #2e7d32;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: bold;\n    margin: 4px 0;\n}\n\n.roi-indicator {\n    background: #fff3e0;\n    color: #ef6c00;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: bold;\n    margin: 4px 0;\n}\n\n.guarantee {\n    background: #f3e5f5;\n    color: #7b1fa2;\n    padding: 4px 8px;\n    border-radius: 4px;\n    font-size: 11px;\n    font-weight: bold;\n    margin: 4px 0;\n    border: 1px solid #7b1fa2;\n}\n\n/* Position the subscription card relative for badge positioning */\n.subscription-card {\n    position: relative;\n}\n\n.subscription-card .subscribe-btn {\n    margin-top: auto;\n    padding: 8px 16px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    text-decoration: none;\n    transition: background 0.3s ease;\n}\n\n.subscription-card .subscribe-btn:hover {\n    background: #0b4f7a;\n}\n\n/* Current Subscription Banner */\n.current-tier {\n    background: #ffffff;\n    border: 2px solid #0e639c;\n    border-radius: 10px;\n    padding: 12px 16px;\n    margin-bottom: 16px;\n    text-align: center;\n    font-size: 15px;\n    font-weight: bold;\n    color: #333;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n}\n\n.subscription-card.is-current-plan {\n    transform: scale(1.02);\n    box-shadow: 0 0 15px rgba(14, 99, 156, 0.5);\n}\n\n.current-tier strong {\n    color: #0e639c;\n}\n\n/* ---------------- Profile ---------------- */\n.profile-container {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n    padding: 8px 0;\n}\n\n.profile-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 16px;\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n}\n\n.profile-card h2 {\n    font-size: 18px;\n    color: #0e639c;\n    margin-bottom: 4px;\n}\n\n.profile-card p {\n    font-size: 14px;\n    color: #666;\n    margin: 0;\n}\n\n/* Profile avatar / username display */\n.profile-header {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n    margin-bottom: 16px;\n}\n\n.profile-avatar {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background: #f4f5f7;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 28px;\n    font-weight: bold;\n    color: #0e639c;\n    border: 2px solid #0e639c;\n    cursor: pointer;\n    overflow: hidden;\n    transition: border-color 0.3s ease;\n    position: relative;\n}\n\n.profile-avatar:hover {\n    border-color: #4caf50;\n}\n\n.profile-avatar:hover::after {\n    content: 'üì∑';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.6);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 20px;\n    border-radius: 50%;\n    opacity: 1;\n    transition: opacity 0.3s ease;\n}\n\n.profile-avatar .avatar-img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n    border-radius: 50%;\n}\n\n.profile-avatar .default-avatar {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: #f4f5f7;\n    color: #0e639c;\n    font-size: 28px;\n    font-weight: bold;\n    border-radius: 50%;\n}\n\n.profile-avatar-img {\n    width: 100%;\n    height: 100%;\n    object-fit: cover;\n}\n\n.tier-expiry-date {\n    font-size: 13px;\n    color: #555;\n    margin-top: 4px;\n    display: none;\n    /* Hidden by default */\n}\n\n.profile-username {\n    font-size: 20px;\n    font-weight: bold;\n    color: #111;\n}\n\n.profile-email {\n    font-size: 14px;\n    color: #666;\n}\n\n.username-container {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.edit-icon {\n    cursor: pointer;\n    width: 16px;\n    height: 16px;\n    background-color: #555;\n    transition: background-color 0.2s ease;\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    -webkit-mask-image: url(./Assets/Icons/edit.svg);\n    mask-image: url(./Assets/Icons/edit.svg);\n}\n\n.icon-referral {\n    -webkit-mask-image: url(./Assets/Icons/referral.svg);\n    mask-image: url(./Assets/Icons/referral.svg);\n}\n\n.edit-icon:hover {\n    background-color: #0e639c;\n}\n\n.dark-mode .edit-icon {\n    background-color: #d4d4d4; /* Standard dark mode inactive color */\n}\n\n/* Profile Stats */\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n    gap: 16px;\n    text-align: center;\n    margin-top: 12px;\n}\n\n.stat-item {\n    display: flex;\n    flex-direction: column;\n}\n\n.stat-label {\n    font-size: 13px;\n    color: #666;\n    margin-bottom: 4px;\n}\n\n.stat-value {\n    font-size: 16px;\n    font-weight: bold;\n    color: #333;\n}\n\n.dark-mode .stat-label {\n    color: #bbb;\n}\n\n.dark-mode .stat-value {\n    color: #eee;\n}\n\n/* Profile Settings */\n.setting-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px 0;\n}\n\n/* Profile Card Buttons */\n.profile-card button {\n    margin-top: 8px;\n    padding: 8px 16px;\n    border-radius: 8px;\n    color: #fff;\n    font-weight: bold;\n    border: none;\n    cursor: pointer;\n    transition: background 0.3s ease;\n}\n\n.danger-zone-buttons {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n#logoutBtn,\n#resetStorage {\n    background: #d9534f;\n}\n\n#logoutBtn:hover,\n#resetStorage:hover {\n    background: #c9302c;\n}\n\n/* Toggle Switch */\n.switch {\n    position: relative;\n    display: inline-block;\n    width: 50px;\n    height: 24px;\n}\n\n.switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #e0e6ed;\n    transition: 0.4s;\n    border-radius: 34px;\n    border: 2px solid #d1d9e0;\n}\n\n.slider::before {\n    position: absolute;\n    content: \"\";\n    height: 18px;\n    width: 18px;\n    left: 3px;\n    bottom: 3px;\n    background-color: white;\n    transition: 0.4s;\n    border-radius: 50%;\n}\n\ninput:checked+.slider {\n    background-color: #0e639c;\n}\n\ninput:checked+.slider::before {\n    transform: translateX(26px);\n}\n\n\n\n/* ---------------- Modal ---------------- */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 2000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.6);\n    justify-content: center;\n    align-items: center;\n}\n\n.modal-overlay {\n    display: flex;\n    position: fixed;\n    z-index: 2000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.6);\n    justify-content: center;\n    align-items: center;\n}\n\n.modal-content {\n    background: #ffffff;\n    color: #333;\n    padding: 20px;\n    border-radius: 12px;\n    width: 85%;\n    max-width: 400px;\n    text-align: center;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);\n}\n\n.modal-content input {\n    width: 100%;\n    padding: 10px;\n    margin-top: 10px;\n    border: 1px solid #ccc;\n    border-radius: 6px;\n}\n\n.modal-actions {\n    margin-top: 15px;\n    display: flex;\n    justify-content: space-around;\n    gap: 10px;\n}\n\n.modal-actions button {\n    padding: 8px 16px;\n    border: none;\n    border-radius: 8px;\n    cursor: pointer;\n    font-size: 14px;\n}\n\n.modal-actions .btn-secondary {\n    background: #6c757d;\n    color: white;\n}\n\n.modal-actions .btn-secondary:hover {\n    background: #5a6268;\n}\n\n.modal-actions .btn-primary {\n    background: #0e639c;\n    color: white;\n}\n\n.modal-actions .btn-primary:hover {\n    background: #0b4f7a;\n}\n\n.modal-actions .btn-danger {\n    background: #d9534f;\n    color: white;\n}\n\n.modal-actions .btn-danger:hover {\n    background: #c9302c;\n}\n\n/* ---------------- History Page ---------------- */\n/* History Container */\n.history-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n/* Shared Data Card Styles */\n.history-card,\n.prediction-card {\n    border: 2px solid;\n    border-color: #e0e0e0;\n    border-radius: 10px;\n    padding: 15px;\n    background-color: #ffffff;\n    color: #1c1c1e;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);\n}\n\n.history-title {\n    font-size: 1.2rem;\n    margin-bottom: 0.4rem;\n    color: #111;\n}\n\n.history-detail {\n    font-size: 1rem;\n    color: #444;\n}\n\n.history-time {\n    font-size: 0.9rem;\n    color: #777;\n    margin-bottom: 0.8rem;\n}\n\n/* Result Styles */\n.history-result {\n    margin-top: 0.6rem;\n    font-weight: bold;\n    padding: 4px 8px;\n    border-radius: 6px;\n    display: inline-block;\n}\n\n.history-result.win {\n    color: #4caf50;\n    border: 2px solid #4caf50;\n}\n\n.history-result.loss {\n    color: #f44336;\n    border: 2px solid #f44336;\n}\n\n.history-result.pending {\n    color: #ff9800;\n    border: 2px solid #ff9800;\n}\n\n/* Tab Content */\n.history-section .tab-content {\n    display: none;\n}\n\n.history-section .tab-content.active {\n    display: block;\n}\n\n/* ---------------- Tabs ---------------- */\n/* League tabs wrapper */\n.league-tabs-wrapper {\n    position: relative;\n    margin-bottom: 20px;\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 12px 16px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n    border: 1px solid rgba(0, 0, 0, 0.1);\n    max-height: 80px;\n    transition: max-height 0.3s ease, opacity 0.3s ease, transform 0.3s ease;\n    overflow: hidden;\n}\n\n/* Scrollable tabs container */\n.scrollable-tabs {\n    display: flex;\n    gap: 8px;\n    overflow-x: auto;\n    scroll-behavior: smooth;\n    scrollbar-width: none; /* Firefox */\n    -ms-overflow-style: none; /* IE and Edge */\n    padding: 0;\n    margin-bottom: 0;\n    flex-wrap: nowrap;\n    scroll-snap-type: x proximity;\n}\n\n.scrollable-tabs::-webkit-scrollbar {\n    display: none; /* Chrome, Safari, Opera */\n}\n\n/* Regular tab container for other pages */\n.tab-container:not(.scrollable-tabs),\n.history-tabs {\n    display: flex;\n    justify-content: center;\n    gap: 12px;\n    margin-bottom: 16px;\n}\n\n/* Remove collapsed state - tabs should always be visible on mobile */\n\n.tab-btn {\n    padding: 6px 16px;\n    border-radius: 20px;\n    border: 1px solid #0e639c;\n    background: transparent;\n    color: #0e639c;\n    font-weight: 500;\n    font-size: 14px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    white-space: nowrap;\n    flex-shrink: 0;\n    scroll-snap-align: start;\n}\n\n.tab-btn.active {\n    background: #0e639c;\n    color: #fff;\n    border-color: #0e639c;\n}\n\n.tab-btn:hover {\n    background: #0e639c;\n    color: #fff;\n    border-color: #0e639c;\n    transform: translateY(-1px);\n    box-shadow: 0 2px 4px rgba(14, 99, 156, 0.2);\n}\n\n/* Dark mode support for league tabs */\n.dark-mode .league-tabs-wrapper {\n    background: #2d2d30;\n    border-color: rgba(255, 255, 255, 0.1);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .tab-btn {\n    color: #d4d4d4;\n    border-color: #555;\n}\n\n.dark-mode .tab-btn.active {\n    background: #0e639c;\n    color: #fff;\n    border-color: #0e639c;\n}\n\n.dark-mode .tab-btn:hover {\n    background: #0e639c;\n    color: #fff;\n    border-color: #0e639c;\n}\n\n/* Show/Hide containers */\n.pricing-container,\n.tab-content {\n    display: none;\n    /* hidden by default */\n}\n\n.pricing-container.active,\n.tab-content.active {\n    display: grid; /* Use grid for active pricing container */\n}\n\n.tab-content.active {\n    display: block; /* Keep block for other tab content */\n}\n\n/* HomePage */\n.predictions-container {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.history-card:hover,\n.prediction-card:hover {\n    transition: transform 0.2s ease;\n    transform: translateY(-4px);\n}\n\n/* Match Title */\n.match-title {\n    font-size: 1.2rem;\n    margin-bottom: 0.4rem;\n    color: #111;\n}\n\n/* Prediction Details */\n.prediction-detail {\n    font-size: 1rem;\n    color: #444;\n}\n\n.odds {\n    font-size: 0.95rem;\n    margin: 0.2rem 0;\n    color: #e8590c;\n    /* Adjusted for light theme contrast */\n}\n\n.match-time {\n    font-size: 0.9rem;\n    color: #777;\n    margin-bottom: 0.8rem;\n}\n\n/* Confidence Section */\n.confidence {\n    margin-top: 0.6rem;\n}\n\n.confidence span {\n    display: block;\n    margin-bottom: 0.4rem;\n    font-size: 0.9rem;\n    color: #555;\n}\n\n.confidence-bar {\n    width: 100%;\n    height: 8px;\n    background: #e9ecef;\n    border-radius: 5px;\n    overflow: hidden;\n    margin-top: 5px;\n}\n\n.confidence-fill {\n    height: 100%;\n}\n\n/* High, Medium, Low confidence borders are fine as they are */\n\n/* High Confidence */\n.prediction-card.high-confidence {\n    border-color: #4caf50;\n    --tier-color: #4caf50;\n}\n\n.prediction-card.high-confidence .confidence-fill {\n    background: linear-gradient(90deg, #388e3c, #4caf50);\n}\n\n/* Medium Confidence */\n.prediction-card.medium-confidence {\n    border-color: #ff9800;\n    --tier-color: #ff9800;\n}\n\n.prediction-card.medium-confidence .confidence-fill {\n    background: linear-gradient(90deg, #f57c00, #ff9800);\n}\n\n/* Low Confidence */\n.prediction-card.low-confidence {\n    border-color: #f44336;\n    --tier-color: #f44336;\n}\n\n.prediction-card.low-confidence .confidence-fill {\n    background: linear-gradient(90deg, #d32f2f, #f44336);\n}\n\n/* AI Pick Styling */\n.ai-pick {\n    border: 2px solid var(--tier-color);\n    padding: 4px 8px;\n    border-radius: 6px;\n    font-weight: bold;\n    display: inline-block;\n    color: var(--tier-color);\n    /* optional: makes text match tier */\n}\n\n.card-animation {\n    animation: card-enter 0.4s ease-out forwards;\n}\n\n@keyframes card-enter {\n    from {\n        opacity: 0;\n        transform: translateY(15px);\n    }\n\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.dark-mode #search-clear-btn:hover {\n    color: #eee;\n}\n\n/* ---------------- Active Filters ---------------- */\n#active-filters-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 8px;\n    margin-bottom: 16px;\n    justify-content: center;\n}\n\n.filter-pill {\n    background-color: #e7f5ff;\n    color: #0e639c;\n    padding: 5px 10px;\n    border-radius: 16px;\n    font-size: 13px;\n    font-weight: 500;\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    cursor: pointer;\n    transition: background-color 0.2s ease;\n}\n\n.filter-pill:hover {\n    background-color: #d0eaff;\n}\n\n.filter-pill .close-icon {\n    font-weight: bold;\n    font-size: 14px;\n}\n\n.no-results-message {\n    text-align: center;\n    color: #777;\n    padding: 20px;\n    display: none;\n    /* Hidden by default */\n}\n\n/* ---------------- Pull to Refresh ---------------- */\n#refresh-indicator {\n    position: fixed;\n    top: calc(var(--header-height) + 15px);\n    left: 50%;\n    transform: translateX(-50%) scale(0);\n    width: 60px;\n    height: 60px;\n    background: #0e639c;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 8px 25px rgba(14, 99, 156, 0.4);\n    border: 3px solid rgba(255, 255, 255, 0.3);\n    opacity: 0;\n    z-index: 1000;\n    backdrop-filter: blur(10px);\n    -webkit-backdrop-filter: blur(10px);\n    will-change: transform, opacity;\n    touch-action: none;\n}\n\n#refresh-indicator .refresh-icon {\n    width: 40px;\n    height: 40px;\n    filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));\n}\n\n#refresh-indicator.transitioning {\n    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94), \n                opacity 0.4s ease, \n                box-shadow 0.4s ease,\n                background 0.4s ease;\n}\n\n#refresh-indicator.refreshing {\n    animation: enhanced-pulse 1.5s ease-in-out infinite, \n               ripple 2s ease-out infinite;\n    background: #4caf50;\n    box-shadow: 0 12px 35px rgba(76, 175, 80, 0.5);\n    border-color: rgba(76, 175, 80, 0.5);\n}\n\n#refresh-indicator.refreshing .refresh-icon {\n    animation: enhanced-spin 1.2s cubic-bezier(0.68, -0.55, 0.265, 1.55) infinite;\n    transform: scale(1.2);\n    filter: drop-shadow(0 2px 8px rgba(76, 175, 80, 0.6)) brightness(1.1);\n}\n\n@keyframes enhanced-pulse {\n    0%, 100% { \n        transform: translateX(-50%) scale(1); \n        box-shadow: 0 8px 25px rgba(14, 99, 156, 0.4), 0 0 0 0 rgba(14, 99, 156, 0.1);\n    }\n    50% { \n        transform: translateX(-50%) scale(1.08); \n        box-shadow: 0 15px 40px rgba(76, 175, 80, 0.6), 0 0 0 20px rgba(14, 99, 156, 0.05);\n    }\n}\n\n@keyframes enhanced-spin {\n    0% { \n        transform: scale(1.2) rotate(0deg);\n        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n    }\n    25% {\n        transform: scale(1.3) rotate(90deg);\n        filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.4));\n    }\n    50% {\n        transform: scale(1.25) rotate(180deg);\n        filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.5));\n    }\n    75% {\n        transform: scale(1.3) rotate(270deg);\n        filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.4));\n    }\n    100% { \n        transform: scale(1.2) rotate(360deg);\n        filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.3));\n    }\n}\n\n@keyframes ripple {\n    0% {\n        box-shadow: 0 12px 35px rgba(76, 175, 80, 0.5), 0 0 0 0 rgba(76, 175, 80, 0.4);\n    }\n    50% {\n        box-shadow: 0 15px 40px rgba(76, 175, 80, 0.6), 0 0 0 30px rgba(76, 175, 80, 0.1);\n    }\n    100% {\n        box-shadow: 0 12px 35px rgba(76, 175, 80, 0.5), 0 0 0 50px rgba(76, 175, 80, 0);\n    }\n}\n\n/* Mobile-specific optimizations for pull-to-refresh */\nmain[data-pull-to-refresh-active=\"true\"] {\n    overscroll-behavior-y: contain;\n    -webkit-overflow-scrolling: touch;\n    will-change: transform;\n}\n\n/* Disable text selection during pull-to-refresh */\nbody.pulling-to-refresh {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    overflow: hidden;\n}\n\n/* Ensure smooth scrolling on iOS */\n@supports (-webkit-appearance: none) {\n    main[data-pull-to-refresh-active=\"true\"] {\n        -webkit-overflow-scrolling: touch;\n        -webkit-transform: translate3d(0, 0, 0);\n    }\n}\n\n/* ---------------- App Tour (Intro.js) Styling ---------------- */\n/* Override intro.js default styles to match app theme */\n\n/* Tour tooltip/popup */\n.introjs-tooltip {\n    background: rgba(14, 99, 156, 0.95) !important;\n    border: 2px solid rgba(255, 255, 255, 0.2) !important;\n    border-radius: 16px !important;\n    box-shadow: 0 12px 40px rgba(14, 99, 156, 0.4) !important;\n    backdrop-filter: blur(12px) !important;\n    -webkit-backdrop-filter: blur(12px) !important;\n    min-width: 280px !important;\n    max-width: 350px !important;\n}\n\n/* Tour tooltip arrow */\n.introjs-arrow {\n    border-top-color: rgba(14, 99, 156, 0.95) !important;\n}\n\n.introjs-arrow.bottom {\n    border-bottom-color: rgba(14, 99, 156, 0.95) !important;\n}\n\n.introjs-arrow.left {\n    border-left-color: rgba(14, 99, 156, 0.95) !important;\n}\n\n.introjs-arrow.right {\n    border-right-color: rgba(14, 99, 156, 0.95) !important;\n}\n\n/* Tour title styling */\n.introjs-tooltip-title {\n    color: #ffffff !important;\n    font-family: 'Optimistic Text A', 'Segoe UI', 'Roboto', sans-serif !important;\n    font-size: 18px !important;\n    font-weight: 600 !important;\n    margin-bottom: 8px !important;\n    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.3) !important;\n}\n\n/* Tour content text */\n.introjs-tooltiptext {\n    color: rgba(255, 255, 255, 0.95) !important;\n    font-family: 'Optimistic Text A', 'Segoe UI', 'Roboto', sans-serif !important;\n    font-size: 14px !important;\n    line-height: 1.5 !important;\n    margin-bottom: 16px !important;\n}\n\n/* Tour buttons container */\n.introjs-tooltipbuttons {\n    text-align: right !important;\n    border-top: 1px solid rgba(255, 255, 255, 0.2) !important;\n    padding-top: 12px !important;\n    margin-top: 16px !important;\n}\n\n/* Tour navigation buttons */\n.introjs-button {\n    background: rgba(255, 255, 255, 0.15) !important;\n    border: 1px solid rgba(255, 255, 255, 0.3) !important;\n    color: #ffffff !important;\n    padding: 8px 16px !important;\n    border-radius: 8px !important;\n    font-family: 'Optimistic Text A', 'Segoe UI', 'Roboto', sans-serif !important;\n    font-size: 13px !important;\n    font-weight: 500 !important;\n    margin: 0 4px !important;\n    transition: all 0.2s ease !important;\n    cursor: pointer !important;\n    backdrop-filter: blur(8px) !important;\n}\n\n.introjs-button:hover {\n    background: rgba(255, 255, 255, 0.25) !important;\n    border-color: rgba(255, 255, 255, 0.5) !important;\n    transform: translateY(-1px) !important;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !important;\n}\n\n/* Primary button (Next/Done) */\n.introjs-nextbutton, .introjs-donebutton {\n    background: #4caf50 !important;\n    border: 1px solid rgba(255, 255, 255, 0.4) !important;\n    color: #ffffff !important;\n    font-weight: 600 !important;\n}\n\n.introjs-nextbutton:hover, .introjs-donebutton:hover {\n    background: #5cbf60 !important;\n    box-shadow: 0 6px 16px rgba(76, 175, 80, 0.4) !important;\n}\n\n/* Skip button */\n.introjs-skipbutton {\n    background: transparent !important;\n    border: 1px solid rgba(255, 255, 255, 0.3) !important;\n    color: rgba(255, 255, 255, 0.8) !important;\n}\n\n.introjs-skipbutton:hover {\n    background: rgba(255, 255, 255, 0.1) !important;\n    color: #ffffff !important;\n}\n\n/* Tour progress dots */\n.introjs-bullets ul li a {\n    background: rgba(255, 255, 255, 0.3) !important;\n    border: 2px solid rgba(255, 255, 255, 0.5) !important;\n}\n\n.introjs-bullets ul li a.active {\n    background: #4caf50 !important;\n    border-color: #4caf50 !important;\n}\n\n/* Overlay/backdrop */\n.introjs-overlay {\n    background: rgba(0, 0, 0, 0.6) !important;\n    backdrop-filter: blur(2px) !important;\n}\n\n/* Highlighted element styling */\n.introjs-helperLayer {\n    border: 3px solid rgba(14, 99, 156, 0.8) !important;\n    border-radius: 12px !important;\n    box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.6), \n                0 0 20px rgba(14, 99, 156, 0.6) !important;\n}\n\n/* Step numbers */\n.introjs-helperNumberLayer {\n    background: #0e639c !important;\n    border: 2px solid rgba(255, 255, 255, 0.8) !important;\n    color: #ffffff !important;\n    font-family: 'Optimistic Text A', 'Segoe UI', 'Roboto', sans-serif !important;\n    font-weight: 700 !important;\n    box-shadow: 0 4px 12px rgba(14, 99, 156, 0.4) !important;\n}\n\n\n\n/* ---------------- Dark Mode Overrides ---------------- */\n.dark-mode {\n    background: #1a1a1c;\n    color: #e2e2e4;\n}\n\n.dark-mode html {\n    background: #1a1a1c;\n}\n\n\n.dark-mode header {\n    background-color: #262629;\n    color: #e2e2e4;\n    border-bottom: none;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .bottom-nav {\n    background-color: #262629;\n    border-top: none;\n    box-shadow: 0 -2px 8px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .bottom-nav button {\n    color: #d4d4d4;\n}\n\n.dark-mode .bottom-nav .icon {\n    background-color: #d4d4d4;\n    /* Dark mode inactive color */\n}\n\n.dark-mode .bottom-nav button.active {\n    color: #0e639c;\n    /* Active color is the same */\n}\n\n.dark-mode .bottom-nav button.active .icon {\n    background-color: #0e639c;\n    /* Active color is the same */\n}\n\n.dark-mode .search-wrapper {\n    background-color: #2d2d30;\n    border-color: #555;\n}\n\n.dark-mode .search-wrapper:focus-within {\n    border-color: #0e639c;\n}\n\n.dark-mode #predictionSearch {\n    color: #d4d4d4;\n}\n\n.dark-mode #search-ghost-text {\n    color: #555;\n}\n\n.dark-mode .filter-pill {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n.dark-mode .filter-pill:hover {\n    background-color: #2a4c68;\n}\n\n.dark-mode .card,\n.dark-mode .subscription-card,\n.dark-mode .profile-card,\n.dark-mode .current-tier {\n    background: #2d2d32;\n    box-shadow: 0 4px 12px rgba(14, 99, 156, 0.08);\n    border: 1px solid rgba(14, 99, 156, 0.15);\n}\n\n.dark-mode .subscription-card .price,\n.dark-mode .current-tier {\n    color: #d4d4d4;\n}\n\n.dark-mode .tier-expiry-date {\n    color: #bbb;\n}\n\n.dark-mode .subscription-card ul li,\n.dark-mode .profile-card p,\n.dark-mode .profile-email {\n    color: #bbb;\n}\n\n/* Dark mode support for new subscription elements */\n.dark-mode .prediction-limit {\n    background: rgba(14, 99, 156, 0.2);\n    color: #74b9ff;\n}\n\n.dark-mode .feature-highlight {\n    background: #1c3a50;\n    color: #a5d8ff;\n}\n\n.dark-mode .success-rate {\n    background: #1b4332;\n    color: #52c41a;\n}\n\n.dark-mode .roi-indicator {\n    background: #3d2914;\n    color: #ffa940;\n}\n\n.dark-mode .guarantee {\n    background: #2d1b3d;\n    color: #b37feb;\n    border-color: #b37feb;\n}\n\n.dark-mode .profile-username {\n    color: #fff;\n}\n\n.dark-mode .modal-content {\n    background: #1e1e1e;\n    color: #fff;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);\n}\n\n.dark-mode .history-card,\n.dark-mode .prediction-card {\n    background-color: #1e1e1e;\n    border-color: #444;\n    /* Default border color for cards in dark mode */\n    color: #fff;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.dark-mode .history-title,\n.dark-mode .match-title {\n    color: #fff;\n}\n\n.dark-mode .history-detail,\n.dark-mode .prediction-detail {\n    color: #ddd;\n}\n\n.dark-mode .history-time,\n.dark-mode .match-time {\n    color: #aaa;\n}\n\n.dark-mode .tab-btn {\n    background: #2d2d30;\n    color: #d4d4d4;\n    border-color: #555;\n}\n\n.dark-mode .tab-btn.active {\n    background: #0e639c;\n    color: #fff;\n    border-color: #0e639c;\n}\n\n.dark-mode .tab-btn:hover {\n    background: #0b4f7a;\n    color: #fff;\n    border-color: #0b4f7a;\n}\n\n/* Ensure confidence colors override the default dark mode border */\n.dark-mode .prediction-card.high-confidence {\n    border-color: #4caf50;\n}\n\n.dark-mode .prediction-card.medium-confidence {\n    border-color: #ff9800;\n}\n\n.dark-mode .prediction-card.low-confidence {\n    border-color: #f44336;\n}\n\n\n.dark-mode .odds {\n    color: #ffb300;\n}\n\n.dark-mode .confidence span {\n    color: #ccc;\n}\n\n.dark-mode .confidence-bar {\n    background: #333;\n}\n\n.dark-mode .no-results-message {\n    color: #aaa;\n}\n\n.dark-mode #refresh-indicator {\n    background: #2d2d30;\n    color: #d4d4d4;\n    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.4);\n}\n\n/* ---------------- Loader ---------------- */\n#globalLoader {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 9999;\n    display: none;\n    /* Initially hidden by JS */\n    justify-content: center;\n    align-items: center;\n}\n\n.loader-overlay {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: rgba(244, 245, 247, 0.7);\n    /* Light theme overlay, matches body bg */\n}\n\n.loader-spinner {\n    width: 50px;\n    height: 50px;\n    border: 5px solid #e0e0e0;\n    /* Light theme spinner track */\n    border-top-color: #0e639c;\n    /* Spinner color */\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n    z-index: 1;\n}\n\n@keyframes spin {\n    to {\n        transform: rotate(360deg);\n    }\n}\n\n.dark-mode .loader-overlay {\n    background: rgba(30, 30, 30, 0.7);\n    /* Dark theme overlay */\n}\n\n.dark-mode .loader-spinner {\n    border-color: #444;\n    /* Dark theme spinner track */\n    border-top-color: #0e639c;\n    /* Spinner color can stay the same */\n}\n\n.button {\n    display: inline-block;\n    padding: 8px 16px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    text-decoration: none;\n    transition: background 0.3s ease;\n    border: none;\n    cursor: pointer;\n    text-align: center;\n}\n\n.button:hover {\n    background: #0b4f7a;\n}\n\n.button.btn-danger {\n    background: #d9534f;\n}\n\n.button.btn-danger:hover {\n    background: #c9302c;\n}\n\n/* ---------------- Manage Subscription Page ---------------- */\n.manage-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 20px;\n    margin-bottom: 16px;\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.08);\n    border: 1px solid #e0e0e0;\n    transition: border-color 0.3s ease;\n}\n\n.manage-card h2 {\n    font-size: 18px;\n    margin-bottom: 8px;\n    color: #333;\n}\n\n.manage-card p {\n    font-size: 15px;\n    color: #555;\n    margin-bottom: 12px;\n    line-height: 1.5;\n}\n\n.manage-card ul {\n    list-style-type: '‚úî  ';\n    padding-left: 20px;\n    margin-top: 10px;\n}\n\n.manage-card ul li {\n    margin-bottom: 5px;\n    font-size: 14px;\n    color: #444;\n}\n\n.manage-card.danger-zone {\n    border-color: #d9534f;\n}\n\n.manage-card.danger-zone h2 {\n    color: #d9534f;\n}\n\n.remaining-days-indicator {\n    background-color: #e7f5ff;\n    color: #0e639c;\n    padding: 8px 12px;\n    border-radius: 8px;\n    font-weight: bold;\n    text-align: center;\n    margin-top: 10px;\n}\n\n.dark-mode .manage-card {\n    background: #2d2d30;\n    border-color: #444;\n}\n\n.dark-mode .manage-card h2 {\n    color: #eee;\n}\n\n.dark-mode .manage-card p,\n.dark-mode .manage-card ul li {\n    color: #bbb;\n}\n\n.dark-mode .remaining-days-indicator {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n.dark-mode .edit-icon:hover {\n    background-color: #0e639c; /* Standard active/hover color */\n}\n\n.dark-mode .manage-card.danger-zone {\n    border-color: #d9534f;\n}\n\n\n/* ---------------- Referral Page ---------------- */\n.referral-code-container {\n    display: flex;\n    gap: 8px;\n    margin-top: 8px;\n}\n\n#referralCodeInput {\n    flex-grow: 1;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 8px;\n    background-color: #f1f3f5;\n    color: #333;\n    font-size: 16px;\n    font-weight: bold;\n    text-align: center;\n}\n\n#referralCodeInput:focus {\n    outline: none;\n}\n\n.dark-mode #referralCodeInput {\n    background-color: #252526;\n    border-color: #555;\n    color: #d4d4d4;\n}\n\n.form-description {\n    font-size: 14px;\n    color: #666;\n    margin-bottom: 16px;\n    text-align: center;\n    line-height: 1.5;\n}\n\n/* ---------------- Referral Page Share Buttons ---------------- */\n.share-buttons-container {\n    display: flex;\n    justify-content: center;\n    gap: 16px;\n    margin-top: 20px;\n    padding-top: 16px;\n    border-top: 1px solid #e0e0e0;\n}\n\n.share-btn {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 44px;\n    height: 44px;\n    border-radius: 50%;\n    border: none;\n    cursor: pointer;\n    transition: transform 0.2s ease, background-color 0.2s ease;\n    padding: 0;\n    background-color: #f1f3f5;\n}\n\n.share-btn:hover {\n    transform: scale(1.1);\n}\n\n.share-btn svg {\n    width: 22px;\n    height: 22px;\n    color: #333;\n}\n\n.share-btn.whatsapp:hover {\n    background-color: #e0f8e5;\n}\n\n.share-btn.whatsapp:hover svg {\n    color: #25D366;\n}\n\n.share-btn.twitter:hover {\n    background-color: #e1f5fe;\n}\n\n.share-btn.twitter:hover svg {\n    color: #1DA1F2;\n}\n\n.share-btn.generic:hover {\n    background-color: #e8eaf6;\n}\n\n.share-btn.generic:hover svg {\n    stroke: #5c6bc0;\n    color: #5c6bc0;\n}\n\n.dark-mode .share-buttons-container {\n    border-top-color: #444;\n}\n\n.dark-mode .share-btn {\n    background-color: #252526;\n}\n\n.dark-mode .share-btn svg {\n    color: #d4d4d4;\n}\n\n.dark-mode .share-btn.whatsapp:hover {\n    background-color: #1a3c2a;\n}\n\n.dark-mode .share-btn.twitter:hover {\n    background-color: #1a3a4a;\n}\n\n.dark-mode .share-btn.generic:hover {\n    background-color: #2a2d42;\n    stroke: #a5d8ff;\n}\n\n/* ---------------- Referral Name Display (Auth Page) ---------------- */\n.referral-name-display {\n    display: none;\n    /* Hidden by default */\n    font-size: 13px;\n    color: #0e639c;\n    background-color: #e7f5ff;\n    padding: 8px;\n    border-radius: 6px;\n    margin-top: 8px;\n    text-align: center;\n}\n\n.dark-mode .referral-name-display {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n/* --- Animated Background --- */\n.area {\n    position: fixed; /* Use fixed to stay in viewport */\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: -1; /* Place it behind all content */\n    pointer-events: none; /* Allow clicks to pass through */\n}\n\n.circles {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n}\n\n.circles li {\n    position: absolute;\n    display: block;\n    list-style: none;\n    width: 20px;\n    height: 20px;\n    background: rgba(14, 99, 156, 0.2); /* Base color, JS will override opacity */\n    /* Animation is now handled by JavaScript */\n}\n\n.circles li:nth-child(1) { left: 25%; width: 80px; height: 80px; }\n.circles li:nth-child(2) { left: 10%; width: 20px; height: 20px; }\n.circles li:nth-child(3) { left: 70%; width: 20px; height: 20px; }\n.circles li:nth-child(4) { left: 40%; width: 60px; height: 60px; }\n.circles li:nth-child(5) { left: 65%; width: 20px; height: 20px; }\n.circles li:nth-child(6) { left: 75%; width: 110px; height: 110px; background: rgba(14, 99, 156, 0.15); }\n.circles li:nth-child(7) { left: 35%; width: 150px; height: 150px; background: rgba(14, 99, 156, 0.1); }\n.circles li:nth-child(8) { left: 50%; width: 25px; height: 25px; }\n.circles li:nth-child(9) { left: 20%; width: 15px; height: 15px; background: rgba(14, 99, 156, 0.25); }\n.circles li:nth-child(10) { left: 85%; width: 150px; height: 150px; background: rgba(14, 99, 156, 0.1); }\n\n/* --- Animated Background Dark Mode Overrides --- */\n.dark-mode .circles li {\n    background: rgba(165, 216, 255, 0.1); /* Light blue accent for dark mode */\n}\n.dark-mode .circles li:nth-child(6) {\n    background: rgba(165, 216, 255, 0.08);\n}\n.dark-mode .circles li:nth-child(7) {\n    background: rgba(165, 216, 255, 0.05);\n}\n.dark-mode .circles li:nth-child(9) {\n    background: rgba(165, 216, 255, 0.12);\n}\n.dark-mode .circles li:nth-child(10) {\n    background: rgba(165, 216, 255, 0.05);\n}\n\n/* Dark mode animated background */\n.dark-mode .animated-background {\n    background: #1a1a1c;\n}\n\n/* Dark mode gradient overlays removed to comply with no-gradient requirement */\n\n/* Dark mode background overlay gradients removed to comply with no-gradient requirement */\n\n/* ---------------- Error Container (from 404.css) ---------------- */\n.error-container {\n    max-width: 450px;\n    margin: 0 auto; /* Center the container */\n    text-align: center;\n    padding: 40px 20px;\n}\n\n.error-icon {\n    font-size: 48px;\n    margin-bottom: 20px;\n}\n\n.error-title {\n    font-size: 6rem;\n    font-weight: bold;\n    color: #0e639c;\n    margin: 0;\n}\n\n.error-subtitle {\n    font-size: 1.5rem;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n.error-message {\n    color: #666;\n    margin-bottom: 30px;\n}\n\n.dark-mode .error-subtitle, .dark-mode .error-message { color: #bbb; }\n\n/* ---------------- Inactive Page ---------------- */\n.inactive-container {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100vh;\n    background: linear-gradient(135deg, #0e639c 0%, #4caf50 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 9999;\n    opacity: 0;\n    transform: scale(0.95);\n    transition: all 0.3s ease;\n}\n\n.inactive-container.show {\n    opacity: 1;\n    transform: scale(1);\n}\n\n.inactive-content {\n    text-align: center;\n    color: white;\n    max-width: 400px;\n    padding: 40px 20px;\n}\n\n.pulse-animation {\n    display: inline-block;\n    margin-bottom: 30px;\n    animation: pulse 2s infinite;\n}\n\n.logo-icon {\n    width: 80px;\n    height: 80px;\n    margin: 0 auto;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.1);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    backdrop-filter: blur(10px);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n}\n\n.inactive-title {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 15px;\n    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\n.inactive-message {\n    font-size: 1.1rem;\n    margin-bottom: 30px;\n    opacity: 0.9;\n}\n\n.activity-indicators {\n    display: flex;\n    justify-content: center;\n    gap: 10px;\n    margin-bottom: 30px;\n}\n\n.indicator {\n    width: 12px;\n    height: 12px;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    animation: wave 2s infinite;\n}\n\n.indicator.active {\n    background: white;\n}\n\n.indicator:nth-child(2) {\n    animation-delay: 0.3s;\n}\n\n.indicator:nth-child(3) {\n    animation-delay: 0.6s;\n}\n\n.welcome-back-message {\n    margin-bottom: 20px;\n    padding: 20px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 12px;\n    backdrop-filter: blur(10px);\n    animation: slideIn 0.5s ease;\n}\n\n.welcome-back-message h2 {\n    font-size: 1.5rem;\n    margin-bottom: 10px;\n}\n\n.inactive-stats {\n    display: flex;\n    justify-content: space-around;\n    margin-bottom: 30px;\n    gap: 20px;\n}\n\n.stat-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 15px;\n    background: rgba(255, 255, 255, 0.1);\n    border-radius: 10px;\n    backdrop-filter: blur(5px);\n    flex: 1;\n}\n\n.stat-number {\n    font-size: 1.8rem;\n    font-weight: bold;\n    margin-bottom: 5px;\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    opacity: 0.8;\n}\n\n.return-btn {\n    background: white;\n    color: #0e639c;\n    border: none;\n    padding: 12px 30px;\n    border-radius: 25px;\n    font-size: 1rem;\n    font-weight: bold;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n}\n\n.return-btn:hover {\n    background: #f8f9fa;\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\n}\n\n/* Animations */\n@keyframes pulse {\n    0%, 100% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n}\n\n@keyframes wave {\n    0%, 100% { transform: scale(1); opacity: 1; }\n    50% { transform: scale(1.2); opacity: 0.7; }\n}\n\n@keyframes slideIn {\n    from { opacity: 0; transform: translateY(20px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n/* Dark mode support */\n.dark-mode .inactive-container {\n    background: linear-gradient(135deg, #1e1e1e 0%, #2d2d30 100%);\n}\n\n.dark-mode .logo-icon {\n    background: rgba(165, 216, 255, 0.2);\n}\n\n.dark-mode .return-btn {\n    background: #2d2d30;\n    color: #a5d8ff;\n}\n\n.dark-mode .return-btn:hover {\n    background: #3d3d40;\n}\n\n/* Mobile responsiveness */\n@media (max-width: 480px) {\n    .inactive-content {\n        padding: 20px 15px;\n    }\n    \n    .inactive-title {\n        font-size: 1.5rem;\n    }\n    \n    .inactive-message {\n        font-size: 1rem;\n    }\n    \n    .inactive-stats {\n        flex-direction: column;\n        gap: 15px;\n    }\n    \n    .stat-item {\n        flex-direction: row;\n        justify-content: space-between;\n        text-align: left;\n    }\n}\n\n/* ===== AdBlocker Overlay Styles ===== */\n#adblocker-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.95);\n    z-index: 10000;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    backdrop-filter: blur(10px);\n}\n\n.adblocker-container {\n    background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);\n    border-radius: 20px;\n    padding: 40px;\n    max-width: 500px;\n    width: 90%;\n    text-align: center;\n    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);\n    border: 1px solid rgba(76, 175, 80, 0.2);\n}\n\n.adblocker-content h2 {\n    color: #ffffff;\n    margin-bottom: 20px;\n    font-size: 28px;\n    font-weight: 600;\n}\n\n.adblocker-icon {\n    font-size: 64px;\n    margin-bottom: 20px;\n}\n\n.adblocker-content p {\n    color: #b0b0b0;\n    margin-bottom: 20px;\n    line-height: 1.6;\n}\n\n.adblocker-content ul {\n    text-align: left;\n    color: #ffffff;\n    margin: 20px 0;\n    padding-left: 0;\n    list-style: none;\n}\n\n.adblocker-content li {\n    margin: 10px 0;\n    padding: 12px 20px;\n    background: rgba(76, 175, 80, 0.1);\n    border-radius: 10px;\n    border-left: 4px solid #4caf50;\n}\n\n.adblocker-buttons {\n    margin: 30px 0 20px;\n    display: flex;\n    gap: 15px;\n    flex-wrap: wrap;\n    justify-content: center;\n}\n\n.btn-refresh, .btn-upgrade {\n    padding: 12px 24px;\n    border: none;\n    border-radius: 10px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    flex: 1;\n    min-width: 140px;\n}\n\n.btn-refresh {\n    background: linear-gradient(135deg, #4caf50 0%, #45a049 100%);\n    color: white;\n}\n\n.btn-refresh:hover {\n    background: linear-gradient(135deg, #45a049 0%, #3d8b40 100%);\n    transform: translateY(-2px);\n}\n\n.btn-upgrade {\n    background: linear-gradient(135deg, #ff9800 0%, #f57c00 100%);\n    color: white;\n}\n\n.btn-upgrade:hover {\n    background: linear-gradient(135deg, #f57c00 0%, #ef6c00 100%);\n    transform: translateY(-2px);\n}\n\n.adblocker-note {\n    color: #888;\n    font-size: 14px;\n    font-style: italic;\n    margin-top: 20px;\n}\n\n@media (max-width: 480px) {\n    .adblocker-container {\n        padding: 30px 20px;\n        margin: 20px;\n    }\n    \n    .adblocker-buttons {\n        flex-direction: column;\n    }\n    \n    .btn-refresh, .btn-upgrade {\n        width: 100%;\n    }\n}","size_bytes":55742},"sw.js":{"content":"// sw.js\n\n// Import and initialize the Firebase SDK\nimportScripts(\"https://www.gstatic.com/firebasejs/10.12.0/firebase-app-compat.js\");\nimportScripts(\"https://www.gstatic.com/firebasejs/10.12.0/firebase-messaging-compat.js\");\n\n// Your web app's Firebase configuration\nconst CACHE_NAME = 'statwise-offline-v1';\nconst OFFLINE_URL = './Offline/offline.html';\n\n// A list of all the assets needed for the offline page to work correctly.\nconst OFFLINE_ASSETS = [\n    './Offline/offline.html',\n    './Offline/offline.css',\n    './Assets/Fonts/Optimistic_Text_A_Md.ttf'\n];\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDpPTmDw7RpxTo2AXf8ZDTq4AG46xKB16g\",\n  authDomain: \"statwise-319a4.firebaseapp.com\",\n  databaseURL: \"https://statwise-319a4-default-rtdb.firebaseio.com\",\n  projectId: \"statwise-319a4\",\n  storageBucket: \"statwise-319a4.firebasestorage.app\",\n  messagingSenderId: \"416700134653\",\n  appId: \"1:416700134653:web:f3a6f9766a2fafa8fdba94\",\n};\n\nfirebase.initializeApp(firebaseConfig);\nconst messaging = firebase.messaging();\n/**\n * 1. Install the service worker and cache the offline assets.\n */\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        (async () => {\n            const cache = await caches.open(CACHE_NAME);\n            console.log('[Service Worker] Caching offline assets');\n            await cache.addAll(OFFLINE_ASSETS);\n        })()\n    );\n    // Force the waiting service worker to become the active service worker.\n    self.skipWaiting();\n});\n\n/**\n * 2. Clean up old caches on activation.\n */\nself.addEventListener('activate', (event) => {\n    event.waitUntil(\n        (async () => {\n            // Delete old caches that are not in use.\n            const cacheNames = await caches.keys();\n            await Promise.all(\n                cacheNames.filter(name => name !== CACHE_NAME).map(name => caches.delete(name))\n            );\n        })()\n    );\n    // Tell the active service worker to take control of the page immediately.\n    self.clients.claim();\n});\n\n/**\n * 3. Intercept fetch requests and serve the offline page if a navigation request fails.\n */\nself.addEventListener('fetch', (event) => {\n    if (event.request.mode === 'navigate') {\n        event.respondWith(\n            fetch(event.request).catch(() => caches.match(OFFLINE_URL))\n        );\n    }\n});\n\n/**\n * 4. Handle background push notifications.\n */\nmessaging.onBackgroundMessage((payload) => {\n    console.log('[sw.js] Received background message ', payload);\n\n    const notificationTitle = payload.notification.title;\n    const notificationOptions = {\n        body: payload.notification.body,\n        icon: './Assets/Icons/icon-192.png' // Add an icon for notifications\n    };\n\n    self.registration.showNotification(notificationTitle, notificationOptions);\n});","size_bytes":2772},"utils.js":{"content":"// utils.js\nimport { db } from './env.js';\nimport { collection, addDoc, query, orderBy, serverTimestamp, limit, getDocs } from \"https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js\";\n\n/**\n * Fetches the user's public IP address.\n * @returns {Promise<string>} The public IP or \"Unknown\".\n */\nexport async function getPublicIP() {\n    try {\n        const res = await fetch(\"https://api.ipify.org?format=json\");\n        if (!res.ok) return \"Unknown\";\n        const data = await res.json();\n        return data.ip || \"Unknown\";\n    } catch {\n        return \"Unknown\";\n    }\n}\n\n/**\n * Formats a Firestore Timestamp into a \"DD/MM/YYYY HH:mm\" string.\n * @param {object} timestamp - The Firestore Timestamp object.\n * @returns {string} The formatted date string or an empty string.\n */\nexport function formatTimestamp(timestamp) {\n    if (!timestamp?.toDate) return \"\";\n    const date = timestamp.toDate();\n    const day = String(date.getDate()).padStart(2, \"0\");\n    const month = String(date.getMonth() + 1).padStart(2, \"0\");\n    const year = date.getFullYear();\n    const hours = String(date.getHours()).padStart(2, \"0\");\n    const mins = String(date.getMinutes()).padStart(2, \"0\");\n    return `${day}/${month}/${year} ${hours}:${mins}`;\n}\n\n/**\n * Adds a unique action to the user's history log, preventing immediate duplicates.\n * @param {string} userId - The user's ID.\n * @param {string} action - The action description to log.\n */\nexport async function addHistoryUnique(userId, action) {\n    if (!userId) return;\n    try {\n        const historyRef = collection(db, \"users\", userId, \"history\");\n        const q = query(historyRef, orderBy(\"createdAt\", \"desc\"), limit(1));\n        const snap = await getDocs(q);\n\n        // Prevent logging the exact same action back-to-back\n        if (!snap.empty && snap.docs[0].data().action === action) return;\n\n        const ip = await getPublicIP();\n        await addDoc(historyRef, { action, ip, createdAt: serverTimestamp() });\n    } catch (err) {\n        console.error(\"Failed to add history:\", err);\n    }\n}","size_bytes":2060},"Auth/auth.css":{"content":"/* /Auth/auth.css */\n\n/* --- Global & Font --- */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n@font-face {\n    font-family: 'Optimistic';\n    src: url('../Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\n/* --- Body & Theme --- */\nbody {\n    font-family: \"Optimistic\", sans-serif;\n    background: #f8f9fc;\n    color: #1a1a1c;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n    padding: 20px;\n    position: relative; /* For background animation positioning */\n    overflow: hidden; /* Hide animation overflow */\n}\n\n/* --- Auth Container & Card --- */\n.auth-container {\n    width: 100%;\n    max-width: 420px;\n}\n\n.auth-card {\n    background: #ffffff;\n    border-radius: 16px;\n    padding: 32px;    \n    border: 2px solid #0e639c;\n    box-shadow: 0 4px 12px rgba(14, 99, 156, 0.12); /* Enhanced shadow with blue tint */\n    position: relative; /* For theme toggle positioning */\n    text-align: center;\n}\n\n/* Theme Toggle Button */\n.theme-toggle {\n    position: absolute;\n    top: 16px;\n    right: 16px;\n    background: none;\n    border: 2px solid #e0e0e0;\n    border-radius: 50%;\n    width: 40px;\n    height: 40px;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.3s ease;\n    z-index: 1000;\n}\n\n.theme-toggle:hover {\n    border-color: #0e639c;\n    transform: scale(1.1);\n}\n\n.theme-icon {\n    font-size: 18px;\n    transition: transform 0.3s ease;\n}\n\n.theme-toggle:hover .theme-icon {\n    transform: rotate(180deg);\n}\n\n/* Theme Transition Circle */\n.theme-transition-circle {\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: #1e1e1e;\n    transform: translate(-50%, -50%);\n    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    z-index: 999;\n    pointer-events: none;\n    opacity: 0;\n}\n\n.theme-transition-circle.expanding {\n    width: 200vmax;\n    height: 200vmax;\n    opacity: 1;\n}\n\n.theme-transition-circle.light-mode {\n    background: #f8f9fc;\n}\n\n.auth-card {\n    transition: opacity 0.5s ease-out, transform 0.5s ease-out;\n}\n.auth-card.fade-out {\n    opacity: 0;\n    transform: translateY(-20px);\n}\n\n.auth-title {\n    font-size: 32px;\n    font-weight: bold;\n    color: #0e639c;\n    margin-bottom: 8px;\n}\n\n.auth-subtitle {\n    font-size: 16px;\n    color: #555;\n    margin-bottom: 24px;\n}\n\n/* --- Form & Inputs --- */\n.auth-form {\n    display: flex;\n    flex-direction: column;\n    gap: 16px;\n}\n\n.input-wrapper {\n    position: relative;\n}\n\n.input-icon {\n    position: absolute;\n    left: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 18px;\n    height: 18px;\n    background-color: #555; /* Standard inactive icon color */\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    z-index: 2; /* Ensure icon is above the input field */\n    mask-repeat: no-repeat;\n}\n/* Correctly formatted data URIs for SVG icons */\n.icon-user { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='12' cy='7' r='4'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2'/%3E%3Ccircle cx='12' cy='7' r='4'/%3E%3C/svg%3E\"); }\n.icon-email { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z'/%3E%3Cpolyline points='22,6 12,13 2,6'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z'/%3E%3Cpolyline points='22,6 12,13 2,6'/%3E%3C/svg%3E\"); }\n.icon-password { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='11' width='18' height='11' rx='2' ry='2'/%3E%3Cpath d='M7 11V7a5 5 0 0 1 10 0v4'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Crect x='3' y='11' width='18' height='11' rx='2' ry='2'/%3E%3Cpath d='M7 11V7a5 5 0 0 1 10 0v4'/%3E%3C/svg%3E\"); }\n.icon-referral { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 12 20 22 4 22 4 12'/%3E%3Crect x='2' y='7' width='20' height='5'/%3E%3Cline x1='12' y1='22' x2='12' y2='7'/%3E%3Cpath d='M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z'/%3E%3Cpath d='M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='20 12 20 22 4 22 4 12'/%3E%3Crect x='2' y='7' width='20' height='5'/%3E%3Cline x1='12' y1='22' x2='12' y2='7'/%3E%3Cpath d='M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z'/%3E%3Cpath d='M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z'/%3E%3C/svg%3E\"); }\n\n.password-toggle-icon {\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 20px;\n    height: 20px;\n    background-color: #555; /* Standard inactive icon color */\n    -webkit-mask-size: contain;\n    mask-size: contain;\n    -webkit-mask-position: center;\n    mask-position: center;\n    -webkit-mask-repeat: no-repeat;\n    mask-repeat: no-repeat;\n    cursor: pointer;\n    transition: background-color 0.2s;\n}\n\n.password-toggle-icon:hover {\n    background-color: #0e639c; /* Standard active/hover color */\n}\n\n.icon-eye { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'/%3E%3Ccircle cx='12' cy='12' r='3'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z'/%3E%3Ccircle cx='12' cy='12' r='3'/%3E%3C/svg%3E\"); }\n.icon-eye-slash { -webkit-mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24'/%3E%3Cline x1='1' y1='1' x2='23' y2='23'/%3E%3C/svg%3E\"); mask-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24'/%3E%3Cline x1='1' y1='1' x2='23' y2='23'/%3E%3C/svg%3E\"); }\n\n.input-prefix {\n    position: absolute;\n    left: 40px; /* Position it after the icon */\n    top: 50%;\n    transform: translateY(-50%);\n    font-size: 14px;\n    font-weight: 600; /* Make it bolder */\n    color: #1c1c1e; /* Match input text color */\n    pointer-events: none; /* Make it non-interactive */\n    z-index: 10; /* Ensure it's above the input field */\n}\n\n\n.auth-form input {\n    width: 100%;\n    padding: 12px 40px; /* Symmetrical padding for icons on both sides */\n    border: 2px solid #e1e5e9;\n    border-radius: 8px;\n    background-color: #ffffff;\n    font-size: 14px;\n    transition: all 0.3s ease;\n    position: relative; /* Needed for z-index to work */\n}\n\n/* Adjust padding for inputs without a right-side icon */\n.auth-form input:not([type=\"password\"]) {\n    padding-right: 12px;\n}\n\n/* Adjust left padding for the referral input to make space for the prefix */\n#signup-referral {\n    padding-left: 80px; /* 40px for icon + 40px for prefix */\n}\n\n.auth-form input:focus {\n    outline: none;\n    border-color: #0e639c;\n}\n\n.auth-form input.input-error {\n    border-color: #d9534f;\n    box-shadow: 0 0 0 3px rgba(217, 83, 79, 0.1);\n    animation: inputShake 0.4s ease;\n}\n\n.auth-form input.input-success {\n    border-color: #28a745;\n    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);\n}\n\n@keyframes inputShake {\n    0%, 100% { transform: translateX(0); }\n    25% { transform: translateX(-3px); }\n    75% { transform: translateX(3px); }\n}\n\n/* Input validation states */\n.input-wrapper.validating::after {\n    content: \"‚ü≥\";\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #6c757d;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    to { transform: translateY(-50%) rotate(360deg); }\n}\n\n.input-wrapper.valid::after {\n    content: \"‚úì\";\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #28a745;\n    font-weight: bold;\n}\n\n.input-wrapper.invalid::after {\n    content: \"‚úó\";\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #d9534f;\n    font-weight: bold;\n}\n\n\n/* --- Password Strength Indicator --- */\n#password-strength-container {\n    display: flex;\n    align-items: center;\n    gap: 4px;\n    margin-top: -8px; /* Pull it closer to the input */\n}\n\n.strength-bar {\n    flex-grow: 1;\n    height: 5px;\n    background-color: #e0e0e0;\n    border-radius: 2.5px;\n    transition: background-color 0.3s ease;\n}\n\n#password-strength-text {\n    font-size: 12px;\n    font-weight: 500;\n    color: #555;\n    min-width: 70px; /* Prevent layout shift */\n    text-align: right;\n}\n\n/* Strength levels */\n.strength-bar.weak { background-color: #d9534f; }\n.strength-bar.medium { background-color: #f0ad4e; }\n.strength-bar.strong { background-color: #5bc0de; }\n.strength-bar.very-strong { background-color: #5cb85c; }\n\n.dark-mode #password-strength-text {\n    color: #bbb;\n}\n\n.dark-mode .strength-bar {\n    background-color: #444;\n}\n.dark-mode .strength-bar.weak { background-color: #c9302c; }\n.dark-mode .strength-bar.medium { background-color: #ec971f; }\n.dark-mode .strength-bar.strong { background-color: #31b0d5; }\n.dark-mode .strength-bar.very-strong { background-color: #449d44; }\n\n\n/* --- Referral Display --- */\n.referral-name-display {\n    display: none; /* Hidden by default */\n    font-size: 13px;\n    color: #0e639c;\n    background-color: #e7f5ff;\n    padding: 8px;\n    border-radius: 6px;\n    margin-top: -8px; /* Pull it closer to the input */\n    margin-bottom: 8px;\n    text-align: center;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: all 0.3s ease;\n    border: 1px solid rgba(14, 99, 156, 0.2);\n}\n\n.referral-name-display.show {\n    display: block;\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.referral-name-display.error {\n    color: #d9534f;\n    background-color: rgba(217, 83, 79, 0.1);\n    border-color: rgba(217, 83, 79, 0.2);\n}\n\n.referral-name-display.success {\n    color: #28a745;\n    background-color: rgba(40, 167, 69, 0.1);\n    border-color: rgba(40, 167, 69, 0.2);\n}\n\n/* --- Form Description (for forgot password) --- */\n.form-description {\n    font-size: 14px;\n    color: #555;\n    margin-bottom: 16px;\n    line-height: 1.4;\n}\n\n/* --- Form Options (Remember Me / Forgot Password) --- */\n.form-options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 14px;\n    margin-top: -8px; /* Pull it closer to the inputs */\n    margin-bottom: 8px;\n}\n\n/* Modifier for when there's only one option (like on signup page) */\n.form-options.single-option {\n    justify-content: flex-start;\n}\n\n.remember-me {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    cursor: pointer;\n    color: #555;\n    white-space: nowrap; /* Prevent the label from wrapping */\n}\n\n.remember-me span {\n    padding-left: 8px; /* Space between checkbox and text */\n}\n\n.remember-me input {\n    /* Hide the default checkbox */\n    display: none;\n}\n\n/* New SVG Checkbox Style */\n.check {\n  cursor: pointer;\n  position: relative;\n  margin: auto;\n  width: 18px;\n  height: 18px;\n  -webkit-tap-highlight-color: transparent;\n  transform: translate3d(0, 0, 0);\n}\n\n.check:before {\n  content: \"\";\n  position: absolute;\n  top: -15px;\n  left: -15px;\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  background: rgba(14, 99, 156, 0.05);\n  opacity: 0;\n  transition: opacity 0.2s ease;\n}\n\n.check svg {\n  position: relative;\n  z-index: 1;\n  fill: none;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  stroke: #c8ccd4;\n  stroke-width: 1.5;\n  transform: translate3d(0, 0, 0);\n  transition: all 0.2s ease;\n}\n\n.check svg path {\n  stroke-dasharray: 60;\n  stroke-dashoffset: 0;\n}\n\n.check svg polyline {\n  stroke-dasharray: 22;\n  stroke-dashoffset: 66;\n}\n\n.check:hover:before { opacity: 1; }\n.check:hover svg { stroke: #0e639c; }\n\n.extra-link a {\n    color: #0e639c;\n    text-decoration: none;\n    font-weight: 500;\n}\n.extra-link a:hover { text-decoration: underline; }\n\n.remember-me input:checked + .check svg { stroke: #0e639c; }\n\n.remember-me input:checked + .check svg path {\n  stroke-dashoffset: 60;\n  transition: all 0.3s linear;\n}\n\n.remember-me input:checked + .check svg polyline {\n  stroke-dashoffset: 42;\n  transition: all 0.2s linear;\n  transition-delay: 0.15s;\n}\n\n/* --- Error Message --- */\n.error-msg {\n    color: #dc3545;\n    background-color: transparent;\n    border: 1px solid #dc3545;\n    font-size: 14px;\n    text-align: center;\n    opacity: 0;\n    transform: translateY(-10px);\n    transition: all 0.3s ease;\n    border-radius: 8px;\n    padding: 8px 12px;\n    margin: 8px 0 4px 0;\n    min-height: 36px;\n    max-height: 36px;\n    overflow: hidden;\n    line-height: 1.4;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.error-msg.success {\n    color: #155724;\n    background-color: transparent;\n    border-color: #155724;\n}\n\n.error-msg.warning {\n    color: #856404;\n    background-color: transparent;\n    border-color: #856404;\n}\n\n.error-msg.show {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.error-msg:not(.show) {\n    opacity: 0;\n    transform: translateY(-10px);\n}\n\n.error-msg.shake {\n    animation: shake 0.5s ease-in-out;\n}\n\n@keyframes shake {\n    0%, 100% { transform: translateX(0); }\n    10%, 30%, 50%, 70%, 90% { transform: translateX(-4px); }\n    20%, 40%, 60%, 80% { transform: translateX(4px); }\n}\n\n/* --- Button & Spinner --- */\n.auth-btn {\n    padding: 12px 20px;\n    border-radius: 8px;\n    background: #0e639c;\n    color: #fff;\n    font-weight: bold;\n    font-size: 16px;\n    border: none;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    position: relative; /* Needed for spinner positioning */\n    overflow: hidden; /* Hide anything that might spill out */\n    min-height: 48px; /* Set a fixed height to prevent size change */\n    transform: translateY(0);\n    box-shadow: 0 2px 8px rgba(14, 99, 156, 0.3);\n}\n\n.auth-btn:hover:not(:disabled) {\n    background: #0b4f7a;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(14, 99, 156, 0.4);\n}\n\n.auth-btn:active:not(:disabled) {\n    transform: translateY(0);\n    transition: transform 0.1s ease;\n}\n\n.auth-btn:disabled {\n    background: #6c757d;\n    cursor: not-allowed;\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.auth-btn.loading {\n    pointer-events: none;\n}\n\n.auth-btn.success {\n    background: #28a745;\n    animation: successPulse 0.6s ease;\n}\n\n@keyframes successPulse {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n    100% { transform: scale(1); }\n}\n\n.auth-btn .btn-text {\n    transition: all 0.3s ease;\n    display: inline-flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.auth-btn .btn-icon {\n    font-size: 18px;\n    opacity: 0;\n    transform: translateX(-10px);\n    transition: all 0.3s ease;\n}\n\n.auth-btn.success .btn-icon {\n    opacity: 1;\n    transform: translateX(0);\n}\n\n.auth-btn .spinner {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    width: 20px;\n    height: 20px;\n    border: 2px solid rgba(255, 255, 255, 0.3);\n    border-top: 2px solid #fff;\n    border-radius: 50%;\n    animation: spin 0.8s linear infinite;\n    opacity: 0; /* Hidden by default */\n    transition: opacity 0.3s ease;\n}\n\n.auth-btn.loading .spinner,\n.auth-btn:disabled .spinner  {\n    opacity: 1; /* Show spinner when button is disabled */\n}\n\n.auth-btn.loading .btn-text,\n.auth-btn:disabled .btn-text  {\n    opacity: 0; /* Hide text when button is disabled */\n}\n\n@keyframes spin { \n    0% { transform: translate(-50%, -50%) rotate(0deg); }\n    100% { transform: translate(-50%, -50%) rotate(360deg); }\n}\n\n/* --- Switch Auth Link --- */\n.switch-auth {\n    margin-top: 20px;\n    font-size: 14px;\n    color: #555;\n}\n\n.switch-auth a {\n    color: #0e639c;\n    font-weight: bold;\n    text-decoration: none;\n}\n\n.switch-auth a:hover {\n    text-decoration: underline;\n}\n\n/* --- Dark Mode --- */\n.dark-mode body {\n    background: #1e1e1e;\n    color: #d4d4d4;\n}\n\n.dark-mode .auth-card {\n    background: #2d2d30;\n    border-color: #0e639c; /* Ensure border is visible in dark mode */\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3); /* Standard app shadow for dark mode */\n}\n\n.dark-mode .theme-toggle {\n    border-color: #555;\n    color: #d4d4d4;\n}\n\n.dark-mode .theme-toggle:hover {\n    border-color: #0e639c;\n}\n\n.dark-mode .auth-subtitle,\n.dark-mode .switch-auth {\n    color: #bbb;\n}\n\n.dark-mode .form-description {\n    color: #bbb;\n}\n\n.dark-mode .remember-me,\n.dark-mode .extra-link a {\n    color: #bbb;\n}\n\n.dark-mode .check svg {\n    stroke: #6a737d;\n}\n\n.dark-mode .check:hover svg,\n.dark-mode .remember-me input:checked + .check svg {\n    border-color: #0e639c;\n}\n\n.dark-mode .input-prefix {\n    color: #d4d4d4; /* Match dark mode input text color */\n}\n\n.dark-mode .input-icon {\n    background-color: #d4d4d4; /* Standard dark mode inactive color */\n}\n\n.dark-mode .password-toggle-icon {\n    background-color: #d4d4d4; /* Standard dark mode inactive color */\n}\n\n.dark-mode .password-toggle-icon:hover {\n    background-color: #0e639c; /* Standard active/hover color */\n}\n\n.dark-mode .auth-form input {\n    background-color: #2d2d30;\n    border-color: #555;\n    color: #d4d4d4;\n}\n\n.dark-mode .auth-form input:focus {\n    border-color: #0e639c;\n}\n\n.dark-mode .referral-name-display {\n    background-color: #1c3a50;\n    color: #a5d8ff;\n}\n\n/* --- Animated Background --- */\n/* Static circles removed - JavaScript animation in ui.js handles all background animation */\n/* This prevents conflicts between CSS and JS animations */\n\n/* All static circle styles removed to prevent conflicts with JavaScript animation */\n\n/* Dark mode circle overrides removed - JavaScript animation handles all theming */\n","size_bytes":20104},"Auth/auth.js":{"content":"// auth.js - Supabase Authentication\nimport { supabase } from '../env.js';\nimport { showLoader, hideLoader, showSpinner, hideSpinner } from '../Loader/loader.js';\nimport { initInteractiveBackground, initializeTheme } from '../ui.js';\n\n// Global variables for auth page\nlet adsLoaded = false;\nlet adblockerDetected = false;\n\n// Initialize the auth page\ndocument.addEventListener('DOMContentLoaded', function() {\n    console.log('üîê Initializing auth page...');\n    \n    // Test Supabase connection\n    testSupabaseConnection();\n    \n    initializeTheme(); // Initialize theme system\n    \n    // Initialize interactive background animation for auth pages\n    console.log('üåÄ Starting auth page background animation...');\n    const backgroundCleanup = initInteractiveBackground();\n    \n    // Store cleanup function for potential later use\n    window.authBackgroundCleanup = backgroundCleanup;\n    initializeAuthForms();\n    initializeAuthAds(); // Initialize ads for auth page\n    \n    console.log('‚úÖ Auth page initialized successfully');\n});\n\n// Test Supabase connection\nasync function testSupabaseConnection() {\n    try {\n        console.log('üîó Testing Supabase connection...');\n        const { data, error } = await supabase.auth.getSession();\n        if (error) {\n            console.error('‚ùå Supabase connection error:', error);\n        } else {\n            console.log('‚úÖ Supabase connected successfully');\n            if (data.session) {\n                console.log('üë§ User session found:', data.session.user.email);\n            }\n        }\n    } catch (error) {\n        console.error('‚ùå Supabase connection test failed:', error);\n    }\n}\n\nfunction initializeAuthForms() {\n    // Login form\n    const loginForm = document.getElementById('login-form');\n    if (loginForm) {\n        loginForm.addEventListener('submit', handleLogin);\n    }\n    \n    // Signup form\n    const signupForm = document.getElementById('signup-form');\n    if (signupForm) {\n        signupForm.addEventListener('submit', handleSignup);\n    }\n    \n    // Forgot password form\n    const forgotPasswordForm = document.getElementById('forgot-password-form');\n    if (forgotPasswordForm) {\n        forgotPasswordForm.addEventListener('submit', handleForgotPassword);\n    }\n    \n    // Theme toggle button\n    const themeToggle = document.getElementById('theme-toggle');\n    if (themeToggle) {\n        themeToggle.addEventListener('click', handleThemeToggle);\n        updateThemeIcon();\n    }\n    \n    // Toggle password visibility\n    const passwordToggle = document.getElementById('password-toggle');\n    if (passwordToggle) {\n        passwordToggle.addEventListener('click', () => togglePasswordVisibility('login-password'));\n    }\n    \n    const confirmPasswordToggle = document.getElementById('confirm-password-toggle');\n    if (confirmPasswordToggle) {\n        confirmPasswordToggle.addEventListener('click', () => togglePasswordVisibility('signup-password-confirm'));\n    }\n    \n    // Password strength indicator for signup\n    const signupPassword = document.getElementById('signup-password');\n    if (signupPassword) {\n        signupPassword.addEventListener('input', updatePasswordStrength);\n    }\n}\n\nfunction handleThemeToggle(e) {\n    const button = e.target.closest('.theme-toggle');\n    if (!button) return;\n    \n    // Get button position for circle origin\n    const rect = button.getBoundingClientRect();\n    const centerX = rect.left + rect.width / 2;\n    const centerY = rect.top + rect.height / 2;\n    \n    // Create transition circle\n    const circle = document.createElement('div');\n    circle.className = 'theme-transition-circle';\n    circle.style.left = centerX + 'px';\n    circle.style.top = centerY + 'px';\n    circle.style.transform = 'translate(-50%, -50%)';\n    \n    // Determine target theme\n    const currentTheme = localStorage.getItem('statwise-theme') || 'light';\n    const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n    \n    // Set circle color based on target theme\n    if (newTheme === 'light') {\n        circle.classList.add('light-mode');\n    }\n    \n    document.body.appendChild(circle);\n    \n    // Trigger expansion\n    setTimeout(() => {\n        circle.classList.add('expanding');\n    }, 10);\n    \n    // Apply theme change during expansion\n    setTimeout(() => {\n        import('../ui.js').then(({ toggleTheme }) => {\n            toggleTheme();\n            updateThemeIcon(newTheme);\n        });\n    }, 300);\n    \n    // Remove circle after animation\n    setTimeout(() => {\n        if (circle.parentNode) {\n            circle.parentNode.removeChild(circle);\n        }\n    }, 700);\n}\n\nfunction updateThemeIcon(theme = null) {\n    const themeIcon = document.querySelector('.theme-icon');\n    if (!themeIcon) return;\n    \n    const currentTheme = theme || localStorage.getItem('statwise-theme') || 'light';\n    themeIcon.textContent = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';\n}\n\n// Enhanced Error Handling Functions\nfunction showErrorMessage(elementId, message) {\n    const errorElement = document.getElementById(elementId);\n    if (!errorElement) return;\n    \n    errorElement.textContent = message;\n    errorElement.className = 'error-msg show';\n    errorElement.classList.add('shake');\n    \n    setTimeout(() => {\n        errorElement.classList.remove('shake');\n    }, 500);\n    \n    // Auto-hide error messages after 5 seconds\n    setTimeout(() => {\n        if (errorElement.classList.contains('show')) {\n            errorElement.classList.remove('show');\n        }\n    }, 5000);\n}\n\nfunction showSuccessMessage(elementId, message) {\n    const errorElement = document.getElementById(elementId);\n    if (!errorElement) return;\n    \n    errorElement.textContent = message;\n    errorElement.className = 'error-msg success show';\n    \n    // Auto-hide success messages after 4 seconds\n    setTimeout(() => {\n        if (errorElement.classList.contains('show')) {\n            errorElement.classList.remove('show');\n        }\n    }, 4000);\n}\n\nfunction showWarningMessage(elementId, message) {\n    const errorElement = document.getElementById(elementId);\n    if (!errorElement) return;\n    \n    errorElement.textContent = message;\n    errorElement.className = 'error-msg warning show';\n    \n    // Auto-hide warning messages after 5 seconds\n    setTimeout(() => {\n        if (errorElement.classList.contains('show')) {\n            errorElement.classList.remove('show');\n        }\n    }, 5000);\n}\n\nfunction clearErrorMessages() {\n    const errorElements = document.querySelectorAll('.error-msg');\n    errorElements.forEach(element => {\n        element.classList.remove('show', 'success', 'warning');\n        element.textContent = '';\n    });\n}\n\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction isValidPassword(password) {\n    // At least 8 characters, one uppercase, one lowercase, one number\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\n    return passwordRegex.test(password);\n}\n\nfunction getPasswordStrength(password) {\n    let score = 0;\n    if (password.length >= 8) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/\\d/.test(password)) score++;\n    if (/[^\\w\\s]/.test(password)) score++;\n    \n    if (score < 2) return { strength: 'weak', text: 'Weak' };\n    if (score < 4) return { strength: 'medium', text: 'Medium' };\n    return { strength: 'strong', text: 'Strong' };\n}\n\nfunction togglePasswordVisibility(inputId) {\n    const input = document.getElementById(inputId);\n    const toggle = input?.parentElement.querySelector('.password-toggle-icon');\n    \n    if (!input || !toggle) return;\n    \n    if (input.type === 'password') {\n        input.type = 'text';\n        toggle.classList.remove('icon-eye');\n        toggle.classList.add('icon-eye-slash');\n    } else {\n        input.type = 'password';\n        toggle.classList.remove('icon-eye-slash');\n        toggle.classList.add('icon-eye');\n    }\n}\n\nfunction updatePasswordStrength() {\n    const passwordInput = document.getElementById('signup-password');\n    const strengthContainer = document.getElementById('password-strength-container');\n    const strengthText = document.getElementById('password-strength-text');\n    const strengthBars = strengthContainer?.querySelectorAll('.strength-bar');\n    \n    if (!passwordInput || !strengthContainer || !strengthText || !strengthBars) return;\n    \n    const password = passwordInput.value;\n    const strength = getPasswordStrength(password);\n    \n    // Clear all bars\n    strengthBars.forEach(bar => {\n        bar.className = 'strength-bar';\n    });\n    \n    // Update based on strength\n    let activeCount = 0;\n    let colorClass = '';\n    \n    if (password.length === 0) {\n        strengthText.textContent = '';\n        return;\n    }\n    \n    switch (strength.strength) {\n        case 'weak':\n            activeCount = 1;\n            colorClass = 'weak';\n            break;\n        case 'medium':\n            activeCount = 3;\n            colorClass = 'medium';\n            break;\n        case 'strong':\n            activeCount = 4;\n            colorClass = 'strong';\n            break;\n    }\n    \n    // Activate bars\n    for (let i = 0; i < activeCount; i++) {\n        strengthBars[i].classList.add('active', colorClass);\n    }\n    \n    strengthText.textContent = strength.text;\n    strengthText.className = colorClass;\n}\n\nasync function handleLogin(e) {\n    e.preventDefault();\n    console.log('üîê Login attempt started...');\n    clearErrorMessages();\n    \n    const formData = new FormData(e.target);\n    const email = formData.get('email')?.trim();\n    const password = formData.get('password');\n    \n    console.log('Login data:', { email: email, passwordLength: password?.length });\n    \n    // Enhanced validation\n    if (!email || !password) {\n        console.log('‚ùå Validation failed: Missing fields');\n        showErrorMessage('login-error', 'Please fill in all fields');\n        return;\n    }\n    \n    if (!isValidEmail(email)) {\n        console.log('‚ùå Validation failed: Invalid email format');\n        showErrorMessage('login-error', 'Please enter a valid email address');\n        return;\n    }\n    \n    try {\n        console.log('üîÑ Starting Supabase authentication...');\n        showLoader();\n        \n        const { data, error } = await supabase.auth.signInWithPassword({\n            email: email,\n            password: password\n        });\n        \n        console.log('Supabase auth response:', { data, error });\n        \n        if (error) {\n            console.error('‚ùå Login error:', error.message, error.status);\n            showErrorMessage('login-error', getErrorMessage(error));\n            return;\n        }\n        \n        if (data.user) {\n            console.log('‚úÖ Login successful for:', data.user.email);\n            showSuccessMessage('login-error', 'Login successful! Redirecting...');\n            \n            // Create or update user profile\n            console.log('üìù Creating/updating user profile...');\n            await createOrUpdateUserProfile(data.user);\n            \n            // Redirect to main app\n            console.log('üîÑ Redirecting to main app...');\n            setTimeout(() => {\n                window.location.href = '../index.html';\n            }, 1500);\n        } else {\n            console.log('‚ùå No user data returned from Supabase');\n            showErrorMessage('login-error', 'Login failed - no user data received');\n        }\n        \n    } catch (error) {\n        console.error('Unexpected login error:', error);\n        showErrorMessage('login-error', 'An unexpected error occurred. Please try again.');\n    } finally {\n        hideLoader();\n    }\n}\n\nasync function handleSignup(e) {\n    e.preventDefault();\n    clearErrorMessages();\n    \n    const formData = new FormData(e.target);\n    const email = formData.get('email')?.trim();\n    const password = formData.get('password');\n    const confirmPassword = formData.get('confirmPassword');\n    const username = formData.get('username')?.trim();\n    const referralCode = formData.get('referralCode')?.trim();\n    \n    // Enhanced validation\n    if (!email || !password || !confirmPassword || !username) {\n        showErrorMessage('signup-error', 'Please fill in all required fields');\n        return;\n    }\n    \n    if (!isValidEmail(email)) {\n        showErrorMessage('signup-error', 'Please enter a valid email address');\n        return;\n    }\n    \n    if (username.length < 3) {\n        showErrorMessage('signup-error', 'Username must be at least 3 characters long');\n        return;\n    }\n    \n    if (!isValidPassword(password)) {\n        showErrorMessage('signup-error', 'Password must be at least 8 characters with uppercase, lowercase, and number');\n        return;\n    }\n    \n    if (password !== confirmPassword) {\n        showErrorMessage('signup-error', 'Passwords do not match');\n        return;\n    }\n    \n    try {\n        showLoader();\n        \n        // Validate referral code if provided\n        let referrerId = null;\n        if (referralCode) {\n            const { data: referralData, error: referralError } = await supabase\n                .from('referral_codes')\n                .select('user_id')\n                .eq('code', referralCode.toUpperCase())\n                .eq('active', true)\n                .single();\n                \n            if (referralError || !referralData) {\n                showErrorMessage('signup-error', 'Invalid referral code');\n                return;\n            }\n            referrerId = referralData.user_id;\n        }\n        \n        const { data, error } = await supabase.auth.signUp({\n            email: email,\n            password: password,\n            options: {\n                data: {\n                    display_name: username,\n                    username: username\n                }\n            }\n        });\n        \n        if (error) {\n            console.error('Signup error:', error);\n            showErrorMessage('signup-error', getErrorMessage(error));\n            return;\n        }\n        \n        if (data.user) {\n            console.log('Signup successful:', data.user.email);\n            \n            // Create user profile\n            await createOrUpdateUserProfile(data.user, { referred_by: referrerId });\n            \n            // Create referral relationship if applicable\n            if (referrerId && referralCode) {\n                await createReferralRelationship(referrerId, data.user.id, referralCode);\n            }\n            \n            showSuccessMessage('signup-error', 'Account created successfully! Please check your email to verify your account.');\n            \n            // Redirect to login after a delay\n            setTimeout(() => {\n                window.location.href = './login.html';\n            }, 3000);\n        }\n        \n    } catch (error) {\n        console.error('Unexpected signup error:', error);\n        showErrorMessage('signup-error', 'An unexpected error occurred. Please try again.');\n    } finally {\n        hideLoader();\n    }\n}\n\nasync function handleForgotPassword(e) {\n    e.preventDefault();\n    clearErrorMessages();\n    \n    const formData = new FormData(e.target);\n    const email = formData.get('email')?.trim();\n    \n    if (!email) {\n        showErrorMessage('forgot-password-error', 'Please enter your email address');\n        return;\n    }\n    \n    if (!isValidEmail(email)) {\n        showErrorMessage('forgot-password-error', 'Please enter a valid email address');\n        return;\n    }\n    \n    try {\n        showLoader();\n        \n        const { error } = await supabase.auth.resetPasswordForEmail(email, {\n            redirectTo: window.location.origin + '/Auth/login.html'\n        });\n        \n        if (error) {\n            console.error('Password reset error:', error);\n            showErrorMessage('forgot-password-error', getErrorMessage(error));\n            return;\n        }\n        \n        showSuccessMessage('forgot-password-error', 'Password reset email sent! Please check your inbox.');\n        \n        // Redirect to login after a delay\n        setTimeout(() => {\n            window.location.href = './login.html';\n        }, 3000);\n        \n    } catch (error) {\n        console.error('Unexpected password reset error:', error);\n        showErrorMessage('forgot-password-error', 'An unexpected error occurred. Please try again.');\n    } finally {\n        hideLoader();\n    }\n}\n\nasync function createOrUpdateUserProfile(user, additionalData = {}) {\n    try {\n        const userData = {\n            id: user.id,\n            email: user.email,\n            username: user.user_metadata?.username || user.user_metadata?.display_name || user.email.split('@')[0],\n            display_name: user.user_metadata?.display_name || user.user_metadata?.username || user.email.split('@')[0],\n            current_tier: 'Free Tier',\n            tier: 'Free Tier',\n            subscription_status: 'active',\n            is_new_user: true,\n            notifications: true,\n            created_at: new Date().toISOString(),\n            last_login: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            ...additionalData\n        };\n\n        const { data, error } = await supabase\n            .from('user_profiles')\n            .upsert(userData, { onConflict: 'id' })\n            .select()\n            .single();\n\n        if (error && error.code !== '23505') {\n            console.warn('Profile creation warning:', error);\n        } else {\n            console.log('User profile created/updated:', data);\n        }\n\n        // Generate referral code\n        await generateReferralCode(user.id, userData.username);\n        \n    } catch (error) {\n        console.warn('Error creating user profile:', error);\n    }\n}\n\nasync function generateReferralCode(userId, username) {\n    try {\n        const code = userId.substring(0, 8).toUpperCase();\n        \n        const { data, error } = await supabase\n            .from('referral_codes')\n            .upsert({\n                user_id: userId,\n                code: code,\n                username: username,\n                total_referrals: 0,\n                active: true,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }, { onConflict: 'user_id' })\n            .select()\n            .single();\n\n        if (error && error.code !== '23505') {\n            console.warn('Referral code generation warning:', error);\n        } else {\n            console.log('Referral code generated:', data?.code);\n        }\n    } catch (error) {\n        console.warn('Error generating referral code:', error);\n    }\n}\n\nasync function createReferralRelationship(referrerId, referredId, referralCode) {\n    try {\n        const { data, error } = await supabase\n            .from('referrals')\n            .insert({\n                referrer_id: referrerId,\n                referred_id: referredId,\n                referral_code: referralCode,\n                reward_claimed: false,\n                reward_amount: 500.00, // Default reward\n                created_at: new Date().toISOString()\n            })\n            .select()\n            .single();\n\n        if (error && error.code !== '23505') {\n            console.warn('Referral relationship creation warning:', error);\n        } else {\n            console.log('Referral relationship created:', data);\n            \n            // Update referral stats\n            await updateReferralStats(referrerId);\n        }\n    } catch (error) {\n        console.warn('Error creating referral relationship:', error);\n    }\n}\n\nasync function updateReferralStats(userId) {\n    try {\n        // Count total referrals\n        const { count } = await supabase\n            .from('referrals')\n            .select('*', { count: 'exact', head: true })\n            .eq('referrer_id', userId);\n\n        // Update referral code stats\n        await supabase\n            .from('referral_codes')\n            .update({\n                total_referrals: count || 0,\n                updated_at: new Date().toISOString()\n            })\n            .eq('user_id', userId);\n\n        // Update user profile stats\n        await supabase\n            .from('user_profiles')\n            .update({\n                total_referrals: count || 0,\n                updated_at: new Date().toISOString()\n            })\n            .eq('id', userId);\n\n        console.log(`Updated referral stats for user ${userId}: ${count} referrals`);\n    } catch (error) {\n        console.warn('Error updating referral stats:', error);\n    }\n}\n\n\nfunction getErrorMessage(error) {\n    switch (error.message) {\n        case 'Invalid login credentials':\n            return 'Invalid email or password. Please check your credentials and try again.';\n        case 'Email not confirmed':\n            return 'Please verify your email address before signing in.';\n        case 'User already registered':\n            return 'An account with this email already exists. Please sign in instead.';\n        case 'Password should be at least 6 characters':\n            return 'Password must be at least 6 characters long.';\n        case 'Unable to validate email address: invalid format':\n            return 'Please enter a valid email address.';\n        case 'Too many requests':\n            return 'Too many attempts. Please wait a moment before trying again.';\n        default:\n            return error.message || 'An error occurred. Please try again.';\n    }\n}\n\nfunction showMessage(message, type = 'info') {\n    // Remove existing messages\n    const existingMessages = document.querySelectorAll('.auth-message');\n    existingMessages.forEach(msg => msg.remove());\n    \n    // Create new message\n    const messageDiv = document.createElement('div');\n    messageDiv.className = `auth-message auth-message-${type}`;\n    messageDiv.textContent = message;\n    \n    // Insert message at the top of the form container\n    const container = document.querySelector('.auth-container');\n    if (container) {\n        container.insertBefore(messageDiv, container.firstChild);\n        \n        // Auto-remove success/error messages after 5 seconds\n        if (type === 'success' || type === 'error') {\n            setTimeout(() => {\n                if (messageDiv.parentNode) {\n                    messageDiv.remove();\n                }\n            }, 5000);\n        }\n    }\n}\n\n// Check if user is already logged in and redirect to main app\nasync function checkExistingSession() {\n    const { data: { session } } = await supabase.auth.getSession();\n    if (session) {\n        console.log('User already logged in, redirecting to main app...');\n        window.location.href = '../index.html';\n    }\n}\n\n// Check for existing session when page loads\ncheckExistingSession();\n\n// ===== Auth Page Ad System =====\nfunction initializeAuthAds() {\n    console.log('üì∫ Initializing ads for auth page...');\n    \n    // Wait for consent manager and check consent\n    checkAuthConsentAndLoadAds();\n}\n\n// Check consent status and load ads accordingly for auth pages\nfunction checkAuthConsentAndLoadAds() {\n    // Listen for consent updates\n    window.addEventListener('consentUpdated', function(event) {\n        const consent = event.detail;\n        console.log('üç™ Auth page: Consent updated:', consent);\n        \n        if (consent.ad_storage === 'granted') {\n            loadAuthPageAds();\n        } else {\n            console.log('üö´ Auth page: Ads not loaded - consent denied');\n        }\n    });\n    \n    // Check if consent manager is available and get current consent\n    if (window.consentManager) {\n        const currentConsent = window.consentManager.getConsentStatus();\n        if (currentConsent && currentConsent.ad_storage === 'granted') {\n            loadAuthPageAds();\n        } else {\n            console.log('‚è≥ Auth page: Waiting for user consent to load ads...');\n        }\n    } else {\n        // Fallback: wait for consent manager to load\n        console.log('‚è≥ Auth page: Consent manager not ready, waiting...');\n        setTimeout(checkAuthConsentAndLoadAds, 1000);\n    }\n}\n\nfunction loadAuthPageAds() {\n    console.log('üì∫ Loading ads for auth page...');\n    \n    // Load Google AdSense script dynamically\n    const script = document.createElement('script');\n    script.async = true;\n    script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-9868946535437166';\n    script.crossOrigin = 'anonymous';\n    \n    script.onload = () => {\n        console.log('‚úÖ AdSense loaded successfully on auth page');\n        adsLoaded = true;\n        // Check for adblocker after script loads\n        setTimeout(detectAuthAdBlocker, 1000);\n    };\n    \n    script.onerror = () => {\n        console.log('‚ùå AdSense failed to load on auth page - likely blocked');\n        adblockerDetected = true;\n        showAuthAdBlockerMessage();\n    };\n    \n    document.head.appendChild(script);\n}\n\nfunction detectAuthAdBlocker() {\n    console.log('üïµÔ∏è Checking for adblocker on auth page...');\n    \n    // Create a test ad element\n    const testAd = document.createElement('div');\n    testAd.innerHTML = '&nbsp;';\n    testAd.className = 'adsbox adsbygoogle';\n    testAd.style.position = 'absolute';\n    testAd.style.left = '-9999px';\n    testAd.style.width = '1px';\n    testAd.style.height = '1px';\n    \n    document.body.appendChild(testAd);\n    \n    setTimeout(() => {\n        const isBlocked = testAd.offsetHeight === 0 || \n                         testAd.offsetWidth === 0 || \n                         testAd.style.display === 'none' ||\n                         testAd.style.visibility === 'hidden';\n        \n        document.body.removeChild(testAd);\n        \n        if (isBlocked || !window.adsbygoogle) {\n            console.log('üö´ Adblocker detected on auth page');\n            adblockerDetected = true;\n            showAuthAdBlockerMessage();\n        } else {\n            console.log('‚úÖ No adblocker detected on auth page');\n            adblockerDetected = false;\n        }\n    }, 100);\n}\n\nfunction showAuthAdBlockerMessage() {\n    console.log('üì¢ Showing adblocker message on auth page');\n    \n    // Create full-page overlay\n    const overlay = document.createElement('div');\n    overlay.id = 'auth-adblocker-overlay';\n    overlay.innerHTML = `\n        <div class=\"adblocker-container\">\n            <div class=\"adblocker-content\">\n                <div class=\"adblocker-icon\">üö´</div>\n                <h2>AdBlocker Detected</h2>\n                <p>We noticed you're using an ad blocker. To continue using StatWise for free, please:</p>\n                <ul>\n                    <li>‚úÖ Disable your ad blocker for this site</li>\n                    <li>üîÑ Refresh the page</li>\n                    <li>üíé Or sign up for Premium for an ad-free experience</li>\n                </ul>\n                <div class=\"adblocker-buttons\">\n                    <button onclick=\"window.location.reload()\" class=\"btn-refresh\">Refresh Page</button>\n                    <button onclick=\"window.location.href='../index.html'\" class=\"btn-upgrade\">Learn About Premium</button>\n                </div>\n                <p class=\"adblocker-note\">Ads help us keep StatWise free for everyone!</p>\n            </div>\n        </div>\n    `;\n    \n    // Apply the same styles as main app\n    overlay.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.95);\n        z-index: 10000;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        backdrop-filter: blur(10px);\n    `;\n    \n    document.body.appendChild(overlay);\n}\n\nconsole.log('‚úÖ Supabase authentication system loaded successfully!');","size_bytes":27859},"Landing_Page/styles.css":{"content":"/* /Landing_Page/styles.css */\n\n/* Basic Reset & Font */\nbody, html {\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n    background-color: #121212;\n    color: #f0f0f0;\n    line-height: 1.6;\n}\n\n/* Container */\n.container {\n    max-width: 1100px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Header */\n.main-header {\n    background: #1a1a1a;\n    padding: 1rem 0;\n    border-bottom: 1px solid #333;\n}\n\n.main-header .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.logo {\n    font-size: 1.8rem;\n    font-weight: bold;\n    color: #0e639c; /* Accent color */\n    text-decoration: none;\n}\n\n.main-nav a {\n    color: #f0f0f0;\n    text-decoration: none;\n    margin-left: 20px;\n    font-size: 1rem;\n    transition: color 0.3s ease;\n}\n\n.main-nav a:hover {\n    color: #0e639c;\n}\n\n/* Hero Section */\n.hero {\n    text-align: center;\n    padding: 80px 20px;\n    background: linear-gradient(rgba(18, 18, 18, 0.8), rgba(18, 18, 18, 0.9)), url('https://images.unsplash.com/photo-1517420533383-8f6f20815a47?q=80&w=2070') center/cover no-repeat;\n}\n\n.hero h1 {\n    font-size: 3rem;\n    margin-bottom: 10px;\n    color: #fff;\n}\n\n.hero p {\n    font-size: 1.2rem;\n    margin-bottom: 30px;\n    color: #ccc;\n}\n\n.cta-button {\n    background-color: #0e639c;\n    color: white;\n    padding: 15px 30px;\n    font-size: 1.1rem;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    text-decoration: none;\n    transition: background-color 0.3s ease;\n}\n\n.cta-button:hover {\n    background-color: #0c5689;\n}\n\n/* Features Section */\n.features {\n    padding: 60px 20px;\n    background: #1a1a1a;\n}\n\n.features h2 {\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 40px;\n}\n\n.features-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 30px;\n}\n\n.feature-card {\n    background: #242424;\n    padding: 30px;\n    border-radius: 8px;\n    text-align: center;\n    border: 1px solid #333;\n}\n\n.feature-card h3 {\n    font-size: 1.5rem;\n    color: #0e639c;\n    margin-top: 0;\n}\n\n/* Footer */\n.main-footer {\n    text-align: center;\n    padding: 20px;\n    background: #121212;\n    border-top: 1px solid #333;\n    margin-top: 40px;\n}\n\n/* Pricing Section */\n.pricing {\n    padding: 60px 20px;\n}\n\n.pricing h2 {\n    text-align: center;\n    font-size: 2.5rem;\n    margin-bottom: 40px;\n}\n\n.pricing-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));\n    gap: 30px;\n    align-items: stretch; /* Make cards same height */\n}\n\n.pricing-card {\n    background: #1a1a1a;\n    padding: 30px;\n    border-radius: 10px;\n    text-align: center;\n    border-top: 5px solid;\n    display: flex;\n    flex-direction: column;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.pricing-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 10px 20px rgba(0,0,0,0.2);\n}\n\n.pricing-card.free { border-color: #4caf50; }\n.pricing-card.premium { border-color: #2196f3; }\n.pricing-card.vip { border-color: #9c27b0; }\n.pricing-card.vvip { border-color: #ff9800; }\n\n.pricing-card h3 {\n    font-size: 1.8rem;\n    margin-bottom: 10px;\n}\n\n.pricing-card .price {\n    font-size: 2rem;\n    font-weight: bold;\n    margin-bottom: 20px;\n}\n\n.pricing-card .price span {\n    font-size: 1rem;\n    font-weight: normal;\n    color: #ccc;\n}\n\n.pricing-card ul {\n    list-style: none;\n    padding: 0;\n    margin-bottom: 30px;\n    text-align: left;\n    flex-grow: 1; /* Pushes button to the bottom */\n}\n\n.pricing-card ul li {\n    margin-bottom: 10px;\n    color: #ccc;\n}","size_bytes":3633},"Loader/loader.css":{"content":"","size_bytes":0},"Loader/loader.js":{"content":"// loader.js\n\n// Create loader element\nconst loader = document.createElement(\"div\");\nloader.id = \"globalLoader\";\nloader.innerHTML = `\n  <div class=\"loader-overlay\"></div>\n  <div class=\"loader-spinner\"></div>\n`;\ndocument.body.appendChild(loader);\n\nlet loaderTimeout;\nlet loaderActive = false;\n\n// Function to show loader\nexport function showLoader() {\n    // Clear any existing timeout first\n    clearTimeout(loaderTimeout);\n    \n    // Only show the loader if the operation takes more than 300ms\n    loaderTimeout = setTimeout(() => {\n        const loader = document.getElementById(\"globalLoader\");\n        if (loader && !loaderActive) {\n            loader.style.display = \"flex\";\n            loaderActive = true;\n            console.log('üîÑ Loader shown');\n        }\n    }, 300); // 300ms delay\n}\n\n// Function to hide loader\nexport function hideLoader() {\n    // Clear the timeout so the loader doesn't appear if the action was fast\n    clearTimeout(loaderTimeout);\n    const loader = document.getElementById(\"globalLoader\");\n    if (loader && loader.style.display === \"flex\") {\n        loader.style.display = \"none\";\n        loaderActive = false;\n        console.log('‚úÖ Loader hidden');\n    }\n}\n\n/**\n * Shows a spinner on a button and disables it.\n * Relies on CSS to hide text and show the spinner.\n * @param {HTMLElement} btn The button element.\n */\nexport function showSpinner(btn) {\n    btn.disabled = true;\n    // The CSS handles showing the spinner and hiding the text when the button is disabled.\n}\n\n/**\n * Hides a spinner on a button and enables it.\n * @param {HTMLElement} btn The button element.\n */\nexport function hideSpinner(btn) {\n    btn.disabled = false;\n    // The CSS will hide the spinner and show the text again.\n}\n","size_bytes":1741},"Offline/offline.css":{"content":"@font-face {\n    /* Ensure the app's font is available offline */\n    font-family: 'Optimistic';\n    src: url('../Assets/Fonts/Optimistic_Text_A_Md.ttf');\n}\n\nbody {\n    margin: 0;\n    font-family: 'Optimistic', sans-serif;\n    background-color: #f4f5f7;\n    color: #1c1c1e;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    padding: 20px;\n    text-align: center;\n    box-sizing: border-box;\n}\n\n.offline-card {\n    background: #ffffff;\n    border-radius: 12px;\n    padding: 32px 24px;\n    max-width: 350px;\n    width: 100%;\n    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);\n}\n\n.offline-icon {\n    color: #0e639c;\n    margin-bottom: 20px;\n}\n\n.offline-icon svg {\n    width: 60px;\n    height: 60px;\n}\n\n.offline-title {\n    font-size: 24px;\n    font-weight: bold;\n    color: #1c1c1e;\n    margin-bottom: 8px;\n}\n\n.offline-message {\n    font-size: 16px;\n    color: #555;\n    line-height: 1.5;\n}\n\n/* Dark Mode styles for when the user has it enabled */\n@media (prefers-color-scheme: dark) {\n    body {\n        background-color: #1e1e1e;\n    }\n\n    .offline-card {\n        background: #2d2d30;\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\n    }\n\n    .offline-icon {\n        color: #a5d8ff;\n    }\n\n    .offline-message {\n        color: #aaa;\n    }\n}","size_bytes":1288},"Offline/offline.js":{"content":"","size_bytes":0},"Pages/manage-subscription.css":{"content":"body {\n    font-family: sans-serif;\n    background-color: #f4f4f4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.container {\n    background-color: #fff;\n    padding: 2rem;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    text-align: center;\n}\n\nh1 {\n    margin-bottom: 1.5rem;\n}\n\n.subscription-details {\n    margin-bottom: 2rem;\n}\n\n.subscription-details h2 {\n    margin-bottom: 1rem;\n}\n\n.actions button {\n    background-color: #dc3545;\n    color: #fff;\n    border: none;\n    padding: 0.8rem 1.5rem;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 1rem;\n    margin: 0 0.5rem;\n}\n\n.actions button#changePlan {\n    background-color: #007bff;\n}\n","size_bytes":740},"Pages/manage-subscription.js":{"content":"","size_bytes":0},"replit.md":{"content":"# StatWise - AI Sports Prediction PWA\n\n## Overview\n\nStatWise is a Progressive Web App (PWA) that provides AI-powered sports predictions with a tiered subscription model. The application is built as a single-page application (SPA) using vanilla JavaScript and Firebase services, offering users match predictions with confidence ratings, subscription management, referral programs, and comprehensive user profiles. The app is designed to work offline and can be installed on user devices as a native-like experience.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe application follows a Single Page Application (SPA) pattern built with vanilla JavaScript ES modules. The main entry point is `index.html` with dynamic content loading managed by `main.js`. The routing system uses JavaScript to dynamically load page content without full page refreshes, providing smooth transitions between views.\n\nThe UI is organized into modular pages stored in the `Pages/` directory, including home, history, profile, subscriptions, insights, and referral management. CSS styling is centralized in `styles.css` with component-specific stylesheets for authentication and other specialized views.\n\n### Backend Architecture (Supabase-Only)\nThe application now uses a complete Supabase serverless architecture:\n\n- **Authentication**: Supabase Auth handles user registration, login, password reset, and session management with Row Level Security\n- **Database**: PostgreSQL database with comprehensive schema including user profiles, subscription data, payment transactions, referral system, AI predictions, and admin features\n- **File Storage**: Supabase Storage for user profile picture uploads with automatic public URL generation\n- **Real-time Features**: Built-in real-time subscriptions for live data updates\n- **Security**: Row Level Security (RLS) policies ensure secure data access based on user authentication\n- **API**: Auto-generated REST and GraphQL APIs with built-in authentication and authorization\n\n### Data Storage Design\nThe PostgreSQL database uses a relational structure with comprehensive tables for user profiles, predictions, subscription events, payment transactions, referrals, AI predictions, and admin features. The schema includes proper indexing, foreign key relationships, and JSONB fields for flexible data storage. Row Level Security ensures data access is properly controlled based on user authentication.\n\n### Authentication and Authorization\nSupabase Auth provides secure user management with email/password authentication, password reset functionality, and session persistence. The application includes tier-based access control with Row Level Security policies that restrict features and data access based on subscription levels (Free Tier, Premium Tier, VIP Tier, VVIP Tier). Database-level security ensures data integrity and proper user isolation.\n\n### Progressive Web App Features\nThe application implements PWA standards with a service worker (`sw.js`) that provides offline functionality and caching. Users can install the app on their devices, and the service worker serves an offline page when network connectivity is unavailable. The app includes a Web App Manifest for native-like installation experience.\n\n### Push Notification System\nFirebase Cloud Messaging (FCM) enables push notifications for prediction alerts and account updates. The system handles both foreground and background messages, allowing users to opt-in to receive notifications about new predictions and subscription changes.\n\n## External Dependencies\n\n### Payment Processing\n- **Flutterwave**: Integrated for subscription payment processing with public API key configuration for frontend payment flows\n\n### Supabase Services (Complete Migration)\n- **Supabase Auth**: User authentication and session management with Row Level Security\n- **PostgreSQL Database**: Complete relational database with comprehensive schema for all application data\n- **Supabase Storage**: File storage for profile pictures with automatic public URL generation\n- **Real-time Subscriptions**: Live data updates and notifications\n- **Auto-generated APIs**: REST and GraphQL APIs with built-in authentication\n\n### Removed Services (Firebase Migration Complete)\n- All Firebase services have been completely removed and replaced with Supabase equivalents\n- Firebase Authentication, Firestore, Firebase Storage, and Firebase Cloud Messaging are no longer used\n- All configuration files (firebase.json, firestore.rules, etc.) have been removed\n\n### Third-Party Libraries\n- **Vercel Analytics**: User behavior tracking and performance monitoring\n- **HTTP Server**: Development server for local testing\n\n### External APIs\n- **IP Geolocation**: Public IP detection service (api.ipify.org) for user location tracking and security logging\n\n### Development Tools\n- **Node.js/NPM**: Package management and development dependencies\n- **HTTP Server**: Development server configured for local testing on port 5000 with CORS enabled\n- **Replit**: Development environment and deployment platform with autoscale deployment target\n\n## Recent Changes\n\n### September 9, 2025 - Complete Supabase Migration and GitHub Import Setup\n- **Complete Firebase Removal**: All Firebase dependencies, configuration files, and code have been removed\n- **Supabase-Only Architecture**: Migrated to 100% Supabase backend with PostgreSQL database, Auth, and Storage\n- **Comprehensive Database Schema**: Implemented complete database schema with user profiles, subscriptions, payments, referrals, AI predictions, and admin features\n- **Enhanced Security**: Added Row Level Security policies for all tables ensuring proper data access control\n- **Authentication Rewrite**: Completely rewrote authentication system to use Supabase Auth with email/password authentication\n- **Modern Architecture**: Streamlined to single backend provider eliminating complexity of hybrid Firebase/Supabase setup\n- **Performance Improvements**: Direct database queries with proper indexing and relationships for better performance\n- **Scalability Ready**: PostgreSQL database with JSONB support and real-time capabilities for future growth\n- **GitHub Import Success**: Successfully imported project from GitHub and configured for Replit environment\n- **Profile Picture Upload**: Added complete profile picture upload functionality using Supabase Storage bucket 'profile-pictures' with file validation, size limits, and immediate UI updates\n- **Enhanced Avatar UI**: Improved avatar display with hover effects, camera icon overlay, and clickable upload functionality\n- **Production Deployment**: Configured autoscale deployment target for production-ready hosting\n\n### September 6, 2025 - Project Setup and Authentication Fixes\n- Successfully imported from GitHub and configured for Replit environment\n- Set up workflow using http-server on port 5000 with CORS enabled for proper proxy support\n- Configured deployment target as \"autoscale\" for production deployment\n- Verified all Firebase services and dependencies are properly configured\n- All static assets (CSS, JavaScript, fonts, icons) are loading correctly\n- Progressive Web App features including service worker registration are functioning\n\n### September 6, 2025 - Authentication and UI Improvements\n- Fixed authentication issues by adding missing referral code generation to login flow\n- Corrected variable naming typo in signup code that was causing authentication failures\n- Updated Firestore rules compliance to ensure proper user document creation\n- Removed background animation from main application pages for cleaner UI\n- Kept background animation only on authentication pages (login, signup, forgot password)\n- Removed background animation toggle from profile settings as requested\n- Authentication flow and subscription management systems are now fully operational\n\n### September 6, 2025 - Enhanced Mobile Experience and AI Chat Integration\n- **Custom Pull-to-Refresh Icon**: Created custom SVG refresh icon matching app's primary blue theme colors (#0e639c)\n- **Enhanced Mobile Pull-to-Refresh**: Added haptic feedback, elastic animations, better touch handling, and improved mobile responsiveness\n- **App Tour Theme Integration**: Styled intro.js tour elements to match StatWise's blue theme with glassmorphism effects and consistent typography\n- **AI Chat Feature**: Added floating chat button in bottom right corner with animated SVG icon featuring typing indicators and sparkle effects\n- **Interactive AI Modal**: Implemented chat interface with app-themed styling, allowing users to ask about sports predictions and app features\n- All new features use the app's signature blue gradient (#0e639c to #4caf50) and maintain visual consistency across the platform\n\n### September 7, 2025 - Supabase Integration for Enhanced Data Management\n- **Supabase Database Integration**: Added Supabase as a secondary database alongside Firebase for enhanced subscription and payment tracking\n- **Hybrid Architecture**: Configured the app to use Firebase for authentication and general app data, while Supabase handles subscription analytics and payment logging\n- **Payment Data Syncing**: Modified Flutterwave payment flow to automatically sync all transaction data to Supabase for better analytics and reporting\n- **User Profile Synchronization**: Added automatic user profile syncing between Firebase and Supabase on authentication\n- **Database Schema**: Created comprehensive Supabase database schema with tables for user profiles, subscription events, and payment transactions\n- **Non-blocking Integration**: All Supabase operations are designed to be non-blocking, ensuring the main app functionality continues to work even if Supabase is unavailable\n- **Enhanced Analytics**: Supabase integration provides better subscription analytics, payment tracking, and user behavior insights\n- The integration maintains backward compatibility with existing Firebase functionality while adding powerful new data management capabilities\n\n### September 7, 2025 - Critical Payment and Subscription System Fixes\n- **Supabase Storage Integration**: Migrated profile picture storage from Firebase Storage to Supabase Storage with automatic fallback to Firebase for reliability\n- **Enhanced Referral System**: Completely migrated referral system from Firebase to Supabase with new dedicated tables for referrals, referral codes, and reward tracking\n- **Cross-Platform Sync**: Implemented automatic data synchronization between Firebase and Supabase for referral codes and user relationships\n- **Improved Database Schema**: Extended Supabase schema with referral_codes and referrals tables, including proper indexing for optimal performance\n- **Hybrid Storage Approach**: Profile picture uploads now use Supabase Storage as primary with Firebase Storage as fallback, ensuring 100% reliability\n- **Smart Referral Management**: Referral page now intelligently fetches data from Supabase first, falling back to Firebase if needed, maintaining seamless user experience\n- **Enhanced Referral Analytics**: New Supabase-based referral system provides better tracking of referral statistics, reward distribution, and user engagement metrics\n- **Backward Compatibility**: All existing Firebase referral data continues to work while new referrals are created in Supabase, ensuring no data loss during migration","size_bytes":11440},"ui.js":{"content":"// ui.js\n\n/**\n * Creates an interactive, floating circle background.\n * If no container is provided, creates the background elements dynamically.\n * @param {HTMLElement} container Optional container element, or creates one if null\n * @returns {Function} A cleanup function to stop the animation and remove listeners.\n */\nfunction initInteractiveBackground(container = null) {\n    console.log('üåÄ Initializing interactive background...');\n    \n    // Create background container and circles if not provided\n    let createdElements = false;\n    let backgroundContainer = container;\n    \n    if (!backgroundContainer) {\n        console.log('Creating dynamic background elements...');\n        \n        // Create the animated background dynamically\n        backgroundContainer = document.createElement('div');\n        backgroundContainer.className = 'animated-background-interactive';\n        backgroundContainer.style.cssText = `\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            z-index: -1;\n            pointer-events: none;\n            overflow: hidden;\n        `;\n        \n        // Create circles container\n        const circlesList = document.createElement('ul');\n        circlesList.className = 'circles';\n        circlesList.style.cssText = `\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            list-style: none;\n            margin: 0;\n            padding: 0;\n        `;\n        \n        // Create floating circles\n        const circleCount = 20;\n        const colors = ['#0e639c', '#4caf50', '#ff9800', '#e91e63', '#9c27b0', '#2196f3', '#ffc107'];\n        \n        console.log(`Creating ${circleCount} animated circles...`);\n        \n        for (let i = 0; i < circleCount; i++) {\n            const li = document.createElement('li');\n            const startSize = Math.random() * 20 + 10; // Start small: 10-30px\n            const endSize = Math.random() * 80 + 40; // End large: 40-120px\n            const color = colors[Math.floor(Math.random() * colors.length)];\n            const opacity = Math.random() * 0.4 + 0.2; // 0.2-0.6 opacity for variety\n            const animationDuration = Math.random() * 15 + 10; // 10-25s slower for smoother effect\n            const animationDelay = Math.random() * 8; // 0-8s delay for staggered effect\n            \n            li.style.cssText = `\n                position: absolute;\n                width: ${startSize}px;\n                height: ${startSize}px;\n                background: ${color};\n                border-radius: 50%;\n                opacity: 0;\n                left: ${Math.random() * 100}%;\n                bottom: -50px;\n                pointer-events: none;\n                animation: floatUpGrowing ${animationDuration}s infinite linear ${animationDelay}s;\n                z-index: -1;\n                --start-size: ${startSize}px;\n                --end-size: ${endSize}px;\n            `;\n            \n            circlesList.appendChild(li);\n        }\n        \n        // Add CSS animation for floating circles\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes floatUpGrowing {\n                0% {\n                    transform: translateY(0px) scale(1);\n                    opacity: 0;\n                    width: var(--start-size);\n                    height: var(--start-size);\n                }\n                5% {\n                    opacity: 0.6;\n                }\n                50% {\n                    width: calc((var(--start-size) + var(--end-size)) / 2);\n                    height: calc((var(--start-size) + var(--end-size)) / 2);\n                    opacity: 0.8;\n                }\n                95% {\n                    opacity: 0.4;\n                    width: var(--end-size);\n                    height: var(--end-size);\n                }\n                100% {\n                    transform: translateY(-120vh) scale(1.2);\n                    opacity: 0;\n                    width: var(--end-size);\n                    height: var(--end-size);\n                }\n            }\n            \n            .animated-background-interactive {\n                overflow: hidden !important;\n                position: fixed !important;\n                z-index: -10 !important;\n            }\n            \n            .circles {\n                position: absolute !important;\n                width: 100% !important;\n                height: 100% !important;\n            }\n            \n            .circles li {\n                will-change: transform, opacity;\n                position: absolute !important;\n            }\n        `;\n        document.head.appendChild(style);\n        \n        backgroundContainer.appendChild(circlesList);\n        document.body.insertBefore(backgroundContainer, document.body.firstChild);\n        createdElements = true;\n        \n        console.log('‚úÖ Background elements created and added to DOM');\n    }\n\n    const circlesList = backgroundContainer.querySelector('.circles') || backgroundContainer.querySelector('ul');\n    if (!circlesList) return () => {};\n\n    let animationFrameId;\n    const circleElements = Array.from(circlesList.querySelectorAll('li'));\n    \n    const cursor = { x: 9999, y: 9999 };\n    const interactionRadius = 150;\n\n    const mouseMoveHandler = e => { cursor.x = e.clientX; cursor.y = e.clientY; };\n    const touchMoveHandler = e => {\n        if (e.touches.length > 0) { cursor.x = e.touches[0].clientX; cursor.y = e.touches[0].clientY; }\n    };\n    const mouseOutHandler = () => { cursor.x = 9999; cursor.y = 9999; };\n\n    document.addEventListener('mousemove', mouseMoveHandler);\n    document.addEventListener('touchstart', touchMoveHandler, { passive: true });\n    document.addEventListener('touchmove', touchMoveHandler, { passive: true });\n    document.addEventListener('mouseout', mouseOutHandler);\n    document.addEventListener('touchend', mouseOutHandler);\n\n    const circleObjects = circleElements.map(el => {\n        const size = parseFloat(getComputedStyle(el).width) || 40;\n        return {\n            el: el,\n            x: Math.random() * window.innerWidth,\n            y: window.innerHeight + size + Math.random() * 200,\n            radius: size / 2,\n            vy: Math.random() * 1 + 0.5, // Upward speed\n            vx: (Math.random() - 0.5) * 0.5, // Sideways drift\n            pushX: 0, pushY: 0,\n            friction: 0.95 // for smooth return\n        };\n    });\n\n    circleElements.forEach(el => {\n        el.style.position = 'absolute';\n        el.style.left = '0'; \n        el.style.top = '0';\n        el.style.borderRadius = '50%';\n    });\n\n    function animate() {\n        circleObjects.forEach(p => {\n            const dx = p.x - cursor.x;\n            const dy = p.y - cursor.y;\n            const dist = Math.sqrt(dx * dx + dy * dy);\n\n            if (dist < interactionRadius) {\n                const angle = Math.atan2(dy, dx);\n                const force = (interactionRadius - dist) / interactionRadius;\n                p.pushX += Math.cos(angle) * force * 0.6;\n                p.pushY += Math.sin(angle) * force * 0.6;\n            }\n\n            p.pushX *= p.friction; \n            p.pushY *= p.friction;\n            p.x += p.vx + p.pushX; \n            p.y -= p.vy;\n\n            if (p.y < -p.radius * 2) {\n                p.x = Math.random() * window.innerWidth;\n                p.y = window.innerHeight + p.radius * 2;\n            }\n            p.el.style.transform = `translate(${p.x - p.radius}px, ${p.y - p.radius}px)`;\n        });\n        animationFrameId = requestAnimationFrame(animate);\n    }\n    animate();\n\n    return () => {\n        if (animationFrameId) cancelAnimationFrame(animationFrameId);\n        document.removeEventListener('mousemove', mouseMoveHandler);\n        document.removeEventListener('touchstart', touchMoveHandler);\n        document.removeEventListener('touchmove', touchMoveHandler);\n        document.removeEventListener('mouseout', mouseOutHandler);\n        document.removeEventListener('touchend', mouseOutHandler);\n        \n        // Clean up created elements\n        if (createdElements && backgroundContainer) {\n            backgroundContainer.remove();\n        }\n    };\n}\n\n/**\n * Initializes the theme system\n */\nfunction initializeTheme() {\n    console.log('üé® Initializing theme system...');\n    \n    // Check for saved theme preference or default to 'light'\n    const savedTheme = localStorage.getItem('statwise-theme') || 'light';\n    console.log('Current saved theme:', savedTheme);\n    \n    applyTheme(savedTheme);\n    \n    // Listen for theme changes\n    window.addEventListener('themechange', (e) => {\n        applyTheme(e.detail.theme);\n    });\n    \n    console.log('‚úÖ Theme system initialized successfully');\n}\n\n/**\n * Applies the specified theme\n * @param {string} theme - 'light' or 'dark'\n */\nfunction applyTheme(theme) {\n    console.log(`üé® Applying theme: ${theme}`);\n    \n    const body = document.body;\n    const html = document.documentElement;\n    \n    // Remove existing theme classes\n    body.classList.remove('light-mode', 'dark-mode');\n    html.classList.remove('light-mode', 'dark-mode');\n    \n    // Apply new theme\n    if (theme === 'dark') {\n        body.classList.add('dark-mode');\n        html.classList.add('dark-mode');\n        console.log('‚úÖ Dark mode applied to body and html');\n    } else {\n        body.classList.add('light-mode');\n        html.classList.add('light-mode');\n        console.log('‚úÖ Light mode applied to body and html');\n    }\n    \n    // Save theme preference\n    localStorage.setItem('statwise-theme', theme);\n    \n    console.log(`‚úÖ Theme applied successfully: ${theme}`);\n}\n\n/**\n * Toggles between light and dark themes\n */\nfunction toggleTheme() {\n    const currentTheme = localStorage.getItem('statwise-theme') || 'light';\n    const newTheme = currentTheme === 'light' ? 'dark' : 'light';\n    \n    applyTheme(newTheme);\n    \n    // Dispatch theme change event\n    window.dispatchEvent(new CustomEvent('themechange', {\n        detail: { theme: newTheme }\n    }));\n    \n    return newTheme;\n}\n\nexport { initInteractiveBackground, initializeTheme, applyTheme, toggleTheme };","size_bytes":10279},"robot.md":{"content":"# StatWise AI Prediction System Architecture\n\n## Overview\n\nThis document outlines the architecture and implementation strategy for building the AI prediction system that powers StatWise's sports predictions. The system should integrate seamlessly with the existing Progressive Web App architecture while providing accurate, real-time football match predictions with confidence ratings.\n\n## Core Requirements\n\n### Integration with Existing App Structure\n- **Frontend Integration**: Predictions must display through the existing prediction card components in `Pages/home.html`\n- **Firebase Integration**: All prediction data should be stored in Firestore collections for real-time updates\n- **Subscription Tiers**: AI predictions must respect the existing tier system (Free, Premium, VIP, VVIP)\n- **Real-time Updates**: Push notifications via Firebase Cloud Messaging for new predictions\n\n### Data Sources and Collection\n\n#### Primary Data Requirements\n1. **Match Data**\n   - Team statistics (goals scored/conceded, possession, shots)\n   - Player performance metrics (injuries, form, transfers)\n   - Historical head-to-head records\n   - League standings and form tables\n\n2. **Real-time Data Feeds**\n   - Live match events and statistics\n   - Odds movements from multiple bookmakers\n   - Weather conditions for match venues\n   - Team news and lineups\n\n#### Recommended Data Providers\n- **Sports APIs**: SportRadar, The Sports DB, Football-Data.org\n- **Odds Data**: OddsAPI, Pinnacle API, Betfair Exchange\n- **News Sources**: ESPN API, BBC Sport feeds\n- **Weather Data**: OpenWeatherMap API for venue conditions\n\n### AI Model Architecture\n\n#### Machine Learning Pipeline\n1. **Data Preprocessing**\n   - Clean and normalize statistical data\n   - Feature engineering for team form, momentum, strength ratings\n   - Time-series analysis for performance trends\n   - Handling missing data and outliers\n\n2. **Model Types to Implement**\n   - **Ensemble Methods**: Random Forest + Gradient Boosting for match outcomes\n   - **Neural Networks**: LSTM for sequence analysis of team performance\n   - **Probabilistic Models**: Bayesian networks for uncertainty quantification\n   - **Market Analysis**: Odds-based models for value bet identification\n\n3. **Feature Engineering**\n   - Rolling averages for team statistics (5, 10, 15 game windows)\n   - Elo rating system for team strength\n   - Home advantage calculations\n   - Player absence impact scoring\n   - Motivational factors (league position, relegation battles)\n\n#### Prediction Types and Confidence Calculation\n```javascript\n// Expected prediction structure matching the app's format\nconst predictionStructure = {\n  matchId: \"unique_identifier\",\n  homeTeam: \"Arsenal\",\n  awayTeam: \"Chelsea\", \n  prediction: \"Arsenal Win\", // or \"Draw\", \"Away Win\", \"Over 2.5\", etc.\n  confidence: 80, // 0-100 percentage\n  odds: 1.85,\n  reasoning: \"Arsenal's strong home form and Chelsea's defensive issues\",\n  kickoffTime: \"2025-09-06T19:30:00Z\",\n  league: \"premier-league\",\n  tier: \"premium\" // Free users see basic predictions only\n}\n```\n\n### Backend Architecture\n\n#### Firebase Cloud Functions Structure\n```\nfunctions/\n‚îú‚îÄ‚îÄ predictions/\n‚îÇ   ‚îú‚îÄ‚îÄ generatePredictions.js    // Main prediction generation\n‚îÇ   ‚îú‚îÄ‚îÄ updateOdds.js            // Real-time odds monitoring\n‚îÇ   ‚îú‚îÄ‚îÄ dataCollection.js        // Fetch match and team data\n‚îÇ   ‚îî‚îÄ‚îÄ confidenceCalculator.js  // Confidence scoring algorithm\n‚îú‚îÄ‚îÄ notifications/\n‚îÇ   ‚îú‚îÄ‚îÄ pushNotifications.js     // Send prediction alerts\n‚îÇ   ‚îî‚îÄ‚îÄ emailDigests.js          // Weekly prediction summaries\n‚îî‚îÄ‚îÄ utils/\n    ‚îú‚îÄ‚îÄ dataValidation.js        // Input data validation\n    ‚îú‚îÄ‚îÄ tierManager.js           // Subscription tier logic\n    ‚îî‚îÄ‚îÄ rateLimiting.js          // API call management\n```\n\n#### Firestore Database Schema\n```\ncollections/\n‚îú‚îÄ‚îÄ predictions/\n‚îÇ   ‚îî‚îÄ‚îÄ {predictionId}\n‚îÇ       ‚îú‚îÄ‚îÄ matchData: object\n‚îÇ       ‚îú‚îÄ‚îÄ aiPrediction: object\n‚îÇ       ‚îú‚îÄ‚îÄ confidence: number\n‚îÇ       ‚îú‚îÄ‚îÄ timestamp: timestamp\n‚îÇ       ‚îî‚îÄ‚îÄ tier: string\n‚îú‚îÄ‚îÄ matches/\n‚îÇ   ‚îî‚îÄ‚îÄ {matchId}\n‚îÇ       ‚îú‚îÄ‚îÄ teams: object\n‚îÇ       ‚îú‚îÄ‚îÄ statistics: object\n‚îÇ       ‚îú‚îÄ‚îÄ odds: object\n‚îÇ       ‚îî‚îÄ‚îÄ status: string\n‚îú‚îÄ‚îÄ teamStats/\n‚îÇ   ‚îî‚îÄ‚îÄ {teamId}\n‚îÇ       ‚îú‚îÄ‚îÄ currentForm: object\n‚îÇ       ‚îú‚îÄ‚îÄ seasonStats: object\n‚îÇ       ‚îî‚îÄ‚îÄ playerData: array\n‚îî‚îÄ‚îÄ predictionAccuracy/\n    ‚îî‚îÄ‚îÄ {date}\n        ‚îú‚îÄ‚îÄ correctPredictions: number\n        ‚îú‚îÄ‚îÄ totalPredictions: number\n        ‚îî‚îÄ‚îÄ confidenceAccuracy: object\n```\n\n### Implementation Phases\n\n#### Phase 1: Data Foundation (Week 1-2)\n- Set up data collection pipelines for match data\n- Implement basic statistical models\n- Create Firestore schemas for storing predictions\n- Build simple prediction cards matching the existing UI\n\n#### Phase 2: AI Model Development (Week 3-4)\n- Develop and train machine learning models\n- Implement confidence calculation algorithms\n- Create prediction generation Cloud Functions\n- Add tier-based access control\n\n#### Phase 3: Real-time Integration (Week 5-6)\n- Connect predictions to the existing homepage display\n- Implement push notifications for new predictions\n- Add real-time odds monitoring and updates\n- Create prediction accuracy tracking\n\n#### Phase 4: Enhancement & Optimization (Week 7-8)\n- Improve model accuracy based on performance data\n- Add advanced prediction types (correct score, goal scorers)\n- Implement betting value calculations\n- Add prediction explanation and reasoning\n\n### Integration with Existing App Features\n\n#### Homepage Display Integration\n```javascript\n// Predictions should populate the existing card structure\nfunction displayAIPredictions(predictions) {\n    const container = document.querySelector('.predictions-container');\n    predictions.forEach(prediction => {\n        const card = createPredictionCard(prediction);\n        container.appendChild(card);\n    });\n}\n\n// Existing card structure from Pages/home.html should be maintained\nfunction createPredictionCard(prediction) {\n    return `\n        <div class=\"prediction-card ${getConfidenceClass(prediction.confidence)}\">\n            <h2 class=\"match-title\">${prediction.homeTeam} vs ${prediction.awayTeam}</h2>\n            <p class=\"prediction-detail\">Prediction: \n                <span class=\"ai-pick\">${prediction.prediction}</span>\n            </p>\n            <p class=\"odds\">Odds: ${prediction.odds}</p>\n            <p class=\"match-time\">Kickoff: ${formatTime(prediction.kickoffTime)}</p>\n            <div class=\"confidence\">\n                <span>Confidence: ${prediction.confidence}%</span>\n                <div class=\"confidence-bar\">\n                    <div class=\"confidence-fill\" style=\"width: ${prediction.confidence}%;\"></div>\n                </div>\n            </div>\n        </div>\n    `;\n}\n```\n\n#### Search and Filtering Integration\n- AI predictions must work with the existing search functionality\n- League tabs should filter AI predictions by competition\n- Commands like `/c75` should filter by confidence level\n- Predictions should be searchable by team names and match details\n\n#### Subscription Tier Integration\n```javascript\n// Tier-based prediction access\nconst tierLimits = {\n    free: {\n        predictionsPerDay: 3,\n        confidenceThreshold: 60,\n        leagues: ['premier-league', 'la-liga', 'bundesliga']\n    },\n    premium: {\n        predictionsPerDay: 10,\n        confidenceThreshold: 50,\n        leagues: 'all'\n    },\n    vip: {\n        predictionsPerDay: 25,\n        confidenceThreshold: 40,\n        leagues: 'all',\n        features: ['live_updates', 'value_bets']\n    },\n    vvip: {\n        predictionsPerDay: 'unlimited',\n        confidenceThreshold: 30,\n        leagues: 'all',\n        features: ['live_updates', 'value_bets', 'custom_models']\n    }\n};\n```\n\n### Performance and Scalability\n\n#### Caching Strategy\n- Cache predictions for 30 minutes to reduce API calls\n- Use Firebase Hosting for static prediction data\n- Implement CDN for frequently accessed match statistics\n\n#### Rate Limiting and Costs\n- Limit external API calls to stay within budget constraints\n- Batch process predictions during off-peak hours\n- Use free-tier friendly Firebase features where possible\n\n#### Monitoring and Analytics\n- Track prediction accuracy by confidence level\n- Monitor user engagement with different prediction types\n- Analyze which leagues generate the most interest\n\n### Security and Compliance\n\n#### Data Protection\n- Encrypt sensitive prediction algorithms\n- Implement secure API key management\n- Add prediction tampering detection\n\n#### Compliance Considerations\n- Responsible gambling warnings for high-risk predictions\n- Age verification for prediction access\n- Clear disclaimers about prediction accuracy\n\n## Getting Started\n\n### Prerequisites\n- Firebase project with Cloud Functions enabled\n- External sports data API credentials\n- Machine learning environment setup (Python/TensorFlow or Node.js/ML libraries)\n- Historical sports data for model training\n\n### Initial Setup Steps\n1. Clone the existing StatWise repository\n2. Set up Firebase Cloud Functions in the `functions/` directory\n3. Configure external API credentials in Firebase environment\n4. Import historical match data for model training\n5. Deploy basic prediction generation functions\n6. Test integration with existing UI components\n\n### Development Workflow\n1. Develop models locally with historical data\n2. Test predictions against known outcomes\n3. Deploy to Firebase Cloud Functions\n4. Integrate with existing app UI\n5. Monitor accuracy and user engagement\n6. Iterate and improve based on performance\n\n## Notes for Implementation\n\n- **Maintain UI Consistency**: All predictions must use the existing card design and styling\n- **Progressive Enhancement**: Start with simple models and gradually add complexity\n- **User Experience**: Ensure predictions load quickly and update smoothly\n- **Cost Management**: Monitor Firebase usage and external API costs closely\n- **Testing Strategy**: Implement comprehensive testing for prediction accuracy and app integration\n\nThis architecture ensures the AI prediction system integrates seamlessly with StatWise's existing structure while providing scalable, accurate predictions that enhance the user experience across all subscription tiers.","size_bytes":10413},"activity-manager.js":{"content":"// Activity Manager - Handles app focus detection and inactive state\nclass ActivityManager {\n    constructor() {\n        this.isActive = true;\n        this.inactiveContainer = null;\n        this.inactiveThreshold = 5000; // 5 seconds of inactivity before showing inactive page\n        this.timeoutId = null;\n        this.lastActivityTime = Date.now();\n        this.isEnabled = this.getToggleSetting();\n        \n        this.init();\n    }\n    \n    init() {\n        this.createInactiveContainer();\n        this.setupEventListeners();\n        this.startActivityMonitoring();\n        \n        // Make this available globally for the inactive page\n        window.activityManager = this;\n        \n        console.log('üéØ Activity Manager initialized successfully');\n    }\n    \n    createInactiveContainer() {\n        // Create the inactive container and inject the inactive page content\n        this.inactiveContainer = document.createElement('div');\n        this.inactiveContainer.id = 'activity-inactive-overlay';\n        this.inactiveContainer.style.display = 'none';\n        \n        // Load inactive page content\n        fetch('./Pages/inactive.html')\n            .then(response => response.text())\n            .then(html => {\n                this.inactiveContainer.innerHTML = html;\n                document.body.appendChild(this.inactiveContainer);\n            })\n            .catch(error => {\n                console.error('Failed to load inactive page:', error);\n                // Fallback content\n                this.inactiveContainer.innerHTML = `\n                    <div class=\"inactive-container show\">\n                        <div class=\"inactive-content\">\n                            <div class=\"pulse-animation\">\n                                <div class=\"logo-icon\">‚≠ê</div>\n                            </div>\n                            <h1 class=\"inactive-title\">StatWise is waiting...</h1>\n                            <p class=\"inactive-message\">Click to return to your predictions</p>\n                            <button class=\"return-btn\" onclick=\"window.activityManager.returnToApp()\">\n                                Return to StatWise\n                            </button>\n                        </div>\n                    </div>\n                `;\n                document.body.appendChild(this.inactiveContainer);\n            });\n    }\n    \n    setupEventListeners() {\n        // Page Visibility API - detects tab switching\n        document.addEventListener('visibilitychange', () => {\n            if (document.hidden) {\n                this.scheduleInactive();\n            } else {\n                this.markActive();\n            }\n        });\n        \n        // Window focus/blur events\n        window.addEventListener('focus', () => {\n            this.markActive();\n        });\n        \n        window.addEventListener('blur', () => {\n            this.scheduleInactive();\n        });\n        \n        // Mouse and keyboard activity\n        ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {\n            document.addEventListener(event, () => {\n                this.markActive();\n            }, { passive: true });\n        });\n        \n        // Mobile-specific events\n        document.addEventListener('touchend', () => {\n            this.markActive();\n        }, { passive: true });\n    }\n    \n    startActivityMonitoring() {\n        // Monitor for extended periods of inactivity\n        setInterval(() => {\n            const timeSinceActivity = Date.now() - this.lastActivityTime;\n            \n            // If inactive for more than 30 seconds and not already showing inactive page\n            if (timeSinceActivity > 30000 && this.isActive && !document.hidden) {\n                this.scheduleInactive();\n            }\n        }, 5000); // Check every 5 seconds\n    }\n    \n    scheduleInactive() {\n        if (!this.isActive || !this.isEnabled) return;\n        \n        // Clear any existing timeout\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n        \n        // Schedule inactive state after threshold\n        this.timeoutId = setTimeout(() => {\n            this.showInactivePage();\n        }, this.inactiveThreshold);\n    }\n    \n    markActive() {\n        this.lastActivityTime = Date.now();\n        \n        // Clear inactive timeout\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n        \n        // If we were inactive, show welcome back and return to app\n        if (!this.isActive) {\n            this.showWelcomeBack();\n            setTimeout(() => {\n                this.hideInactivePage();\n            }, 1500); // Show welcome back for 1.5 seconds\n        }\n        \n        this.isActive = true;\n    }\n    \n    showInactivePage() {\n        if (!this.isActive || !this.isEnabled) return;\n        \n        // Hide any visible loader first to prevent conflicts\n        const loader = document.querySelector('.loader');\n        if (loader && loader.style.display !== 'none') {\n            loader.style.display = 'none';\n        }\n        \n        this.isActive = false;\n        \n        if (this.inactiveContainer) {\n            this.inactiveContainer.style.display = 'block';\n            \n            // Add show class for animation\n            setTimeout(() => {\n                const container = this.inactiveContainer.querySelector('.inactive-container');\n                if (container) {\n                    container.classList.add('show');\n                }\n            }, 10);\n            \n            console.log('üì± Inactive page displayed');\n            \n            // Start the away timer\n            const inactivePageScript = this.inactiveContainer.querySelector('script');\n            if (inactivePageScript) {\n                try {\n                    eval(inactivePageScript.textContent);\n                } catch (error) {\n                    console.error('Error executing inactive page script:', error);\n                }\n            }\n        }\n    }\n    \n    hideInactivePage() {\n        if (this.inactiveContainer) {\n            const container = this.inactiveContainer.querySelector('.inactive-container');\n            if (container) {\n                container.classList.remove('show');\n            }\n            \n            // Hide after animation completes\n            setTimeout(() => {\n                this.inactiveContainer.style.display = 'none';\n            }, 300);\n            \n            console.log('üì± Returned to active app');\n        }\n        \n        this.isActive = true;\n    }\n    \n    showWelcomeBack() {\n        if (this.inactiveContainer) {\n            const welcomeMessage = this.inactiveContainer.querySelector('.welcome-back-message');\n            const regularContent = this.inactiveContainer.querySelector('.inactive-message');\n            const stats = this.inactiveContainer.querySelector('.inactive-stats');\n            \n            if (welcomeMessage && regularContent && stats) {\n                // Hide regular content\n                regularContent.style.display = 'none';\n                stats.style.display = 'none';\n                \n                // Show welcome back message\n                welcomeMessage.style.display = 'block';\n            }\n        }\n    }\n    \n    returnToApp() {\n        this.markActive();\n        this.hideInactivePage();\n    }\n    \n    // Force show inactive page (for testing)\n    forceInactive() {\n        this.showInactivePage();\n    }\n    \n    // Get current activity status\n    getActivityStatus() {\n        return {\n            isActive: this.isActive,\n            lastActivity: this.lastActivityTime,\n            timeSinceActivity: Date.now() - this.lastActivityTime,\n            isEnabled: this.isEnabled\n        };\n    }\n    \n    // Toggle setting management\n    getToggleSetting() {\n        const setting = localStorage.getItem('inactivePageEnabled');\n        return setting === null ? true : setting === 'true'; // Default to enabled\n    }\n    \n    setToggleSetting(enabled) {\n        this.isEnabled = enabled;\n        localStorage.setItem('inactivePageEnabled', enabled.toString());\n        \n        // If disabled while inactive, hide the page\n        if (!enabled && !this.isActive) {\n            this.hideInactivePage();\n        }\n        \n        console.log(`üéØ Inactive page feature ${enabled ? 'enabled' : 'disabled'}`);\n    }\n    \n    // Public method to enable/disable the feature\n    enableInactivePage(enabled) {\n        this.setToggleSetting(enabled);\n    }\n}\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', () => {\n        new ActivityManager();\n    });\n} else {\n    new ActivityManager();\n}\n\nexport { ActivityManager };","size_bytes":8815},"consent-styles.css":{"content":"/* StatWise Consent Management Platform Styles */\n\n/* Consent Banner */\n.consent-banner {\n    display: none;\n    position: fixed;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    z-index: 10000;\n    padding: 20px;\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);\n    backdrop-filter: blur(10px);\n    border-top: 1px solid rgba(255, 255, 255, 0.1);\n    animation: slideUp 0.5s ease-out;\n}\n\n@keyframes slideUp {\n    from {\n        transform: translateY(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n.consent-content {\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n.consent-header h3 {\n    margin: 0 0 15px 0;\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: #ffffff;\n}\n\n.consent-text {\n    margin-bottom: 20px;\n    line-height: 1.6;\n}\n\n.consent-text p {\n    margin: 0 0 10px 0;\n    color: #f0f0f0;\n}\n\n.consent-buttons {\n    display: flex;\n    gap: 15px;\n    flex-wrap: wrap;\n    margin-bottom: 15px;\n}\n\n.consent-btn {\n    padding: 12px 24px;\n    border: none;\n    border-radius: 8px;\n    font-weight: 600;\n    font-size: 0.95rem;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n}\n\n.consent-btn-primary {\n    background: #00d4aa;\n    color: white;\n}\n\n.consent-btn-primary:hover {\n    background: #00b894;\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(0, 212, 170, 0.4);\n}\n\n.consent-btn-secondary {\n    background: rgba(255, 255, 255, 0.1);\n    color: white;\n    border: 1px solid rgba(255, 255, 255, 0.3);\n}\n\n.consent-btn-secondary:hover {\n    background: rgba(255, 255, 255, 0.2);\n    transform: translateY(-2px);\n}\n\n.consent-btn-reject {\n    background: #ff6b6b;\n    color: white;\n}\n\n.consent-btn-reject:hover {\n    background: #ff5252;\n    transform: translateY(-2px);\n    box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);\n}\n\n.consent-links {\n    text-align: center;\n    margin-top: 15px;\n}\n\n.consent-links a {\n    color: #ffffff;\n    text-decoration: none;\n    font-size: 0.9rem;\n    opacity: 0.9;\n    transition: opacity 0.3s ease;\n}\n\n.consent-links a:hover {\n    opacity: 1;\n    text-decoration: underline;\n}\n\n/* Consent Modal */\n.consent-modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.75);\n    z-index: 10001;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 20px;\n    backdrop-filter: blur(5px);\n    animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n.consent-modal-content {\n    background: white;\n    border-radius: 16px;\n    max-width: 600px;\n    width: 100%;\n    max-height: 90vh;\n    overflow-y: auto;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n    animation: slideIn 0.3s ease;\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateY(30px);\n        opacity: 0;\n    }\n    to {\n        transform: translateY(0);\n        opacity: 1;\n    }\n}\n\n.consent-modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 25px 30px 20px;\n    border-bottom: 1px solid #eee;\n}\n\n.consent-modal-header h3 {\n    margin: 0;\n    color: #333;\n    font-size: 1.5rem;\n    font-weight: 600;\n}\n\n.consent-close {\n    background: none;\n    border: none;\n    font-size: 28px;\n    cursor: pointer;\n    color: #999;\n    padding: 0;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 50%;\n    transition: all 0.3s ease;\n}\n\n.consent-close:hover {\n    background: #f5f5f5;\n    color: #666;\n}\n\n.consent-categories {\n    padding: 20px 30px;\n}\n\n.consent-category {\n    margin-bottom: 25px;\n    padding: 20px;\n    border: 1px solid #eee;\n    border-radius: 12px;\n    background: #fafafa;\n    transition: all 0.3s ease;\n}\n\n.consent-category:hover {\n    border-color: #ddd;\n    background: #f5f5f5;\n}\n\n.category-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 10px;\n}\n\n.category-header h4 {\n    margin: 0;\n    color: #333;\n    font-size: 1.1rem;\n    font-weight: 600;\n}\n\n.category-status.always-on {\n    background: #00d4aa;\n    color: white;\n    padding: 4px 12px;\n    border-radius: 20px;\n    font-size: 0.8rem;\n    font-weight: 600;\n}\n\n.consent-category p {\n    margin: 0;\n    color: #666;\n    line-height: 1.5;\n    font-size: 0.95rem;\n}\n\n/* Toggle Switch */\n.toggle-switch {\n    position: relative;\n    display: inline-block;\n    width: 60px;\n    height: 30px;\n}\n\n.toggle-switch input {\n    opacity: 0;\n    width: 0;\n    height: 0;\n}\n\n.slider {\n    position: absolute;\n    cursor: pointer;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: #ccc;\n    transition: .4s;\n    border-radius: 30px;\n}\n\n.slider:before {\n    position: absolute;\n    content: \"\";\n    height: 22px;\n    width: 22px;\n    left: 4px;\n    bottom: 4px;\n    background-color: white;\n    transition: .4s;\n    border-radius: 50%;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n}\n\ninput:checked + .slider {\n    background-color: #00d4aa;\n}\n\ninput:checked + .slider:before {\n    transform: translateX(30px);\n}\n\n.consent-modal-buttons {\n    padding: 20px 30px 30px;\n    display: flex;\n    gap: 15px;\n    justify-content: flex-end;\n    border-top: 1px solid #eee;\n}\n\n/* Mobile Responsive */\n@media (max-width: 768px) {\n    .consent-banner {\n        padding: 15px;\n    }\n    \n    .consent-buttons {\n        flex-direction: column;\n    }\n    \n    .consent-btn {\n        width: 100%;\n        justify-content: center;\n    }\n    \n    .consent-modal {\n        padding: 10px;\n    }\n    \n    .consent-modal-content {\n        margin: 0;\n        border-radius: 12px;\n    }\n    \n    .consent-modal-header,\n    .consent-categories,\n    .consent-modal-buttons {\n        padding-left: 20px;\n        padding-right: 20px;\n    }\n    \n    .consent-modal-buttons {\n        flex-direction: column;\n    }\n    \n    .category-header {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 10px;\n    }\n}\n\n@media (max-width: 480px) {\n    .consent-header h3 {\n        font-size: 1.2rem;\n    }\n    \n    .consent-text {\n        font-size: 0.9rem;\n    }\n    \n    .consent-btn {\n        font-size: 0.9rem;\n        padding: 10px 20px;\n    }\n}\n\n/* Dark Mode Support */\n@media (prefers-color-scheme: dark) {\n    .consent-modal-content {\n        background: #2a2a2a;\n        color: #ffffff;\n    }\n    \n    .consent-modal-header {\n        border-bottom-color: #444;\n    }\n    \n    .consent-modal-header h3 {\n        color: #ffffff;\n    }\n    \n    .consent-category {\n        background: #333;\n        border-color: #444;\n        color: #ffffff;\n    }\n    \n    .consent-category:hover {\n        background: #3a3a3a;\n        border-color: #555;\n    }\n    \n    .category-header h4 {\n        color: #ffffff;\n    }\n    \n    .consent-category p {\n        color: #ccc;\n    }\n    \n    .consent-modal-buttons {\n        border-top-color: #444;\n    }\n    \n    .consent-close:hover {\n        background: #3a3a3a;\n        color: #ccc;\n    }\n}\n\n/* High contrast mode */\n@media (prefers-contrast: high) {\n    .consent-banner {\n        background: #000000;\n        border-top: 3px solid #ffffff;\n    }\n    \n    .consent-btn-primary {\n        background: #0066cc;\n    }\n    \n    .consent-btn-secondary {\n        background: #ffffff;\n        color: #000000;\n        border: 2px solid #000000;\n    }\n}\n\n/* Reduced motion support */\n@media (prefers-reduced-motion: reduce) {\n    .consent-banner,\n    .consent-modal,\n    .consent-modal-content,\n    .consent-btn,\n    .slider {\n        animation: none;\n        transition: none;\n    }\n}","size_bytes":7746},"google-cmp.js":{"content":"/**\n * StatWise Google Certified CMP Integration\n * Uses Google's Funding Choices (officially certified CMP)\n * Compliant with IAB TCF v2.2 and Google requirements\n */\n\nclass GoogleCertifiedCMP {\n    constructor() {\n        this.consentKey = 'statwise_consent_v2';\n        this.cmpLoaded = false;\n        this.tcfApiAvailable = false;\n        this.init();\n    }\n\n    init() {\n        // Initialize Google Consent Mode v2 with region-specific defaults\n        this.initializeConsentMode();\n        \n        // Load Google's certified CMP (Funding Choices)\n        this.loadGoogleCMP();\n        \n        // Setup IAB TCF API integration\n        this.setupTCFIntegration();\n    }\n\n    initializeConsentMode() {\n        // Ensure gtag is available\n        if (typeof gtag === 'undefined') {\n            window.dataLayer = window.dataLayer || [];\n            function gtag(){dataLayer.push(arguments);}\n            window.gtag = gtag;\n            gtag('js', new Date());\n        }\n\n        // Set region-specific default consent states\n        // EEA, UK, and Switzerland require consent banners\n        gtag('consent', 'default', {\n            'ad_storage': 'denied',\n            'ad_user_data': 'denied',\n            'ad_personalization': 'denied',\n            'analytics_storage': 'denied',\n            'functionality_storage': 'denied',\n            'personalization_storage': 'denied',\n            'security_storage': 'granted',\n            'wait_for_update': 2000,\n            'region': ['AT', 'BE', 'BG', 'HR', 'CY', 'CZ', 'DK', 'EE', 'FI', 'FR', 'DE', 'GR', 'HU', 'IE', 'IT', 'LV', 'LT', 'LU', 'MT', 'NL', 'PL', 'PT', 'RO', 'SK', 'SI', 'ES', 'SE', 'GB', 'CH']\n        });\n\n        // For other regions, grant consent by default\n        gtag('consent', 'default', {\n            'ad_storage': 'granted',\n            'ad_user_data': 'granted',\n            'ad_personalization': 'granted',\n            'analytics_storage': 'granted',\n            'functionality_storage': 'granted',\n            'personalization_storage': 'granted',\n            'security_storage': 'granted',\n            'region': ['US', 'CA', 'AU', 'JP', 'KR', 'IN', 'BR', 'MX', 'ZA', 'EG', 'NG', 'KE', 'MA', 'TN', 'GH', 'SN', 'CI', 'UG', 'TZ', 'ZW', 'ZM', 'MW', 'RW', 'BW', 'NA', 'SZ', 'LS', 'MG', 'MU', 'SC']\n        });\n\n        console.log('StatWise Google Consent Mode v2 initialized with regional defaults');\n    }\n\n    loadGoogleCMP() {\n        // Load Google's Funding Choices (officially certified CMP)\n        window.googletag = window.googletag || {cmd: []};\n        \n        // Configure Funding Choices for your AdSense publisher ID\n        const script = document.createElement('script');\n        script.async = true;\n        script.src = 'https://fundingchoicesmessages.google.com/i/pub-9868946535437166?ers=1';\n        script.onload = () => {\n            console.log('‚úÖ Google Funding Choices CMP loaded');\n            this.cmpLoaded = true;\n        };\n        script.onerror = () => {\n            console.warn('‚ö†Ô∏è Google CMP failed to load, falling back to manual consent');\n            this.initializeFallbackConsent();\n        };\n        \n        document.head.appendChild(script);\n\n        // Configure CMP behavior\n        window.googletag.cmd.push(() => {\n            window.googletag.pubads().enableAsyncRendering();\n            window.googletag.pubads().enableSingleRequest();\n            window.googletag.enableServices();\n        });\n    }\n\n    setupTCFIntegration() {\n        // Check if __tcfapi is available\n        const checkTCFAPI = () => {\n            if (typeof window.__tcfapi === 'function') {\n                this.tcfApiAvailable = true;\n                this.initializeTCFListeners();\n            } else {\n                // Wait for TCF API to be available\n                setTimeout(checkTCFAPI, 100);\n            }\n        };\n        \n        checkTCFAPI();\n    }\n\n    initializeTCFListeners() {\n        console.log('‚úÖ TCF API available, setting up consent listeners');\n        \n        // Listen for TCF consent changes\n        window.__tcfapi('addEventListener', 2, (tcData, success) => {\n            if (success && tcData) {\n                console.log('üç™ TCF consent event:', tcData.eventStatus);\n                this.handleTCFConsentUpdate(tcData);\n            }\n        });\n\n        // Get initial consent status\n        window.__tcfapi('getTCData', 2, (tcData, success) => {\n            if (success && tcData) {\n                this.handleTCFConsentUpdate(tcData);\n            }\n        });\n    }\n\n    handleTCFConsentUpdate(tcData) {\n        // Convert TCF data to our format\n        const consentData = this.convertTCFToConsent(tcData);\n        \n        console.log('üç™ Converting TCF consent:', consentData);\n        \n        // Update Google Consent Mode\n        gtag('consent', 'update', {\n            'ad_storage': consentData.ad_storage,\n            'ad_user_data': consentData.ad_user_data,\n            'ad_personalization': consentData.ad_personalization,\n            'analytics_storage': consentData.analytics_storage,\n            'functionality_storage': consentData.functionality_storage,\n            'personalization_storage': consentData.personalization_storage\n        });\n\n        // Store consent locally\n        this.storeConsent(consentData);\n        \n        // Trigger ad system update\n        this.triggerAdSystemUpdate(consentData);\n    }\n\n    convertTCFToConsent(tcData) {\n        // Check for Google vendor consent and purposes\n        const googleVendorConsent = tcData.vendor && tcData.vendor.consents && tcData.vendor.consents[755]; // Google vendor ID\n        const purpose1 = tcData.purpose && tcData.purpose.consents && tcData.purpose.consents[1]; // Store and/or access information\n        const purpose3 = tcData.purpose && tcData.purpose.consents && tcData.purpose.consents[3]; // Create personalized ads profile\n        const purpose4 = tcData.purpose && tcData.purpose.consents && tcData.purpose.consents[4]; // Select personalized ads\n        \n        return {\n            ad_storage: (purpose1 && googleVendorConsent) ? 'granted' : 'denied',\n            ad_user_data: (purpose1 && googleVendorConsent) ? 'granted' : 'denied',\n            ad_personalization: (purpose3 && purpose4 && googleVendorConsent) ? 'granted' : 'denied',\n            analytics_storage: (purpose1 && googleVendorConsent) ? 'granted' : 'denied',\n            functionality_storage: 'granted', // Always granted for basic functionality\n            personalization_storage: (purpose3 && googleVendorConsent) ? 'granted' : 'denied',\n            tcfStatus: tcData.eventStatus,\n            cmpStatus: tcData.cmpStatus\n        };\n    }\n\n    handleConsentUpdate(consentData) {\n        console.log('üç™ Google CMP consent updated:', consentData);\n        \n        // Update Google Consent Mode\n        gtag('consent', 'update', {\n            'ad_storage': consentData.ad_storage || 'denied',\n            'ad_user_data': consentData.ad_user_data || 'denied',\n            'ad_personalization': consentData.ad_personalization || 'denied',\n            'analytics_storage': consentData.analytics_storage || 'denied',\n            'functionality_storage': consentData.functionality_storage || 'granted',\n            'personalization_storage': consentData.personalization_storage || 'denied'\n        });\n\n        // Store consent locally\n        this.storeConsent(consentData);\n        \n        // Trigger ad system update\n        this.triggerAdSystemUpdate(consentData);\n    }\n\n    storeConsent(consent) {\n        const consentData = {\n            ...consent,\n            timestamp: Date.now(),\n            cmp: 'google-funding-choices'\n        };\n\n        try {\n            localStorage.setItem(this.consentKey, JSON.stringify(consentData));\n        } catch (e) {\n            console.warn('Could not store consent data:', e);\n        }\n    }\n\n    getStoredConsent() {\n        try {\n            const stored = localStorage.getItem(this.consentKey);\n            return stored ? JSON.parse(stored) : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    triggerAdSystemUpdate(consent) {\n        // Dispatch event for other systems (backward compatibility)\n        const event = new CustomEvent('consentUpdated', { \n            detail: consent \n        });\n        window.dispatchEvent(event);\n\n        // Direct integration with StatWise ad system\n        if (consent.ad_storage === 'granted' && window.initializeAdSystemForUser) {\n            console.log('üéØ Triggering ad system for consented user');\n            window.initializeAdSystemForUser();\n        } else {\n            console.log('üö´ Ad system not triggered - consent denied or function not available');\n        }\n        \n        console.log('üì° Consent update event dispatched:', consent);\n    }\n\n    checkAndApplyConsent() {\n        const storedConsent = this.getStoredConsent();\n        if (storedConsent) {\n            // Apply previously stored consent\n            this.handleConsentUpdate(storedConsent);\n        }\n    }\n\n    // Fallback consent for when Google CMP fails to load\n    initializeFallbackConsent() {\n        console.log('üìã Initializing privacy-compliant fallback consent system');\n        \n        // Simple regional-only banner (no IP geolocation)\n        this.showFallbackConsentBanner();\n    }\n\n    showFallbackConsentBanner() {\n        // Only show if no consent has been given yet\n        if (this.getStoredConsent()) return;\n\n        const banner = document.createElement('div');\n        banner.id = 'fallback-consent-banner';\n        banner.style.cssText = `\n            position: fixed;\n            bottom: 0;\n            left: 0;\n            right: 0;\n            background: #1a1a1a;\n            color: white;\n            padding: 20px;\n            text-align: center;\n            z-index: 10000;\n            box-shadow: 0 -2px 10px rgba(0,0,0,0.3);\n        `;\n        \n        banner.innerHTML = `\n            <div style=\"max-width: 1200px; margin: 0 auto;\">\n                <p style=\"margin: 0 0 15px 0;\"><strong>üç™ Privacy Notice:</strong> We use cookies and similar technologies to enhance your experience, analyze usage, and show relevant ads. Choose your preferences below.</p>\n                <button id=\"accept-fallback-consent\" style=\"background: #00d4aa; color: white; border: none; padding: 12px 24px; border-radius: 8px; margin: 0 10px; cursor: pointer; font-weight: 600;\">‚úì Accept All</button>\n                <button id=\"reject-fallback-consent\" style=\"background: #ff6b6b; color: white; border: none; padding: 12px 24px; border-radius: 8px; margin: 0 10px; cursor: pointer; font-weight: 600;\">‚úó Reject All</button>\n                <button id=\"essential-only-consent\" style=\"background: #666; color: white; border: none; padding: 12px 24px; border-radius: 8px; margin: 0 10px; cursor: pointer; font-weight: 600;\">Essential Only</button>\n            </div>\n        `;\n        \n        document.body.appendChild(banner);\n        \n        // Handle consent choices\n        banner.querySelector('#accept-fallback-consent').addEventListener('click', () => {\n            this.handleTCFConsentUpdate({\n                eventStatus: 'useractioncomplete',\n                purpose: { consents: { 1: true, 3: true, 4: true } },\n                vendor: { consents: { 755: true } } // Google vendor\n            });\n            banner.remove();\n        });\n        \n        banner.querySelector('#reject-fallback-consent').addEventListener('click', () => {\n            this.handleTCFConsentUpdate({\n                eventStatus: 'useractioncomplete',\n                purpose: { consents: { 1: false, 3: false, 4: false } },\n                vendor: { consents: { 755: false } }\n            });\n            banner.remove();\n        });\n        \n        banner.querySelector('#essential-only-consent').addEventListener('click', () => {\n            this.handleTCFConsentUpdate({\n                eventStatus: 'useractioncomplete',\n                purpose: { consents: { 1: false, 3: false, 4: false } },\n                vendor: { consents: { 755: false } }\n            });\n            banner.remove();\n        });\n    }\n\n    // Public methods for manual consent management\n    grantAllConsent() {\n        this.handleConsentUpdate({\n            ad_storage: 'granted',\n            ad_user_data: 'granted',\n            ad_personalization: 'granted',\n            analytics_storage: 'granted',\n            functionality_storage: 'granted',\n            personalization_storage: 'granted'\n        });\n    }\n\n    revokeAllConsent() {\n        this.handleConsentUpdate({\n            ad_storage: 'denied',\n            ad_user_data: 'denied',\n            ad_personalization: 'denied',\n            analytics_storage: 'denied',\n            functionality_storage: 'granted',\n            personalization_storage: 'denied'\n        });\n    }\n\n    resetConsent() {\n        localStorage.removeItem(this.consentKey);\n        location.reload();\n    }\n\n    getConsentStatus() {\n        return this.getStoredConsent();\n    }\n}\n\n// Initialize Google certified CMP when DOM is ready\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Make CMP globally available\n    window.googleCMP = new GoogleCertifiedCMP();\n    \n    // Backward compatibility with proper TCF integration\n    window.consentManager = {\n        getConsentStatus: () => {\n            const status = window.googleCMP?.getConsentStatus();\n            console.log('üìä Getting consent status:', status);\n            return status;\n        },\n        resetConsent: () => window.googleCMP?.resetConsent(),\n        grantAllConsent: () => window.googleCMP?.grantAllConsent(),\n        revokeAllConsent: () => window.googleCMP?.revokeAllConsent(),\n        // Additional methods for compatibility\n        setConsentChoices: () => console.log('üîß Consent choices - using Google CMP interface'),\n        showBanner: () => console.log('üè† Banner management handled by Google CMP')\n    };\n});\n\n// Global functions for testing\nwindow.grantAllConsent = () => window.googleCMP?.grantAllConsent();\nwindow.revokeAllConsent = () => window.googleCMP?.revokeAllConsent();\nwindow.resetConsent = () => window.googleCMP?.resetConsent();","size_bytes":14209}},"version":1}