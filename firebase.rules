rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the request is from the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // CREATE: Allow anyone to create a user document (signup), but only with their own UID.
      // The `isNewUser` flag must be true on creation.
      allow create: if isOwner(userId) && request.resource.data.isNewUser == true;

      // READ:
      // 1. Authenticated users can read their own document.
      // 2. Authenticated users can read the `username` and `referralCode` of other users for referral validation.
      allow get: if isAuthenticated();
      allow list: if isAuthenticated(); // Allows querying for referral codes

      // UPDATE:
      // 1. Users can update their own document.
      // 2. Prevent users from changing critical fields like tier, tierExpiry, or referralCode directly.
      //    These should be managed by backend logic (Cloud Functions) or specific app functions.
      allow update: if isOwner(userId)
                      && request.resource.data.tier == resource.data.tier
                      && request.resource.data.tierExpiry == resource.data.tierExpiry
                      && request.resource.data.referralCode == resource.data.referralCode;

      // DELETE: Users can delete their own account.
      allow delete: if isOwner(userId);

      // --- History Subcollection ---
      match /history/{historyId} {
        // Allow users to read/write their own history.
        // Allow a referrer to add a history item to the new user's log (e.g., "Joined via referral").
        allow read, write: if isOwner(userId) || isOwner(request.resource.data.referrerId);
      }
    }

    // =================================
    // Subscriptions Collection
    // =================================
    match /subscriptions/{userId} {
      // Users can read/write their own subscription document.
      // In production, write access should be locked down to backend functions.
      allow read, write: if isOwner(userId);
    }

    // =================================
    // Rewards Collection
    // =================================
    match /rewards/{rewardId} {
      // CREATE: Allow an authenticated user to create a reward document.
      // This is necessary for the free-tier client-side reward granting.
      // The rule ensures the user creating the reward correctly identifies themselves.
      allow create: if isAuthenticated()
                      && request.resource.data.grantedByUserId == request.auth.uid;

      // READ: Users can read rewards intended for them.
      allow get, list: if isAuthenticated() && resource.data.referrerId == request.auth.uid;

      // UPDATE: Users can claim their own rewards (setting `claimed` to true).
      allow update: if isAuthenticated()
                      && resource.data.referrerId == request.auth.uid
                      && request.resource.data.claimed == true
                      && resource.data.claimed == false; // Can only change from false to true

      // DELETE: Nobody can delete rewards from the client.
      allow delete: if false;
    }
  }
}